
RobotArm_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005394  08005394  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800539c  0800539c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080053a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000074  08005418  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005418  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7b0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f77  00000000  00000000  0002f854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000317d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167ac  00000000  00000000  00032fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e824  00000000  00000000  00049784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de8e  00000000  00000000  00057fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000e5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005360 	.word	0x08005360

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005360 	.word	0x08005360

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a38      	ldr	r2, [pc, #224]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_GPIO_Init+0x100>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROT_DIR_Pin|ENABLE_STEPS_Pin|LOW_DIR_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f248 3120 	movw	r1, #33568	; 0x8320
 8000f14:	481d      	ldr	r0, [pc, #116]	; (8000f8c <MX_GPIO_Init+0x104>)
 8000f16:	f001 fd0d 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GRIPPER_IN1_Pin|GRIPPER_IN4_Pin|GRIPPER_IN3_Pin|GRIPPER_IN2_Pin
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f24e 0112 	movw	r1, #57362	; 0xe012
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <MX_GPIO_Init+0x108>)
 8000f22:	f001 fd07 	bl	8002934 <HAL_GPIO_WritePin>
                          |HIGH_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <MX_GPIO_Init+0x10c>)
 8000f3e:	f001 fb75 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ROT_DIR_Pin|ENABLE_STEPS_Pin|LOW_DIR_Pin;
 8000f42:	f248 3320 	movw	r3, #33568	; 0x8320
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_GPIO_Init+0x104>)
 8000f5c:	f001 fb66 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GRIPPER_IN1_Pin|GRIPPER_IN4_Pin|GRIPPER_IN3_Pin|GRIPPER_IN2_Pin
 8000f60:	f24e 0312 	movw	r3, #57362	; 0xe012
 8000f64:	617b      	str	r3, [r7, #20]
                          |HIGH_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_GPIO_Init+0x108>)
 8000f7a:	f001 fb57 	bl	800262c <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f001 f9c2 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f82c 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f7ff ff70 	bl	8000e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa8:	f001 f920 	bl	80021ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fac:	f000 fe4c 	bl	8001c48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fb0:	f000 feea 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fb4:	f000 ff5e 	bl	8001e74 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000fb8:	f000 ffd2 	bl	8001f60 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  robotArm_init(&robotArm);
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <main+0x50>)
 8000fbe:	f000 fb07 	bl	80015d0 <robotArm_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  robotArm_moveToXYZ(&robotArm, 130, 0, -80);
 8000fc2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8000fec <main+0x54>
 8000fc6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8000ff0 <main+0x58>
 8000fca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000ff4 <main+0x5c>
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <main+0x50>)
 8000fd0:	f000 fcb6 	bl	8001940 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 0, 120, 120);
 8000fd4:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8000ff8 <main+0x60>
 8000fd8:	eddf 0a07 	vldr	s1, [pc, #28]	; 8000ff8 <main+0x60>
 8000fdc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000ff0 <main+0x58>
 8000fe0:	4801      	ldr	r0, [pc, #4]	; (8000fe8 <main+0x50>)
 8000fe2:	f000 fcad 	bl	8001940 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 130, 0, -80);
 8000fe6:	e7ec      	b.n	8000fc2 <main+0x2a>
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	c2a00000 	.word	0xc2a00000
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	43020000 	.word	0x43020000
 8000ff8:	42f00000 	.word	0x42f00000

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2230      	movs	r2, #48	; 0x30
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fbba 	bl	8004784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <SystemClock_Config+0xc8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <SystemClock_Config+0xc8>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemClock_Config+0xc8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <SystemClock_Config+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <SystemClock_Config+0xcc>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <SystemClock_Config+0xcc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001078:	2304      	movs	r3, #4
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fc71 	bl	8002968 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800108c:	f000 f944 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2103      	movs	r1, #3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fed3 	bl	8002e58 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010b8:	f000 f92e 	bl	8001318 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==robotArm.gripper_Stepper.timer.htim->Instance){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b66      	ldr	r3, [pc, #408]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	f040 80c2 	bne.w	8001268 <HAL_TIM_PeriodElapsedCallback+0x19c>
		//Full step drive gripper
		switch (robotArm.gripper_Stepper.tick) {
 80010e4:	4b63      	ldr	r3, [pc, #396]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	f200 80bd 	bhi.w	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	0800115d 	.word	0x0800115d
 8001100:	080011b9 	.word	0x080011b9
 8001104:	08001215 	.word	0x08001215
			case 0:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2102      	movs	r1, #2
 800110c:	485a      	ldr	r0, [pc, #360]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800110e:	f001 fc11 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	4857      	ldr	r0, [pc, #348]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800111a:	f001 fc0b 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001124:	4854      	ldr	r0, [pc, #336]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001126:	f001 fc05 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001130:	4851      	ldr	r0, [pc, #324]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001132:	f001 fbff 	bl	8002934 <HAL_GPIO_WritePin>
				if(robotArm.gripper_Stepper.direction==open)robotArm.gripper_Stepper.tick++;
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001138:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800113c:	2b00      	cmp	r3, #0
 800113e:	d108      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x86>
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001142:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800114c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick=3;
				break;
 8001150:	e08b      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
				else robotArm.gripper_Stepper.tick=3;
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001154:	2203      	movs	r2, #3
 8001156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 800115a:	e086      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
			case 1:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2102      	movs	r1, #2
 8001160:	4845      	ldr	r0, [pc, #276]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001162:	f001 fbe7 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	4842      	ldr	r0, [pc, #264]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800116e:	f001 fbe1 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001178:	483f      	ldr	r0, [pc, #252]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800117a:	f001 fbdb 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	483c      	ldr	r0, [pc, #240]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001186:	f001 fbd5 	bl	8002934 <HAL_GPIO_WritePin>
				if(robotArm.gripper_Stepper.direction==open)robotArm.gripper_Stepper.tick++;
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800118c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001196:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 80011a4:	e061      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
				else robotArm.gripper_Stepper.tick--;
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 80011b6:	e058      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
			case 2:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2102      	movs	r1, #2
 80011bc:	482e      	ldr	r0, [pc, #184]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011be:	f001 fbb9 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c8:	482b      	ldr	r0, [pc, #172]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011ca:	f001 fbb3 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d4:	4828      	ldr	r0, [pc, #160]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011d6:	f001 fbad 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4825      	ldr	r0, [pc, #148]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011e2:	f001 fba7 	bl	8002934 <HAL_GPIO_WritePin>
				if(robotArm.gripper_Stepper.direction==open)robotArm.gripper_Stepper.tick++;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011e8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x136>
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 8001200:	e033      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
				else robotArm.gripper_Stepper.tick--;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001204:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001208:	3b01      	subs	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800120e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 8001212:	e02a      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
			case 3:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2102      	movs	r1, #2
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800121a:	f001 fb8b 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001226:	f001 fb85 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001232:	f001 fb7f 	bl	8002934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800123e:	f001 fb79 	bl	8002934 <HAL_GPIO_WritePin>
				if(robotArm.gripper_Stepper.direction==open)robotArm.gripper_Stepper.tick=0;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001244:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x18a>
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 8001254:	e009      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
				else robotArm.gripper_Stepper.tick--;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001258:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800125c:	3b01      	subs	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001262:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 8001266:	e000      	b.n	800126a <HAL_TIM_PeriodElapsedCallback+0x19e>
		}
	}
 8001268:	bf00      	nop
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000090 	.word	0x20000090
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if(htim->Instance == robotArm.high_Stepper.timer.htim->Instance)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d10d      	bne.n	80012ae <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		robotArm.high_Stepper.step_counter++;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800129a:	60d3      	str	r3, [r2, #12]

		if(robotArm.high_Stepper.step_counter >= robotArm.high_Stepper.steps_to_count)
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d302      	bcc.n	80012ae <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&robotArm.high_Stepper);
 80012a8:	4818      	ldr	r0, [pc, #96]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012aa:	f000 f8cf 	bl	800144c <stepper_stop>
		}
	}
	if(htim->Instance == robotArm.low_Stepper.timer.htim->Instance)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10d      	bne.n	80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
	{
		robotArm.low_Stepper.step_counter++;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012c4:	62d3      	str	r3, [r2, #44]	; 0x2c

		if(robotArm.low_Stepper.step_counter >= robotArm.low_Stepper.steps_to_count)
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
		{
			stepper_stop(&robotArm.low_Stepper);
 80012d2:	480f      	ldr	r0, [pc, #60]	; (8001310 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80012d4:	f000 f8ba 	bl	800144c <stepper_stop>
		}
	}
	if(htim->Instance == robotArm.rot_Stepper.timer.htim->Instance)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d10d      	bne.n	8001302 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
	{
		robotArm.rot_Stepper.step_counter++;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012ee:	64d3      	str	r3, [r2, #76]	; 0x4c

		if(robotArm.rot_Stepper.step_counter >= robotArm.rot_Stepper.steps_to_count)
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d302      	bcc.n	8001302 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
		{
			stepper_stop(&robotArm.rot_Stepper);
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 80012fe:	f000 f8a5 	bl	800144c <stepper_stop>
		}
	}
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000090 	.word	0x20000090
 8001310:	200000b0 	.word	0x200000b0
 8001314:	200000d0 	.word	0x200000d0

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>

08001322 <stepper_init>:

#include "robotArm.h"
#include "math.h"

void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel, GPIO_TypeDef *_dirPortGPIO, uint16_t _dirPinGPIO)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]

	_stepper->timer.htim = _htim;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
	_stepper->dirGPIO.PORT = _dirPortGPIO;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	611a      	str	r2, [r3, #16]
	_stepper->dirGPIO.PIN = _dirPinGPIO;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8b3a      	ldrh	r2, [r7, #24]
 8001346:	829a      	strh	r2, [r3, #20]
	_stepper->speed = SPEED_DEFAULT;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	223c      	movs	r2, #60	; 0x3c
 800134c:	775a      	strb	r2, [r3, #29]
	stepper_set_speed(_stepper, SPEED_DEFAULT);
 800134e:	213c      	movs	r1, #60	; 0x3c
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f8d5 	bl	8001500 <stepper_set_speed>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <stepper_set_angle_radian>:
	}

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
}
void stepper_set_angle_radian(struct stepper_s *_stepper, float _angle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	ed87 0a00 	vstr	s0, [r7]
	_stepper->mode = working;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	721a      	strb	r2, [r3, #8]
	stepper_set_speed(_stepper, _stepper->speed);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7f5b      	ldrb	r3, [r3, #29]
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8c1 	bl	8001500 <stepper_set_speed>
	if (_angle > 0) {
 800137e:	edd7 7a00 	vldr	s15, [r7]
 8001382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	dd1c      	ble.n	80013c6 <stepper_set_angle_radian+0x66>
		stepper_set_direction(_stepper, CW);
 800138c:	2101      	movs	r1, #1
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f892 	bl	80014b8 <stepper_set_direction>
		_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / (2.0 * M_PI);
 8001394:	edd7 7a00 	vldr	s15, [r7]
 8001398:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001448 <stepper_set_angle_radian+0xe8>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	ee17 0a90 	vmov	r0, s15
 80013a4:	f7ff f87c 	bl	80004a0 <__aeabi_f2d>
 80013a8:	a325      	add	r3, pc, #148	; (adr r3, 8001440 <stepper_set_angle_radian+0xe0>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f9f9 	bl	80007a4 <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb79 	bl	8000ab0 <__aeabi_d2uiz>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
 80013c4:	e024      	b.n	8001410 <stepper_set_angle_radian+0xb0>
	}
	else if (_angle < 0){
 80013c6:	edd7 7a00 	vldr	s15, [r7]
 80013ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d51d      	bpl.n	8001410 <stepper_set_angle_radian+0xb0>
		stepper_set_direction(_stepper, CCW);
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f86e 	bl	80014b8 <stepper_set_direction>
		_stepper->steps_to_count = -_angle * (STEP_PER_REVOLUTION * MICRO_STEP) / (2.0 * M_PI);
 80013dc:	edd7 7a00 	vldr	s15, [r7]
 80013e0:	eef1 7a67 	vneg.f32	s15, s15
 80013e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001448 <stepper_set_angle_radian+0xe8>
 80013e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ec:	ee17 0a90 	vmov	r0, s15
 80013f0:	f7ff f856 	bl	80004a0 <__aeabi_f2d>
 80013f4:	a312      	add	r3, pc, #72	; (adr r3, 8001440 <stepper_set_angle_radian+0xe0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f9d3 	bl	80007a4 <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fb53 	bl	8000ab0 <__aeabi_d2uiz>
 800140a:	4602      	mov	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
	}
	_stepper->step_counter = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]

	if(0 == _stepper->steps_to_count)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <stepper_set_angle_radian+0xc4>
	{
		stepper_stop(_stepper);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f814 	bl	800144c <stepper_stop>
	}

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f002 f81a 	bl	8003468 <HAL_TIM_PWM_Start_IT>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	54442d18 	.word	0x54442d18
 8001444:	401921fb 	.word	0x401921fb
 8001448:	45480000 	.word	0x45480000

0800144c <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <stepper_stop+0x22>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
 800146c:	e018      	b.n	80014a0 <stepper_stop+0x54>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d105      	bne.n	8001482 <stepper_stop+0x36>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	6393      	str	r3, [r2, #56]	; 0x38
 8001480:	e00e      	b.n	80014a0 <stepper_stop+0x54>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d105      	bne.n	8001496 <stepper_stop+0x4a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001494:	e004      	b.n	80014a0 <stepper_stop+0x54>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f001 ff78 	bl	80033a0 <HAL_TIM_PWM_Stop>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, stepper_direction _dir)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
	_stepper->direction=_dir;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	771a      	strb	r2, [r3, #28]
	if(_dir == CCW)
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <stepper_set_direction+0x2a>
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_SET);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6918      	ldr	r0, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	8a9b      	ldrh	r3, [r3, #20]
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f001 fa2a 	bl	8002934 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_RESET);
}
 80014e0:	e00a      	b.n	80014f8 <stepper_set_direction+0x40>
	else if(_dir == CW)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <stepper_set_direction+0x40>
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_RESET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6918      	ldr	r0, [r3, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	8a9b      	ldrh	r3, [r3, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	f001 fa1e 	bl	8002934 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <stepper_set_speed>:
void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d902      	bls.n	8001516 <stepper_set_speed+0x16>
	{
		_speed = 100;
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	e006      	b.n	8001524 <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff95 	bl	800144c <stepper_stop>
		return;
 8001522:	e050      	b.n	80015c6 <stepper_set_speed+0xc6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a27      	ldr	r2, [pc, #156]	; (80015cc <stepper_set_speed+0xcc>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8001538:	f001 fe62 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 800153c:	4601      	mov	r1, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	fbb1 f3f3 	udiv	r3, r1, r3
 800154e:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	3a01      	subs	r2, #1
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	3a01      	subs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <stepper_set_speed+0x88>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	085a      	lsrs	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3a01      	subs	r2, #1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
 8001586:	e01e      	b.n	80015c6 <stepper_set_speed+0xc6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d107      	bne.n	80015a0 <stepper_set_speed+0xa0>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	6393      	str	r3, [r2, #56]	; 0x38
 800159e:	e012      	b.n	80015c6 <stepper_set_speed+0xc6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d107      	bne.n	80015b8 <stepper_set_speed+0xb8>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80015b6:	e006      	b.n	80015c6 <stepper_set_speed+0xc6>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	51eb851f 	.word	0x51eb851f

080015d0 <robotArm_init>:

void robotArm_init(struct robotArm_s*_robotArm){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENABLE_STEPS_GPIO_Port, ENABLE_STEPS_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4824      	ldr	r0, [pc, #144]	; (8001670 <robotArm_init+0xa0>)
 80015e0:	f001 f9a8 	bl	8002934 <HAL_GPIO_WritePin>


	stepper_init(&_robotArm->high_Stepper, &HIGH_STEP_HTIM, HIGH_STEP_TIM_CHANNEL, HIGH_DIR_GPIO_Port, HIGH_DIR_Pin);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	2310      	movs	r3, #16
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <robotArm_init+0xa4>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	4922      	ldr	r1, [pc, #136]	; (8001678 <robotArm_init+0xa8>)
 80015f0:	f7ff fe97 	bl	8001322 <stepper_init>

	stepper_init(&_robotArm->low_Stepper, &LOW_STEP_HTIM, LOW_STEP_TIM_CHANNEL, LOW_DIR_GPIO_Port, LOW_DIR_Pin);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f103 0020 	add.w	r0, r3, #32
 80015fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <robotArm_init+0xa0>)
 8001602:	2204      	movs	r2, #4
 8001604:	491d      	ldr	r1, [pc, #116]	; (800167c <robotArm_init+0xac>)
 8001606:	f7ff fe8c 	bl	8001322 <stepper_init>

	stepper_init(&_robotArm->rot_Stepper, &ROT_STEP_HTIM, ROT_STEP_TIM_CHANNEL, ROT_DIR_GPIO_Port, ROT_DIR_Pin);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <robotArm_init+0xa0>)
 8001618:	2204      	movs	r2, #4
 800161a:	4919      	ldr	r1, [pc, #100]	; (8001680 <robotArm_init+0xb0>)
 800161c:	f7ff fe81 	bl	8001322 <stepper_init>

	_robotArm->highBigGear = HIGH_ENDSTOP;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <robotArm_init+0xb4>)
 8001624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	_robotArm->lowBigGear = LOW_ENDSTOP;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <robotArm_init+0xb8>)
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	_robotArm->rotBigGear = ROT_ENDSTOP;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	_robotArm->highSmallGear = HIGH_HOME * GEAR_RATIO;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <robotArm_init+0xbc>)
 800163e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	_robotArm->lowSmallGear = LOW_HOME * GEAR_RATIO;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	_robotArm->rotSmallGear = ROT_HOME * GEAR_RATIO;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	robotArm_moveToXYZ(_robotArm,X_HOME,Y_HOME,Z_HOME);
 8001656:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001690 <robotArm_init+0xc0>
 800165a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001690 <robotArm_init+0xc0>
 800165e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001694 <robotArm_init+0xc4>
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f96c 	bl	8001940 <robotArm_moveToXYZ>


}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	2000020c 	.word	0x2000020c
 800167c:	20000134 	.word	0x20000134
 8001680:	200001c4 	.word	0x200001c4
 8001684:	3f9946b6 	.word	0x3f9946b6
 8001688:	bf53bd95 	.word	0xbf53bd95
 800168c:	40b2b8c2 	.word	0x40b2b8c2
 8001690:	42f00000 	.word	0x42f00000
 8001694:	00000000 	.word	0x00000000

08001698 <robotArm_Geometry_calculateRadian>:
void robotArm_Geometry_calculateRadian(struct robotArm_s *_robotArm, float _Xmm, float _Ymm, float _Zmm) {
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80016a8:	ed87 1a00 	vstr	s2, [r7]
   // => the 'high' angle is asin
   // => the 'low' ancle is arcos
   //since the difference is only angle and direction the wrong formulas actually worked. All constant offsets are removed.
   //below the refactored code:

	float xmm=_Xmm;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
	float ymm=_Ymm;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
	float zmm=_Zmm;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	623b      	str	r3, [r7, #32]
	float high, low, rot;

   float rrot =  sqrt((xmm * xmm) + (ymm * ymm));    //radius from Top View
 80016b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	ee17 0a90 	vmov	r0, s15
 80016d0:	f7fe fee6 	bl	80004a0 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	ec43 2b10 	vmov	d0, r2, r3
 80016dc:	f003 f8ce 	bl	800487c <sqrt>
 80016e0:	ec53 2b10 	vmov	r2, r3, d0
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa02 	bl	8000af0 <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	61fb      	str	r3, [r7, #28]
   float rside = sqrt((rrot * rrot) + (zmm * zmm));  //radius from Side View. Use rrot instead of ymm..for everything
 80016f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	ee17 0a90 	vmov	r0, s15
 8001708:	f7fe feca 	bl	80004a0 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b10 	vmov	d0, r2, r3
 8001714:	f003 f8b2 	bl	800487c <sqrt>
 8001718:	ec53 2b10 	vmov	r2, r3, d0
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9e6 	bl	8000af0 <__aeabi_d2f>
 8001724:	4603      	mov	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]


   rot = asin(xmm / rrot);
 8001728:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800172c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001730:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001734:	ee16 0a90 	vmov	r0, s13
 8001738:	f7fe feb2 	bl	80004a0 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	ec43 2b10 	vmov	d0, r2, r3
 8001744:	f003 f860 	bl	8004808 <asin>
 8001748:	ec53 2b10 	vmov	r2, r3, d0
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f9ce 	bl	8000af0 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	617b      	str	r3, [r7, #20]
   //Angle of Higher Stepper Motor. Need to invert it because that is the way the motor spins from the old code. Compatibility must remain.
   //high = 2 * PI - asin((rside * 0.5) / 120.0) * 2.0;  //120mm shank length
   high = - asin((rside * 0.5) / 120.0) * 2.0;  //120mm shank length + Neglegt the offset because not needed
 8001758:	69b8      	ldr	r0, [r7, #24]
 800175a:	f7fe fea1 	bl	80004a0 <__aeabi_f2d>
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <robotArm_Geometry_calculateRadian+0x2a0>)
 8001764:	f7fe fef4 	bl	8000550 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <robotArm_Geometry_calculateRadian+0x2a4>)
 8001776:	f7ff f815 	bl	80007a4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ec43 2b17 	vmov	d7, r2, r3
 8001782:	eeb0 0a47 	vmov.f32	s0, s14
 8001786:	eef0 0a67 	vmov.f32	s1, s15
 800178a:	f003 f83d 	bl	8004808 <asin>
 800178e:	ec53 2b10 	vmov	r2, r3, d0
 8001792:	4614      	mov	r4, r2
 8001794:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd20 	bl	80001e4 <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9a0 	bl	8000af0 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	613b      	str	r3, [r7, #16]
   //Angle of Lower Stepper Motor  (acos()=Angle To Gripper)
   if (zmm > 0) {
 80017b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd3f      	ble.n	8001842 <robotArm_Geometry_calculateRadian+0x1aa>
     //low = PI / 2 - acos(rrot / rside) + ((PI - high) / 2.0) - (PI / 2.0); //instead of asin acos is more correct. But that was corrected by the angle
     low = - acos(rrot / rside) + ((M_PI - high) / 2.0) - (M_PI / 2.0); //instead of asin acos is more correct. But that was corrected by the angle +Neglegt the offset because not needed
 80017c2:	6938      	ldr	r0, [r7, #16]
 80017c4:	f7fe fe6c 	bl	80004a0 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	a156      	add	r1, pc, #344	; (adr r1, 8001928 <robotArm_Geometry_calculateRadian+0x290>)
 80017ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d2:	f7fe fd05 	bl	80001e0 <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e6:	f7fe ffdd 	bl	80007a4 <__aeabi_ddiv>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4614      	mov	r4, r2
 80017f0:	461d      	mov	r5, r3
 80017f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80017f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017fe:	ee16 0a90 	vmov	r0, s13
 8001802:	f7fe fe4d 	bl	80004a0 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ec43 2b10 	vmov	d0, r2, r3
 800180e:	f002 ffc1 	bl	8004794 <acos>
 8001812:	ec53 2b10 	vmov	r2, r3, d0
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fce1 	bl	80001e0 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	a342      	add	r3, pc, #264	; (adr r3, 8001930 <robotArm_Geometry_calculateRadian+0x298>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fcd8 	bl	80001e0 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f95a 	bl	8000af0 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	e03c      	b.n	80018bc <robotArm_Geometry_calculateRadian+0x224>
   } else {
     //low = PI / 2 + acos(rrot / rside) + ((PI - high) / 2.0) - (PI / 2.0);
     low = + acos(rrot / rside) + ((M_PI - high) / 2.0) - (M_PI / 2.0);   //Neglegt the offset because not needed
 8001842:	ed97 7a07 	vldr	s14, [r7, #28]
 8001846:	edd7 7a06 	vldr	s15, [r7, #24]
 800184a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800184e:	ee16 0a90 	vmov	r0, s13
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	f002 ff99 	bl	8004794 <acos>
 8001862:	ec55 4b10 	vmov	r4, r5, d0
 8001866:	6938      	ldr	r0, [r7, #16]
 8001868:	f7fe fe1a 	bl	80004a0 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	a12d      	add	r1, pc, #180	; (adr r1, 8001928 <robotArm_Geometry_calculateRadian+0x290>)
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001876:	f7fe fcb3 	bl	80001e0 <__aeabi_dsub>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188a:	f7fe ff8b 	bl	80007a4 <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe fca5 	bl	80001e4 <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a323      	add	r3, pc, #140	; (adr r3, 8001930 <robotArm_Geometry_calculateRadian+0x298>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fc9a 	bl	80001e0 <__aeabi_dsub>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f91c 	bl	8000af0 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   }
   //correct higher Angle as it is mechanically bounded width lower Motor
   high = high + low;
 80018bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc7 7a04 	vstr	s15, [r7, #16]

   //_robotArm->calcHigh = high;
   if (zmm>0)_robotArm->calcHigh = -high;
 80018cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80018d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	dd07      	ble.n	80018ea <robotArm_Geometry_calculateRadian+0x252>
 80018da:	edd7 7a04 	vldr	s15, [r7, #16]
 80018de:	eef1 7a67 	vneg.f32	s15, s15
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 80018e8:	e011      	b.n	800190e <robotArm_Geometry_calculateRadian+0x276>
   else _robotArm->calcHigh = high + M_PI;
 80018ea:	6938      	ldr	r0, [r7, #16]
 80018ec:	f7fe fdd8 	bl	80004a0 <__aeabi_f2d>
 80018f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001928 <robotArm_Geometry_calculateRadian+0x290>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fc75 	bl	80001e4 <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f8f5 	bl	8000af0 <__aeabi_d2f>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   _robotArm->calcLow = low;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   _robotArm->calcRot = rot;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	54442d18 	.word	0x54442d18
 800192c:	400921fb 	.word	0x400921fb
 8001930:	54442d18 	.word	0x54442d18
 8001934:	3ff921fb 	.word	0x3ff921fb
 8001938:	3fe00000 	.word	0x3fe00000
 800193c:	405e0000 	.word	0x405e0000

08001940 <robotArm_moveToXYZ>:


void robotArm_moveToXYZ(struct robotArm_s * _robotArm, float _Xmm, float _Ymm, float _Zmm){
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	ed87 0a02 	vstr	s0, [r7, #8]
 800194c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001950:	ed87 1a00 	vstr	s2, [r7]

	float highAngleToMove, lowAngleToMove, rotAngleToMove;


	robotArm_Geometry_calculateRadian(_robotArm, _Xmm, _Ymm,_Zmm);
 8001954:	ed97 1a00 	vldr	s2, [r7]
 8001958:	edd7 0a01 	vldr	s1, [r7, #4]
 800195c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff fe99 	bl	8001698 <robotArm_Geometry_calculateRadian>

	highAngleToMove=(_robotArm->calcHigh-_robotArm->highBigGear)*GEAR_RATIO;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001976:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 800197a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800197e:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001986:	edc7 7a07 	vstr	s15, [r7, #28]
	lowAngleToMove=(_robotArm->calcLow-_robotArm->lowBigGear)*GEAR_RATIO;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	edc7 7a06 	vstr	s15, [r7, #24]
	rotAngleToMove=(_robotArm->calcRot-_robotArm->rotBigGear)*GEAR_RATIO;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019be:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 80019c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019c6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	edc7 7a05 	vstr	s15, [r7, #20]


		if(lowAngleToMove)stepper_set_angle_radian(&_robotArm->low_Stepper, lowAngleToMove);
 80019d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d006      	beq.n	80019ee <robotArm_moveToXYZ+0xae>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3320      	adds	r3, #32
 80019e4:	ed97 0a06 	vldr	s0, [r7, #24]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fcb9 	bl	8001360 <stepper_set_angle_radian>

		if(highAngleToMove)stepper_set_angle_radian(&_robotArm->high_Stepper, highAngleToMove);
 80019ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	d005      	beq.n	8001a08 <robotArm_moveToXYZ+0xc8>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fcac 	bl	8001360 <stepper_set_angle_radian>

		if(rotAngleToMove)stepper_set_angle_radian(&_robotArm->rot_Stepper, rotAngleToMove);
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d006      	beq.n	8001a24 <robotArm_moveToXYZ+0xe4>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3340      	adds	r3, #64	; 0x40
 8001a1a:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fc9e 	bl	8001360 <stepper_set_angle_radian>

	while(!robotArm_isIdle(_robotArm));
 8001a24:	bf00      	nop
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f84e 	bl	8001ac8 <robotArm_isIdle>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f9      	beq.n	8001a26 <robotArm_moveToXYZ+0xe6>
	//Update XYZ
	_robotArm->Xmm = _Xmm;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	675a      	str	r2, [r3, #116]	; 0x74
	_robotArm->Ymm = _Ymm;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	679a      	str	r2, [r3, #120]	; 0x78
	_robotArm->Zmm = _Zmm;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	67da      	str	r2, [r3, #124]	; 0x7c

	//Update angle of big gear
	_robotArm->highBigGear = _robotArm->calcHigh;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	_robotArm->lowBigGear = _robotArm->calcLow;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	_robotArm->rotBigGear = _robotArm->calcRot;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	//Update angle of small Gear
	_robotArm->highSmallGear=_robotArm->highBigGear * GEAR_RATIO;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001a6e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 8001a72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a76:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	_robotArm->lowSmallGear=_robotArm->lowBigGear * GEAR_RATIO;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 8001a8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a92:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	_robotArm->rotSmallGear=_robotArm->rotBigGear * GEAR_RATIO;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001aa6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ac4 <robotArm_moveToXYZ+0x184>
 8001aaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aae:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	42000000 	.word	0x42000000

08001ac8 <robotArm_isIdle>:


unsigned int robotArm_isIdle(struct robotArm_s * _robotArm){
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(_robotArm->high_Stepper.mode==idle &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7a1b      	ldrb	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <robotArm_isIdle+0x28>
	   _robotArm->low_Stepper.mode==idle &&
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if(_robotArm->high_Stepper.mode==idle &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <robotArm_isIdle+0x28>
	   _robotArm->rot_Stepper.mode==idle
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	   _robotArm->low_Stepper.mode==idle &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <robotArm_isIdle+0x28>
	)return 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <robotArm_isIdle+0x2a>
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3e:	2007      	movs	r0, #7
 8001b40:	f000 fd32 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <NMI_Handler+0x4>

08001b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 fc14 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001baa:	f001 fd5b 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000020c 	.word	0x2000020c

08001bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001bbe:	f001 fd51 	bl	8003664 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001bc4:	f001 fd4e 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000020c 	.word	0x2000020c
 8001bd0:	2000017c 	.word	0x2000017c

08001bd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bda:	f001 fd43 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000020c 	.word	0x2000020c

08001be8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM1_CC_IRQHandler+0x10>)
 8001bee:	f001 fd39 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000020c 	.word	0x2000020c

08001bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <TIM3_IRQHandler+0x10>)
 8001c02:	f001 fd2f 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001c4 	.word	0x200001c4

08001c10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM4_IRQHandler+0x10>)
 8001c16:	f001 fd25 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000134 	.word	0x20000134

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	; 0x58
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fd7f 	bl	8004784 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <MX_TIM1_Init+0x13c>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001c8e:	2263      	movs	r2, #99	; 0x63
 8001c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001c9a:	2263      	movs	r2, #99	; 0x63
 8001c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb0:	4833      	ldr	r0, [pc, #204]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001cb2:	f001 facd 	bl	8003250 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001cbc:	f7ff fb2c 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cca:	4619      	mov	r1, r3
 8001ccc:	482c      	ldr	r0, [pc, #176]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001cce:	f001 fe93 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001cd8:	f7ff fb1e 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001cde:	f001 fb06 	bl	80032ee <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ce8:	f7ff fb16 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4821      	ldr	r0, [pc, #132]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001cfc:	f002 fa2e 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001d06:	f7ff fb07 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0a:	2360      	movs	r3, #96	; 0x60
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100/2-1;
 8001d0e:	2331      	movs	r3, #49	; 0x31
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001d30:	f001 fda0 	bl	8003874 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d3a:	f7ff faed 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001d62:	f002 fa69 	bl	8004238 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d6c:	f7ff fad4 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <MX_TIM1_Init+0x138>)
 8001d72:	f000 f9b3 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001d76:	bf00      	nop
 8001d78:	3758      	adds	r7, #88	; 0x58
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000020c 	.word	0x2000020c
 8001d84:	40010000 	.word	0x40010000

08001d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <MX_TIM3_Init+0xe8>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc0:	2263      	movs	r2, #99	; 0x63
 8001dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dcc:	2263      	movs	r2, #99	; 0x63
 8001dce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ddc:	4823      	ldr	r0, [pc, #140]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dde:	f001 fa37 	bl	8003250 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001de8:	f7ff fa96 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df6:	4619      	mov	r1, r3
 8001df8:	481c      	ldr	r0, [pc, #112]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001dfa:	f001 fdfd 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001e04:	f7ff fa88 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e08:	4818      	ldr	r0, [pc, #96]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001e0a:	f001 fa70 	bl	80032ee <HAL_TIM_PWM_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001e14:	f7ff fa80 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4619      	mov	r1, r3
 8001e26:	4811      	ldr	r0, [pc, #68]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001e28:	f002 f998 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001e32:	f7ff fa71 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e36:	2360      	movs	r3, #96	; 0x60
 8001e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100/2-1;
 8001e3a:	2331      	movs	r3, #49	; 0x31
 8001e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001e4e:	f001 fd11 	bl	8003874 <HAL_TIM_PWM_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001e58:	f7ff fa5e 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <MX_TIM3_Init+0xe4>)
 8001e5e:	f000 f93d 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001e62:	bf00      	nop
 8001e64:	3738      	adds	r7, #56	; 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200001c4 	.word	0x200001c4
 8001e70:	40000400 	.word	0x40000400

08001e74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <MX_TIM4_Init+0xe8>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001eac:	2263      	movs	r2, #99	; 0x63
 8001eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001eb8:	2263      	movs	r2, #99	; 0x63
 8001eba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ec8:	4823      	ldr	r0, [pc, #140]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001eca:	f001 f9c1 	bl	8003250 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001ed4:	f7ff fa20 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	481c      	ldr	r0, [pc, #112]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001ee6:	f001 fd87 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001ef0:	f7ff fa12 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ef4:	4818      	ldr	r0, [pc, #96]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001ef6:	f001 f9fa 	bl	80032ee <HAL_TIM_PWM_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001f00:	f7ff fa0a 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	4619      	mov	r1, r3
 8001f12:	4811      	ldr	r0, [pc, #68]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001f14:	f002 f922 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001f1e:	f7ff f9fb 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f22:	2360      	movs	r3, #96	; 0x60
 8001f24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100/2-1;
 8001f26:	2331      	movs	r3, #49	; 0x31
 8001f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001f3a:	f001 fc9b 	bl	8003874 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001f44:	f7ff f9e8 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <MX_TIM4_Init+0xe4>)
 8001f4a:	f000 f8c7 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	; 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000134 	.word	0x20000134
 8001f5c:	40000800 	.word	0x40000800

08001f60 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <MX_TIM10_Init+0x44>)
 8001f68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000-1;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f70:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_TIM10_Init+0x40>)
 8001f8e:	f001 f95f 	bl	8003250 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001f98:	f7ff f9be 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000017c 	.word	0x2000017c
 8001fa4:	40014400 	.word	0x40014400

08001fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_TIM_Base_MspInit+0x120>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12e      	bne.n	8002018 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a42      	ldr	r2, [pc, #264]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2018      	movs	r0, #24
 8001fdc:	f000 faef 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fe0:	2018      	movs	r0, #24
 8001fe2:	f000 fb08 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2019      	movs	r0, #25
 8001fec:	f000 fae7 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f000 fb00 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	201a      	movs	r0, #26
 8001ffc:	f000 fadf 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002000:	201a      	movs	r0, #26
 8002002:	f000 faf8 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	201b      	movs	r0, #27
 800200c:	f000 fad7 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002010:	201b      	movs	r0, #27
 8002012:	f000 faf0 	bl	80025f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002016:	e052      	b.n	80020be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <HAL_TIM_Base_MspInit+0x128>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d116      	bne.n	8002050 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201d      	movs	r0, #29
 8002044:	f000 fabb 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002048:	201d      	movs	r0, #29
 800204a:	f000 fad4 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 800204e:	e036      	b.n	80020be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_TIM_Base_MspInit+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d116      	bne.n	8002088 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	201e      	movs	r0, #30
 800207c:	f000 fa9f 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002080:	201e      	movs	r0, #30
 8002082:	f000 fab8 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 8002086:	e01a      	b.n	80020be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_TIM_Base_MspInit+0x130>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d115      	bne.n	80020be <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_TIM_Base_MspInit+0x124>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2019      	movs	r0, #25
 80020b4:	f000 fa83 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020b8:	2019      	movs	r0, #25
 80020ba:	f000 fa9c 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40014400 	.word	0x40014400

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <HAL_TIM_MspPostInit+0xf8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11f      	bne.n	800213e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HIGH_STEP_Pin;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800212c:	2301      	movs	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIGH_STEP_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4829      	ldr	r0, [pc, #164]	; (80021dc <HAL_TIM_MspPostInit+0x100>)
 8002138:	f000 fa78 	bl	800262c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800213c:	e046      	b.n	80021cc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_TIM_MspPostInit+0x104>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d11e      	bne.n	8002186 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROT_STEP_Pin;
 8002164:	2320      	movs	r3, #32
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002174:	2302      	movs	r3, #2
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROT_STEP_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4819      	ldr	r0, [pc, #100]	; (80021e4 <HAL_TIM_MspPostInit+0x108>)
 8002180:	f000 fa54 	bl	800262c <HAL_GPIO_Init>
}
 8002184:	e022      	b.n	80021cc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_TIM_MspPostInit+0x10c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d11d      	bne.n	80021cc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_TIM_MspPostInit+0xfc>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LOW_STEP_Pin;
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021bc:	2302      	movs	r3, #2
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOW_STEP_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <HAL_TIM_MspPostInit+0x108>)
 80021c8:	f000 fa30 	bl	800262c <HAL_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40000800 	.word	0x40000800

080021ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <MX_USART2_UART_Init+0x50>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 80021f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_USART2_UART_Init+0x4c>)
 8002224:	f002 f86e 	bl	8004304 <HAL_UART_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800222e:	f7ff f873 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000254 	.word	0x20000254
 800223c:	40004400 	.word	0x40004400

08002240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_UART_MspInit+0x84>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d12b      	bne.n	80022ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_UART_MspInit+0x88>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800229a:	230c      	movs	r3, #12
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022aa:	2307      	movs	r3, #7
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_UART_MspInit+0x8c>)
 80022b6:	f000 f9b9 	bl	800262c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40004400 	.word	0x40004400
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020000 	.word	0x40020000

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022d6:	490e      	ldr	r1, [pc, #56]	; (8002310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ec:	4c0b      	ldr	r4, [pc, #44]	; (800231c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022fa:	f7ff fc93 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f002 fa1d 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7fe fe49 	bl	8000f98 <main>
  bx  lr    
 8002306:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002314:	080053a4 	.word	0x080053a4
  ldr r2, =_sbss
 8002318:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800231c:	2000029c 	.word	0x2000029c

08002320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_Init+0x40>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_Init+0x40>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_Init+0x40>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f92b 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 f808 	bl	8002368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002358:	f7ff fbd2 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x54>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_InitTick+0x58>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f943 	bl	8002612 <HAL_SYSTICK_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00e      	b.n	80023b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d80a      	bhi.n	80023b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f000 f90b 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_InitTick+0x5c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000298 	.word	0x20000298

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000298 	.word	0x20000298

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	; (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	; (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	; (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff8e 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff29 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff3e 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff8e 	bl	80024fc <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff31 	bl	800246c <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e159      	b.n	80028fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8148 	bne.w	80028f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d005      	beq.n	800267e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	2b02      	cmp	r3, #2
 800267c:	d130      	bne.n	80026e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0201 	and.w	r2, r3, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d017      	beq.n	800271c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a2 	beq.w	80028f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b54      	ldr	r3, [pc, #336]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ce:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_GPIO_Init+0x2ec>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_GPIO_Init+0x2f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x202>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a48      	ldr	r2, [pc, #288]	; (8002920 <HAL_GPIO_Init+0x2f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x1fe>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a47      	ldr	r2, [pc, #284]	; (8002924 <HAL_GPIO_Init+0x2f8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x1fa>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a46      	ldr	r2, [pc, #280]	; (8002928 <HAL_GPIO_Init+0x2fc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x1f6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_GPIO_Init+0x300>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x1f2>
 800281a:	2304      	movs	r3, #4
 800281c:	e008      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800281e:	2307      	movs	r3, #7
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x204>
 8002822:	2303      	movs	r3, #3
 8002824:	e004      	b.n	8002830 <HAL_GPIO_Init+0x204>
 8002826:	2302      	movs	r3, #2
 8002828:	e002      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800282e:	2300      	movs	r3, #0
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f002 0203 	and.w	r2, r2, #3
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	4093      	lsls	r3, r2
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x2ec>)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_GPIO_Init+0x304>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002872:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <HAL_GPIO_Init+0x304>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_GPIO_Init+0x304>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289c:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_GPIO_Init+0x304>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f0:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	f67f aea2 	bls.w	8002648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40013800 	.word	0x40013800
 800291c:	40020000 	.word	0x40020000
 8002920:	40020400 	.word	0x40020400
 8002924:	40020800 	.word	0x40020800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40021000 	.word	0x40021000
 8002930:	40013c00 	.word	0x40013c00

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002950:	e003      	b.n	800295a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	041a      	lsls	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	619a      	str	r2, [r3, #24]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e264      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d075      	beq.n	8002a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002986:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d00c      	beq.n	80029ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4ba0      	ldr	r3, [pc, #640]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d112      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x108>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e23f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x74>
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a90      	ldr	r2, [pc, #576]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a87      	ldr	r2, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 8002a00:	4b84      	ldr	r3, [pc, #528]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a80      	ldr	r2, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fce6 	bl	80023f0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fce2 	bl	80023f0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e204      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xc0>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff fcd2 	bl	80023f0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff fcce 	bl	80023f0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1f0      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0xe8>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c4      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4952      	ldr	r1, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7ff fc87 	bl	80023f0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7ff fc83 	bl	80023f0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4940      	ldr	r1, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff fc66 	bl	80023f0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7ff fc62 	bl	80023f0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e184      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff fc46 	bl	80023f0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7ff fc42 	bl	80023f0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e164      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x200>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fc2f 	bl	80023f0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7ff fc2b 	bl	80023f0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e14d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a0 	beq.w	8002d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff fbf1 	bl	80023f0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e011      	b.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
 8002c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7ff fbe4 	bl	80023f0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e106      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b85      	ldr	r3, [pc, #532]	; (8002e4c <HAL_RCC_OscConfig+0x4e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
 8002c4a:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a80      	ldr	r2, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c60:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c7a:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fba9 	bl	80023f0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff fba5 	bl	80023f0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0c5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x33a>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff fb93 	bl	80023f0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7ff fb8f 	bl	80023f0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0af      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 809b 	beq.w	8002e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d05c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d141      	bne.n	8002da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7ff fb63 	bl	80023f0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7ff fb5f 	bl	80023f0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e081      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	019b      	lsls	r3, r3, #6
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fb38 	bl	80023f0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff fb34 	bl	80023f0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e056      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x41c>
 8002da2:	e04e      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff fb21 	bl	80023f0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7ff fb1d 	bl	80023f0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x44a>
 8002dd0:	e037      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e032      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d028      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d121      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d11a      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470060 	.word	0x42470060

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cc      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90c      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e067      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7ff fa52 	bl	80023f0 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7ff fa4e 	bl	80023f0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f9b2 	bl	8002368 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	08005378 	.word	0x08005378
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80bd 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e0b7      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800305a:	60bb      	str	r3, [r7, #8]
       break;
 800305c:	e0b7      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003060:	60bb      	str	r3, [r7, #8]
      break;
 8003062:	e0b4      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04d      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	ea02 0800 	and.w	r8, r2, r0
 8003092:	ea03 0901 	and.w	r9, r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	014b      	lsls	r3, r1, #5
 80030a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a8:	0142      	lsls	r2, r0, #5
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	ebb0 0008 	subs.w	r0, r0, r8
 80030b2:	eb61 0109 	sbc.w	r1, r1, r9
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	018b      	lsls	r3, r1, #6
 80030c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030c4:	0182      	lsls	r2, r0, #6
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	eb63 0301 	sbc.w	r3, r3, r1
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	00d9      	lsls	r1, r3, #3
 80030d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030da:	00d0      	lsls	r0, r2, #3
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	eb12 0208 	adds.w	r2, r2, r8
 80030e4:	eb43 0309 	adc.w	r3, r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0259      	lsls	r1, r3, #9
 80030f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030f6:	0250      	lsls	r0, r2, #9
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f7fd fd42 	bl	8000b90 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e04a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	ea02 0400 	and.w	r4, r2, r0
 800312e:	ea03 0501 	and.w	r5, r3, r1
 8003132:	4620      	mov	r0, r4
 8003134:	4629      	mov	r1, r5
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	014b      	lsls	r3, r1, #5
 8003140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003144:	0142      	lsls	r2, r0, #5
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	1b00      	subs	r0, r0, r4
 800314c:	eb61 0105 	sbc.w	r1, r1, r5
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	018b      	lsls	r3, r1, #6
 800315a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800315e:	0182      	lsls	r2, r0, #6
 8003160:	1a12      	subs	r2, r2, r0
 8003162:	eb63 0301 	sbc.w	r3, r3, r1
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	00d9      	lsls	r1, r3, #3
 8003170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003174:	00d0      	lsls	r0, r2, #3
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	1912      	adds	r2, r2, r4
 800317c:	eb45 0303 	adc.w	r3, r5, r3
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	0299      	lsls	r1, r3, #10
 800318a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800318e:	0290      	lsls	r0, r2, #10
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f7fd fcf6 	bl	8000b90 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08005388 	.word	0x08005388

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800322c:	f7ff ffdc 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	08005388 	.word	0x08005388

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e041      	b.n	80032e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe fe96 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fc98 	bl	8003bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e041      	b.n	8003384 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f839 	bl	800338c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f000 fc49 	bl	8003bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 feac 	bl	8004110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_TIM_PWM_Stop+0xc4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d117      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x52>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	f240 4344 	movw	r3, #1092	; 0x444
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x52>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_TIM_PWM_Stop+0x82>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	f240 4344 	movw	r3, #1092	; 0x444
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d107      	bne.n	8003422 <HAL_TIM_PWM_Stop+0x82>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Stop+0x92>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003430:	e013      	b.n	800345a <HAL_TIM_PWM_Stop+0xba>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Stop+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	e00b      	b.n	800345a <HAL_TIM_PWM_Stop+0xba>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Stop+0xb2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003450:	e003      	b.n	800345a <HAL_TIM_PWM_Stop+0xba>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40010000 	.word	0x40010000

08003468 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start_IT+0x28>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start_IT+0x42>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0b3      	b.n	8003646 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Start_IT+0x86>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	e013      	b.n	8003516 <HAL_TIM_PWM_Start_IT+0xae>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start_IT+0x96>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	e00b      	b.n	8003516 <HAL_TIM_PWM_Start_IT+0xae>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start_IT+0xa6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	e003      	b.n	8003516 <HAL_TIM_PWM_Start_IT+0xae>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d841      	bhi.n	80035a0 <HAL_TIM_PWM_Start_IT+0x138>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <HAL_TIM_PWM_Start_IT+0xbc>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003559 	.word	0x08003559
 8003528:	080035a1 	.word	0x080035a1
 800352c:	080035a1 	.word	0x080035a1
 8003530:	080035a1 	.word	0x080035a1
 8003534:	0800356b 	.word	0x0800356b
 8003538:	080035a1 	.word	0x080035a1
 800353c:	080035a1 	.word	0x080035a1
 8003540:	080035a1 	.word	0x080035a1
 8003544:	0800357d 	.word	0x0800357d
 8003548:	080035a1 	.word	0x080035a1
 800354c:	080035a1 	.word	0x080035a1
 8003550:	080035a1 	.word	0x080035a1
 8003554:	0800358f 	.word	0x0800358f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0202 	orr.w	r2, r2, #2
 8003566:	60da      	str	r2, [r3, #12]
      break;
 8003568:	e01d      	b.n	80035a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	60da      	str	r2, [r3, #12]
      break;
 800357a:	e014      	b.n	80035a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	60da      	str	r2, [r3, #12]
      break;
 800358c:	e00b      	b.n	80035a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	60da      	str	r2, [r3, #12]
      break;
 800359e:	e002      	b.n	80035a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d14b      	bne.n	8003644 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fdab 	bl	8004110 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a24      	ldr	r2, [pc, #144]	; (8003650 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d018      	beq.n	8003610 <HAL_TIM_PWM_Start_IT+0x1a8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d013      	beq.n	8003610 <HAL_TIM_PWM_Start_IT+0x1a8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_TIM_PWM_Start_IT+0x1a8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_TIM_PWM_Start_IT+0x1a8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d111      	bne.n	8003634 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b06      	cmp	r3, #6
 8003620:	d010      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	e007      	b.n	8003644 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40014000 	.word	0x40014000

08003664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa77 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa69 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd fde1 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0204 	mvn.w	r2, #4
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa4d 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa3f 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd fdb7 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa23 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa15 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd fd8d 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b10      	cmp	r3, #16
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9f9 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9eb 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fd63 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fc72 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd6e 	bl	80042f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9b7 	bl	8003bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b20      	cmp	r3, #32
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0220 	mvn.w	r2, #32
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fd38 	bl	80042dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800388e:	2302      	movs	r3, #2
 8003890:	e0ae      	b.n	80039f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	f200 809f 	bhi.w	80039e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080039e1 	.word	0x080039e1
 80038b0:	080039e1 	.word	0x080039e1
 80038b4:	080039e1 	.word	0x080039e1
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	080039e1 	.word	0x080039e1
 80038c0:	080039e1 	.word	0x080039e1
 80038c4:	080039e1 	.word	0x080039e1
 80038c8:	0800395f 	.word	0x0800395f
 80038cc:	080039e1 	.word	0x080039e1
 80038d0:	080039e1 	.word	0x080039e1
 80038d4:	080039e1 	.word	0x080039e1
 80038d8:	0800399f 	.word	0x0800399f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9ee 	bl	8003cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	619a      	str	r2, [r3, #24]
      break;
 800391a:	e064      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa34 	bl	8003d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	619a      	str	r2, [r3, #24]
      break;
 800395c:	e043      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fa7f 	bl	8003e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0208 	orr.w	r2, r2, #8
 8003978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69d9      	ldr	r1, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	61da      	str	r2, [r3, #28]
      break;
 800399c:	e023      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fac9 	bl	8003f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
      break;
 80039de:	e002      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0b4      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x186>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4c:	d03e      	beq.n	8003acc <HAL_TIM_ConfigClockSource+0xd4>
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	f200 8087 	bhi.w	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	f000 8086 	beq.w	8003b6a <HAL_TIM_ConfigClockSource+0x172>
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	d87f      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b70      	cmp	r3, #112	; 0x70
 8003a66:	d01a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xa6>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d87b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b60      	cmp	r3, #96	; 0x60
 8003a6e:	d050      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x11a>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d877      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b50      	cmp	r3, #80	; 0x50
 8003a76:	d03c      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a78:	2b50      	cmp	r3, #80	; 0x50
 8003a7a:	d873      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d058      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x13a>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d86f      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b30      	cmp	r3, #48	; 0x30
 8003a86:	d064      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a88:	2b30      	cmp	r3, #48	; 0x30
 8003a8a:	d86b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d060      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d867      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d05a      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	e062      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f000 fb0f 	bl	80040d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	609a      	str	r2, [r3, #8]
      break;
 8003aca:	e04f      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f000 faf8 	bl	80040d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aee:	609a      	str	r2, [r3, #8]
      break;
 8003af0:	e03c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fa6c 	bl	8003fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2150      	movs	r1, #80	; 0x50
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fac5 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b10:	e02c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 fa8b 	bl	800403a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2160      	movs	r1, #96	; 0x60
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fab5 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b30:	e01c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 fa4c 	bl	8003fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 faa5 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b50:	e00c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f000 fa9c 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b62:	e003      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e000      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a34      	ldr	r2, [pc, #208]	; (8003ca8 <TIM_Base_SetConfig+0xe4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be2:	d00b      	beq.n	8003bfc <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a31      	ldr	r2, [pc, #196]	; (8003cac <TIM_Base_SetConfig+0xe8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <TIM_Base_SetConfig+0xec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0x38>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <TIM_Base_SetConfig+0xf0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <TIM_Base_SetConfig+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01b      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d017      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a22      	ldr	r2, [pc, #136]	; (8003cac <TIM_Base_SetConfig+0xe8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <TIM_Base_SetConfig+0xec>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00f      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <TIM_Base_SetConfig+0xf0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <TIM_Base_SetConfig+0xf4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <TIM_Base_SetConfig+0xf8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <TIM_Base_SetConfig+0xfc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <TIM_Base_SetConfig+0xe4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800

08003cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <TIM_OC1_SetConfig+0xc8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10c      	bne.n	8003d3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0308 	bic.w	r3, r3, #8
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <TIM_OC1_SetConfig+0xc8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d111      	bne.n	8003d66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40010000 	.word	0x40010000

08003d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0320 	bic.w	r3, r3, #32
 8003dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <TIM_OC2_SetConfig+0xd4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10d      	bne.n	8003e0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <TIM_OC2_SetConfig+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d113      	bne.n	8003e3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000

08003e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <TIM_OC3_SetConfig+0xd0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10d      	bne.n	8003ee2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <TIM_OC3_SetConfig+0xd0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d113      	bne.n	8003f12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000

08003f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <TIM_OC4_SetConfig+0x9c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d109      	bne.n	8003fb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000

08003fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 030a 	bic.w	r3, r3, #10
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0210 	bic.w	r2, r3, #16
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f043 0307 	orr.w	r3, r3, #7
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e050      	b.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d013      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10c      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00
 8004234:	40014000 	.word	0x40014000

08004238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004250:	2302      	movs	r3, #2
 8004252:	e03d      	b.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e03f      	b.n	8004396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd ff88 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f829 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800437c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b09f      	sub	sp, #124	; 0x7c
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	ea40 0301 	orr.w	r3, r0, r1
 80043c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e4:	f021 010c 	bic.w	r1, r1, #12
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	ea40 0301 	orr.w	r3, r0, r1
 8004408:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bc5      	ldr	r3, [pc, #788]	; (8004724 <UART_SetConfig+0x384>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d004      	beq.n	800441e <UART_SetConfig+0x7e>
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4bc3      	ldr	r3, [pc, #780]	; (8004728 <UART_SetConfig+0x388>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d103      	bne.n	8004426 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800441e:	f7fe ff03 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8004422:	6778      	str	r0, [r7, #116]	; 0x74
 8004424:	e002      	b.n	800442c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004426:	f7fe feeb 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 800442a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	f040 80b6 	bne.w	80045a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	461c      	mov	r4, r3
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	1891      	adds	r1, r2, r2
 8004446:	6439      	str	r1, [r7, #64]	; 0x40
 8004448:	415b      	adcs	r3, r3
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
 800444c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004464:	00d0      	lsls	r0, r2, #3
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	1911      	adds	r1, r2, r4
 800446c:	6639      	str	r1, [r7, #96]	; 0x60
 800446e:	416b      	adcs	r3, r5
 8004470:	667b      	str	r3, [r7, #100]	; 0x64
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	1891      	adds	r1, r2, r2
 800447e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004480:	415b      	adcs	r3, r3
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004488:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800448c:	f7fc fb80 	bl	8000b90 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4ba5      	ldr	r3, [pc, #660]	; (800472c <UART_SetConfig+0x38c>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011e      	lsls	r6, r3, #4
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	461c      	mov	r4, r3
 80044a2:	f04f 0500 	mov.w	r5, #0
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6339      	str	r1, [r7, #48]	; 0x30
 80044ae:	415b      	adcs	r3, r3
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
 80044b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044b6:	1912      	adds	r2, r2, r4
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	00d9      	lsls	r1, r3, #3
 80044c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ca:	00d0      	lsls	r0, r2, #3
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	1911      	adds	r1, r2, r4
 80044d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d4:	416b      	adcs	r3, r5
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80044e6:	415b      	adcs	r3, r3
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044f2:	f7fc fb4d 	bl	8000b90 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4b8c      	ldr	r3, [pc, #560]	; (800472c <UART_SetConfig+0x38c>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a87      	ldr	r2, [pc, #540]	; (800472c <UART_SetConfig+0x38c>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800451c:	441e      	add	r6, r3
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	4618      	mov	r0, r3
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1894      	adds	r4, r2, r2
 800452c:	623c      	str	r4, [r7, #32]
 800452e:	415b      	adcs	r3, r3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	1812      	adds	r2, r2, r0
 8004538:	eb41 0303 	adc.w	r3, r1, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	00dd      	lsls	r5, r3, #3
 8004546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454a:	00d4      	lsls	r4, r2, #3
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1814      	adds	r4, r2, r0
 8004552:	653c      	str	r4, [r7, #80]	; 0x50
 8004554:	414b      	adcs	r3, r1
 8004556:	657b      	str	r3, [r7, #84]	; 0x54
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	1891      	adds	r1, r2, r2
 8004564:	61b9      	str	r1, [r7, #24]
 8004566:	415b      	adcs	r3, r3
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004572:	f7fc fb0d 	bl	8000b90 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <UART_SetConfig+0x38c>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	; 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	; 0x32
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <UART_SetConfig+0x38c>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4432      	add	r2, r6
 80045a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a2:	e0b9      	b.n	8004718 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a6:	461c      	mov	r4, r3
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6139      	str	r1, [r7, #16]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045bc:	1912      	adds	r2, r2, r4
 80045be:	eb45 0303 	adc.w	r3, r5, r3
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	00d9      	lsls	r1, r3, #3
 80045cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d0:	00d0      	lsls	r0, r2, #3
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	eb12 0804 	adds.w	r8, r2, r4
 80045da:	eb43 0905 	adc.w	r9, r3, r5
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	008b      	lsls	r3, r1, #2
 80045f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045f6:	0082      	lsls	r2, r0, #2
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fc fac8 	bl	8000b90 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <UART_SetConfig+0x38c>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011e      	lsls	r6, r3, #4
 800460e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004610:	4618      	mov	r0, r3
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	1894      	adds	r4, r2, r2
 800461c:	60bc      	str	r4, [r7, #8]
 800461e:	415b      	adcs	r3, r3
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004626:	1812      	adds	r2, r2, r0
 8004628:	eb41 0303 	adc.w	r3, r1, r3
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	f04f 0500 	mov.w	r5, #0
 8004634:	00dd      	lsls	r5, r3, #3
 8004636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463a:	00d4      	lsls	r4, r2, #3
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1814      	adds	r4, r2, r0
 8004642:	64bc      	str	r4, [r7, #72]	; 0x48
 8004644:	414b      	adcs	r3, r1
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004660:	0082      	lsls	r2, r0, #2
 8004662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004666:	f7fc fa93 	bl	8000b90 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <UART_SetConfig+0x38c>)
 8004670:	fba3 1302 	umull	r1, r3, r3, r2
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	2164      	movs	r1, #100	; 0x64
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	3332      	adds	r3, #50	; 0x32
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <UART_SetConfig+0x38c>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468e:	441e      	add	r6, r3
 8004690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004692:	4618      	mov	r0, r3
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	1894      	adds	r4, r2, r2
 800469e:	603c      	str	r4, [r7, #0]
 80046a0:	415b      	adcs	r3, r3
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	1812      	adds	r2, r2, r0
 80046aa:	eb41 0303 	adc.w	r3, r1, r3
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	f04f 0500 	mov.w	r5, #0
 80046b6:	00dd      	lsls	r5, r3, #3
 80046b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046bc:	00d4      	lsls	r4, r2, #3
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	eb12 0a00 	adds.w	sl, r2, r0
 80046c6:	eb43 0b01 	adc.w	fp, r3, r1
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046e2:	0082      	lsls	r2, r0, #2
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fc fa52 	bl	8000b90 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <UART_SetConfig+0x38c>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <UART_SetConfig+0x38c>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4432      	add	r2, r6
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	377c      	adds	r7, #124	; 0x7c
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	40011000 	.word	0x40011000
 8004728:	40011400 	.word	0x40011400
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <__errno>:
 8004730:	4b01      	ldr	r3, [pc, #4]	; (8004738 <__errno+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	2000000c 	.word	0x2000000c

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4d0d      	ldr	r5, [pc, #52]	; (8004774 <__libc_init_array+0x38>)
 8004740:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	2600      	movs	r6, #0
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	4d0b      	ldr	r5, [pc, #44]	; (800477c <__libc_init_array+0x40>)
 800474e:	4c0c      	ldr	r4, [pc, #48]	; (8004780 <__libc_init_array+0x44>)
 8004750:	f000 fe06 	bl	8005360 <_init>
 8004754:	1b64      	subs	r4, r4, r5
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	2600      	movs	r6, #0
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f855 3b04 	ldr.w	r3, [r5], #4
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f855 3b04 	ldr.w	r3, [r5], #4
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	0800539c 	.word	0x0800539c
 8004778:	0800539c 	.word	0x0800539c
 800477c:	0800539c 	.word	0x0800539c
 8004780:	080053a0 	.word	0x080053a0

08004784 <memset>:
 8004784:	4402      	add	r2, r0
 8004786:	4603      	mov	r3, r0
 8004788:	4293      	cmp	r3, r2
 800478a:	d100      	bne.n	800478e <memset+0xa>
 800478c:	4770      	bx	lr
 800478e:	f803 1b01 	strb.w	r1, [r3], #1
 8004792:	e7f9      	b.n	8004788 <memset+0x4>

08004794 <acos>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	ed2d 8b02 	vpush	{d8}
 800479a:	ec55 4b10 	vmov	r4, r5, d0
 800479e:	f000 f8a3 	bl	80048e8 <__ieee754_acos>
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <acos+0x68>)
 80047a4:	eeb0 8a40 	vmov.f32	s16, s0
 80047a8:	eef0 8a60 	vmov.f32	s17, s1
 80047ac:	f993 3000 	ldrsb.w	r3, [r3]
 80047b0:	3301      	adds	r3, #1
 80047b2:	d01c      	beq.n	80047ee <acos+0x5a>
 80047b4:	4622      	mov	r2, r4
 80047b6:	462b      	mov	r3, r5
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7fc f962 	bl	8000a84 <__aeabi_dcmpun>
 80047c0:	b9a8      	cbnz	r0, 80047ee <acos+0x5a>
 80047c2:	ec45 4b10 	vmov	d0, r4, r5
 80047c6:	f000 fdb7 	bl	8005338 <fabs>
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <acos+0x6c>)
 80047cc:	ec51 0b10 	vmov	r0, r1, d0
 80047d0:	2200      	movs	r2, #0
 80047d2:	f7fc f94d 	bl	8000a70 <__aeabi_dcmpgt>
 80047d6:	b150      	cbz	r0, 80047ee <acos+0x5a>
 80047d8:	f7ff ffaa 	bl	8004730 <__errno>
 80047dc:	ecbd 8b02 	vpop	{d8}
 80047e0:	2321      	movs	r3, #33	; 0x21
 80047e2:	6003      	str	r3, [r0, #0]
 80047e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e8:	4806      	ldr	r0, [pc, #24]	; (8004804 <acos+0x70>)
 80047ea:	f000 bdb1 	b.w	8005350 <nan>
 80047ee:	eeb0 0a48 	vmov.f32	s0, s16
 80047f2:	eef0 0a68 	vmov.f32	s1, s17
 80047f6:	ecbd 8b02 	vpop	{d8}
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000070 	.word	0x20000070
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	08005390 	.word	0x08005390

08004808 <asin>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	ed2d 8b02 	vpush	{d8}
 800480e:	ec55 4b10 	vmov	r4, r5, d0
 8004812:	f000 fac9 	bl	8004da8 <__ieee754_asin>
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <asin+0x68>)
 8004818:	eeb0 8a40 	vmov.f32	s16, s0
 800481c:	eef0 8a60 	vmov.f32	s17, s1
 8004820:	f993 3000 	ldrsb.w	r3, [r3]
 8004824:	3301      	adds	r3, #1
 8004826:	d01c      	beq.n	8004862 <asin+0x5a>
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	4620      	mov	r0, r4
 800482e:	4629      	mov	r1, r5
 8004830:	f7fc f928 	bl	8000a84 <__aeabi_dcmpun>
 8004834:	b9a8      	cbnz	r0, 8004862 <asin+0x5a>
 8004836:	ec45 4b10 	vmov	d0, r4, r5
 800483a:	f000 fd7d 	bl	8005338 <fabs>
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <asin+0x6c>)
 8004840:	ec51 0b10 	vmov	r0, r1, d0
 8004844:	2200      	movs	r2, #0
 8004846:	f7fc f913 	bl	8000a70 <__aeabi_dcmpgt>
 800484a:	b150      	cbz	r0, 8004862 <asin+0x5a>
 800484c:	f7ff ff70 	bl	8004730 <__errno>
 8004850:	ecbd 8b02 	vpop	{d8}
 8004854:	2321      	movs	r3, #33	; 0x21
 8004856:	6003      	str	r3, [r0, #0]
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	4806      	ldr	r0, [pc, #24]	; (8004878 <asin+0x70>)
 800485e:	f000 bd77 	b.w	8005350 <nan>
 8004862:	eeb0 0a48 	vmov.f32	s0, s16
 8004866:	eef0 0a68 	vmov.f32	s1, s17
 800486a:	ecbd 8b02 	vpop	{d8}
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000070 	.word	0x20000070
 8004874:	3ff00000 	.word	0x3ff00000
 8004878:	08005390 	.word	0x08005390

0800487c <sqrt>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	ed2d 8b02 	vpush	{d8}
 8004882:	ec55 4b10 	vmov	r4, r5, d0
 8004886:	f000 fca3 	bl	80051d0 <__ieee754_sqrt>
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <sqrt+0x64>)
 800488c:	eeb0 8a40 	vmov.f32	s16, s0
 8004890:	eef0 8a60 	vmov.f32	s17, s1
 8004894:	f993 3000 	ldrsb.w	r3, [r3]
 8004898:	3301      	adds	r3, #1
 800489a:	d019      	beq.n	80048d0 <sqrt+0x54>
 800489c:	4622      	mov	r2, r4
 800489e:	462b      	mov	r3, r5
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fc f8ee 	bl	8000a84 <__aeabi_dcmpun>
 80048a8:	b990      	cbnz	r0, 80048d0 <sqrt+0x54>
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fc f8bf 	bl	8000a34 <__aeabi_dcmplt>
 80048b6:	b158      	cbz	r0, 80048d0 <sqrt+0x54>
 80048b8:	f7ff ff3a 	bl	8004730 <__errno>
 80048bc:	2321      	movs	r3, #33	; 0x21
 80048be:	6003      	str	r3, [r0, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2300      	movs	r3, #0
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	f7fb ff6c 	bl	80007a4 <__aeabi_ddiv>
 80048cc:	ec41 0b18 	vmov	d8, r0, r1
 80048d0:	eeb0 0a48 	vmov.f32	s0, s16
 80048d4:	eef0 0a68 	vmov.f32	s1, s17
 80048d8:	ecbd 8b02 	vpop	{d8}
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000070 	.word	0x20000070
 80048e4:	00000000 	.word	0x00000000

080048e8 <__ieee754_acos>:
 80048e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	ec55 4b10 	vmov	r4, r5, d0
 80048f0:	49b7      	ldr	r1, [pc, #732]	; (8004bd0 <__ieee754_acos+0x2e8>)
 80048f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80048f6:	428b      	cmp	r3, r1
 80048f8:	dd1b      	ble.n	8004932 <__ieee754_acos+0x4a>
 80048fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80048fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004902:	4323      	orrs	r3, r4
 8004904:	d106      	bne.n	8004914 <__ieee754_acos+0x2c>
 8004906:	2d00      	cmp	r5, #0
 8004908:	f300 8211 	bgt.w	8004d2e <__ieee754_acos+0x446>
 800490c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8004b68 <__ieee754_acos+0x280>
 8004910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	ee10 2a10 	vmov	r2, s0
 8004918:	462b      	mov	r3, r5
 800491a:	ee10 0a10 	vmov	r0, s0
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb fc5e 	bl	80001e0 <__aeabi_dsub>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	f7fb ff3c 	bl	80007a4 <__aeabi_ddiv>
 800492c:	ec41 0b10 	vmov	d0, r0, r1
 8004930:	e7ee      	b.n	8004910 <__ieee754_acos+0x28>
 8004932:	49a8      	ldr	r1, [pc, #672]	; (8004bd4 <__ieee754_acos+0x2ec>)
 8004934:	428b      	cmp	r3, r1
 8004936:	f300 8087 	bgt.w	8004a48 <__ieee754_acos+0x160>
 800493a:	4aa7      	ldr	r2, [pc, #668]	; (8004bd8 <__ieee754_acos+0x2f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	f340 81f9 	ble.w	8004d34 <__ieee754_acos+0x44c>
 8004942:	ee10 2a10 	vmov	r2, s0
 8004946:	ee10 0a10 	vmov	r0, s0
 800494a:	462b      	mov	r3, r5
 800494c:	4629      	mov	r1, r5
 800494e:	f7fb fdff 	bl	8000550 <__aeabi_dmul>
 8004952:	a387      	add	r3, pc, #540	; (adr r3, 8004b70 <__ieee754_acos+0x288>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	4606      	mov	r6, r0
 800495a:	460f      	mov	r7, r1
 800495c:	f7fb fdf8 	bl	8000550 <__aeabi_dmul>
 8004960:	a385      	add	r3, pc, #532	; (adr r3, 8004b78 <__ieee754_acos+0x290>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f7fb fc3d 	bl	80001e4 <__adddf3>
 800496a:	4632      	mov	r2, r6
 800496c:	463b      	mov	r3, r7
 800496e:	f7fb fdef 	bl	8000550 <__aeabi_dmul>
 8004972:	a383      	add	r3, pc, #524	; (adr r3, 8004b80 <__ieee754_acos+0x298>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f7fb fc32 	bl	80001e0 <__aeabi_dsub>
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	f7fb fde6 	bl	8000550 <__aeabi_dmul>
 8004984:	a380      	add	r3, pc, #512	; (adr r3, 8004b88 <__ieee754_acos+0x2a0>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f7fb fc2b 	bl	80001e4 <__adddf3>
 800498e:	4632      	mov	r2, r6
 8004990:	463b      	mov	r3, r7
 8004992:	f7fb fddd 	bl	8000550 <__aeabi_dmul>
 8004996:	a37e      	add	r3, pc, #504	; (adr r3, 8004b90 <__ieee754_acos+0x2a8>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fc20 	bl	80001e0 <__aeabi_dsub>
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	f7fb fdd4 	bl	8000550 <__aeabi_dmul>
 80049a8:	a37b      	add	r3, pc, #492	; (adr r3, 8004b98 <__ieee754_acos+0x2b0>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fc19 	bl	80001e4 <__adddf3>
 80049b2:	4632      	mov	r2, r6
 80049b4:	463b      	mov	r3, r7
 80049b6:	f7fb fdcb 	bl	8000550 <__aeabi_dmul>
 80049ba:	a379      	add	r3, pc, #484	; (adr r3, 8004ba0 <__ieee754_acos+0x2b8>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4680      	mov	r8, r0
 80049c2:	4689      	mov	r9, r1
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fb fdc2 	bl	8000550 <__aeabi_dmul>
 80049cc:	a376      	add	r3, pc, #472	; (adr r3, 8004ba8 <__ieee754_acos+0x2c0>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fc05 	bl	80001e0 <__aeabi_dsub>
 80049d6:	4632      	mov	r2, r6
 80049d8:	463b      	mov	r3, r7
 80049da:	f7fb fdb9 	bl	8000550 <__aeabi_dmul>
 80049de:	a374      	add	r3, pc, #464	; (adr r3, 8004bb0 <__ieee754_acos+0x2c8>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fbfe 	bl	80001e4 <__adddf3>
 80049e8:	4632      	mov	r2, r6
 80049ea:	463b      	mov	r3, r7
 80049ec:	f7fb fdb0 	bl	8000550 <__aeabi_dmul>
 80049f0:	a371      	add	r3, pc, #452	; (adr r3, 8004bb8 <__ieee754_acos+0x2d0>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fbf3 	bl	80001e0 <__aeabi_dsub>
 80049fa:	4632      	mov	r2, r6
 80049fc:	463b      	mov	r3, r7
 80049fe:	f7fb fda7 	bl	8000550 <__aeabi_dmul>
 8004a02:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <__ieee754_acos+0x2f4>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	f7fb fbed 	bl	80001e4 <__adddf3>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4649      	mov	r1, r9
 8004a12:	f7fb fec7 	bl	80007a4 <__aeabi_ddiv>
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	f7fb fd99 	bl	8000550 <__aeabi_dmul>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	a167      	add	r1, pc, #412	; (adr r1, 8004bc0 <__ieee754_acos+0x2d8>)
 8004a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a28:	f7fb fbda 	bl	80001e0 <__aeabi_dsub>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4620      	mov	r0, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	f7fb fbd4 	bl	80001e0 <__aeabi_dsub>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	a162      	add	r1, pc, #392	; (adr r1, 8004bc8 <__ieee754_acos+0x2e0>)
 8004a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a42:	f7fb fbcd 	bl	80001e0 <__aeabi_dsub>
 8004a46:	e771      	b.n	800492c <__ieee754_acos+0x44>
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	f280 80cb 	bge.w	8004be4 <__ieee754_acos+0x2fc>
 8004a4e:	ee10 0a10 	vmov	r0, s0
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <__ieee754_acos+0x2f4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fb fbc4 	bl	80001e4 <__adddf3>
 8004a5c:	4b60      	ldr	r3, [pc, #384]	; (8004be0 <__ieee754_acos+0x2f8>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f7fb fd76 	bl	8000550 <__aeabi_dmul>
 8004a64:	a342      	add	r3, pc, #264	; (adr r3, 8004b70 <__ieee754_acos+0x288>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	f7fb fd6f 	bl	8000550 <__aeabi_dmul>
 8004a72:	a341      	add	r3, pc, #260	; (adr r3, 8004b78 <__ieee754_acos+0x290>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fbb4 	bl	80001e4 <__adddf3>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	f7fb fd66 	bl	8000550 <__aeabi_dmul>
 8004a84:	a33e      	add	r3, pc, #248	; (adr r3, 8004b80 <__ieee754_acos+0x298>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb fba9 	bl	80001e0 <__aeabi_dsub>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f7fb fd5d 	bl	8000550 <__aeabi_dmul>
 8004a96:	a33c      	add	r3, pc, #240	; (adr r3, 8004b88 <__ieee754_acos+0x2a0>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f7fb fba2 	bl	80001e4 <__adddf3>
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	f7fb fd54 	bl	8000550 <__aeabi_dmul>
 8004aa8:	a339      	add	r3, pc, #228	; (adr r3, 8004b90 <__ieee754_acos+0x2a8>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fb97 	bl	80001e0 <__aeabi_dsub>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f7fb fd4b 	bl	8000550 <__aeabi_dmul>
 8004aba:	a337      	add	r3, pc, #220	; (adr r3, 8004b98 <__ieee754_acos+0x2b0>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fb90 	bl	80001e4 <__adddf3>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	f7fb fd42 	bl	8000550 <__aeabi_dmul>
 8004acc:	ec45 4b10 	vmov	d0, r4, r5
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	4689      	mov	r9, r1
 8004ad4:	f000 fb7c 	bl	80051d0 <__ieee754_sqrt>
 8004ad8:	a331      	add	r3, pc, #196	; (adr r3, 8004ba0 <__ieee754_acos+0x2b8>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	ec57 6b10 	vmov	r6, r7, d0
 8004ae6:	f7fb fd33 	bl	8000550 <__aeabi_dmul>
 8004aea:	a32f      	add	r3, pc, #188	; (adr r3, 8004ba8 <__ieee754_acos+0x2c0>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fb fb76 	bl	80001e0 <__aeabi_dsub>
 8004af4:	4622      	mov	r2, r4
 8004af6:	462b      	mov	r3, r5
 8004af8:	f7fb fd2a 	bl	8000550 <__aeabi_dmul>
 8004afc:	a32c      	add	r3, pc, #176	; (adr r3, 8004bb0 <__ieee754_acos+0x2c8>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fb6f 	bl	80001e4 <__adddf3>
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	f7fb fd21 	bl	8000550 <__aeabi_dmul>
 8004b0e:	a32a      	add	r3, pc, #168	; (adr r3, 8004bb8 <__ieee754_acos+0x2d0>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fb64 	bl	80001e0 <__aeabi_dsub>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	f7fb fd18 	bl	8000550 <__aeabi_dmul>
 8004b20:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <__ieee754_acos+0x2f4>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	f7fb fb5e 	bl	80001e4 <__adddf3>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb fe38 	bl	80007a4 <__aeabi_ddiv>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb fd0a 	bl	8000550 <__aeabi_dmul>
 8004b3c:	a320      	add	r3, pc, #128	; (adr r3, 8004bc0 <__ieee754_acos+0x2d8>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f7fb fb4d 	bl	80001e0 <__aeabi_dsub>
 8004b46:	4632      	mov	r2, r6
 8004b48:	463b      	mov	r3, r7
 8004b4a:	f7fb fb4b 	bl	80001e4 <__adddf3>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	f7fb fb47 	bl	80001e4 <__adddf3>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	a103      	add	r1, pc, #12	; (adr r1, 8004b68 <__ieee754_acos+0x280>)
 8004b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b60:	e76f      	b.n	8004a42 <__ieee754_acos+0x15a>
 8004b62:	bf00      	nop
 8004b64:	f3af 8000 	nop.w
 8004b68:	54442d18 	.word	0x54442d18
 8004b6c:	400921fb 	.word	0x400921fb
 8004b70:	0dfdf709 	.word	0x0dfdf709
 8004b74:	3f023de1 	.word	0x3f023de1
 8004b78:	7501b288 	.word	0x7501b288
 8004b7c:	3f49efe0 	.word	0x3f49efe0
 8004b80:	b5688f3b 	.word	0xb5688f3b
 8004b84:	3fa48228 	.word	0x3fa48228
 8004b88:	0e884455 	.word	0x0e884455
 8004b8c:	3fc9c155 	.word	0x3fc9c155
 8004b90:	03eb6f7d 	.word	0x03eb6f7d
 8004b94:	3fd4d612 	.word	0x3fd4d612
 8004b98:	55555555 	.word	0x55555555
 8004b9c:	3fc55555 	.word	0x3fc55555
 8004ba0:	b12e9282 	.word	0xb12e9282
 8004ba4:	3fb3b8c5 	.word	0x3fb3b8c5
 8004ba8:	1b8d0159 	.word	0x1b8d0159
 8004bac:	3fe6066c 	.word	0x3fe6066c
 8004bb0:	9c598ac8 	.word	0x9c598ac8
 8004bb4:	40002ae5 	.word	0x40002ae5
 8004bb8:	1c8a2d4b 	.word	0x1c8a2d4b
 8004bbc:	40033a27 	.word	0x40033a27
 8004bc0:	33145c07 	.word	0x33145c07
 8004bc4:	3c91a626 	.word	0x3c91a626
 8004bc8:	54442d18 	.word	0x54442d18
 8004bcc:	3ff921fb 	.word	0x3ff921fb
 8004bd0:	3fefffff 	.word	0x3fefffff
 8004bd4:	3fdfffff 	.word	0x3fdfffff
 8004bd8:	3c600000 	.word	0x3c600000
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	3fe00000 	.word	0x3fe00000
 8004be4:	ee10 2a10 	vmov	r2, s0
 8004be8:	462b      	mov	r3, r5
 8004bea:	496d      	ldr	r1, [pc, #436]	; (8004da0 <__ieee754_acos+0x4b8>)
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fb faf7 	bl	80001e0 <__aeabi_dsub>
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	; (8004da4 <__ieee754_acos+0x4bc>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f7fb fcab 	bl	8000550 <__aeabi_dmul>
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	ec45 4b10 	vmov	d0, r4, r5
 8004c02:	f000 fae5 	bl	80051d0 <__ieee754_sqrt>
 8004c06:	a34e      	add	r3, pc, #312	; (adr r3, 8004d40 <__ieee754_acos+0x458>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	ec59 8b10 	vmov	r8, r9, d0
 8004c14:	f7fb fc9c 	bl	8000550 <__aeabi_dmul>
 8004c18:	a34b      	add	r3, pc, #300	; (adr r3, 8004d48 <__ieee754_acos+0x460>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fae1 	bl	80001e4 <__adddf3>
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	f7fb fc93 	bl	8000550 <__aeabi_dmul>
 8004c2a:	a349      	add	r3, pc, #292	; (adr r3, 8004d50 <__ieee754_acos+0x468>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fad6 	bl	80001e0 <__aeabi_dsub>
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	f7fb fc8a 	bl	8000550 <__aeabi_dmul>
 8004c3c:	a346      	add	r3, pc, #280	; (adr r3, 8004d58 <__ieee754_acos+0x470>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb facf 	bl	80001e4 <__adddf3>
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f7fb fc81 	bl	8000550 <__aeabi_dmul>
 8004c4e:	a344      	add	r3, pc, #272	; (adr r3, 8004d60 <__ieee754_acos+0x478>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fac4 	bl	80001e0 <__aeabi_dsub>
 8004c58:	4622      	mov	r2, r4
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	f7fb fc78 	bl	8000550 <__aeabi_dmul>
 8004c60:	a341      	add	r3, pc, #260	; (adr r3, 8004d68 <__ieee754_acos+0x480>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fabd 	bl	80001e4 <__adddf3>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	f7fb fc6f 	bl	8000550 <__aeabi_dmul>
 8004c72:	a33f      	add	r3, pc, #252	; (adr r3, 8004d70 <__ieee754_acos+0x488>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	4682      	mov	sl, r0
 8004c7a:	468b      	mov	fp, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fc66 	bl	8000550 <__aeabi_dmul>
 8004c84:	a33c      	add	r3, pc, #240	; (adr r3, 8004d78 <__ieee754_acos+0x490>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb faa9 	bl	80001e0 <__aeabi_dsub>
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	f7fb fc5d 	bl	8000550 <__aeabi_dmul>
 8004c96:	a33a      	add	r3, pc, #232	; (adr r3, 8004d80 <__ieee754_acos+0x498>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb faa2 	bl	80001e4 <__adddf3>
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	f7fb fc54 	bl	8000550 <__aeabi_dmul>
 8004ca8:	a337      	add	r3, pc, #220	; (adr r3, 8004d88 <__ieee754_acos+0x4a0>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fa97 	bl	80001e0 <__aeabi_dsub>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f7fb fc4b 	bl	8000550 <__aeabi_dmul>
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <__ieee754_acos+0x4b8>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f7fb fa91 	bl	80001e4 <__adddf3>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4650      	mov	r0, sl
 8004cc8:	4659      	mov	r1, fp
 8004cca:	f7fb fd6b 	bl	80007a4 <__aeabi_ddiv>
 8004cce:	4642      	mov	r2, r8
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	f7fb fc3d 	bl	8000550 <__aeabi_dmul>
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	4682      	mov	sl, r0
 8004cda:	468b      	mov	fp, r1
 8004cdc:	4632      	mov	r2, r6
 8004cde:	464b      	mov	r3, r9
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fc34 	bl	8000550 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4620      	mov	r0, r4
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f7fb fa76 	bl	80001e0 <__aeabi_dsub>
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb fa70 	bl	80001e4 <__adddf3>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f7fb fd4a 	bl	80007a4 <__aeabi_ddiv>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb fa64 	bl	80001e4 <__adddf3>
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	464b      	mov	r3, r9
 8004d20:	f7fb fa60 	bl	80001e4 <__adddf3>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	f7fb fa5c 	bl	80001e4 <__adddf3>
 8004d2c:	e5fe      	b.n	800492c <__ieee754_acos+0x44>
 8004d2e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8004d90 <__ieee754_acos+0x4a8>
 8004d32:	e5ed      	b.n	8004910 <__ieee754_acos+0x28>
 8004d34:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8004d98 <__ieee754_acos+0x4b0>
 8004d38:	e5ea      	b.n	8004910 <__ieee754_acos+0x28>
 8004d3a:	bf00      	nop
 8004d3c:	f3af 8000 	nop.w
 8004d40:	0dfdf709 	.word	0x0dfdf709
 8004d44:	3f023de1 	.word	0x3f023de1
 8004d48:	7501b288 	.word	0x7501b288
 8004d4c:	3f49efe0 	.word	0x3f49efe0
 8004d50:	b5688f3b 	.word	0xb5688f3b
 8004d54:	3fa48228 	.word	0x3fa48228
 8004d58:	0e884455 	.word	0x0e884455
 8004d5c:	3fc9c155 	.word	0x3fc9c155
 8004d60:	03eb6f7d 	.word	0x03eb6f7d
 8004d64:	3fd4d612 	.word	0x3fd4d612
 8004d68:	55555555 	.word	0x55555555
 8004d6c:	3fc55555 	.word	0x3fc55555
 8004d70:	b12e9282 	.word	0xb12e9282
 8004d74:	3fb3b8c5 	.word	0x3fb3b8c5
 8004d78:	1b8d0159 	.word	0x1b8d0159
 8004d7c:	3fe6066c 	.word	0x3fe6066c
 8004d80:	9c598ac8 	.word	0x9c598ac8
 8004d84:	40002ae5 	.word	0x40002ae5
 8004d88:	1c8a2d4b 	.word	0x1c8a2d4b
 8004d8c:	40033a27 	.word	0x40033a27
	...
 8004d98:	54442d18 	.word	0x54442d18
 8004d9c:	3ff921fb 	.word	0x3ff921fb
 8004da0:	3ff00000 	.word	0x3ff00000
 8004da4:	3fe00000 	.word	0x3fe00000

08004da8 <__ieee754_asin>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	ed2d 8b04 	vpush	{d8-d9}
 8004db0:	ec55 4b10 	vmov	r4, r5, d0
 8004db4:	4bcc      	ldr	r3, [pc, #816]	; (80050e8 <__ieee754_asin+0x340>)
 8004db6:	b083      	sub	sp, #12
 8004db8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004dbc:	4598      	cmp	r8, r3
 8004dbe:	9501      	str	r5, [sp, #4]
 8004dc0:	dd35      	ble.n	8004e2e <__ieee754_asin+0x86>
 8004dc2:	ee10 3a10 	vmov	r3, s0
 8004dc6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8004dca:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8004dce:	ea58 0303 	orrs.w	r3, r8, r3
 8004dd2:	d117      	bne.n	8004e04 <__ieee754_asin+0x5c>
 8004dd4:	a3aa      	add	r3, pc, #680	; (adr r3, 8005080 <__ieee754_asin+0x2d8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	ee10 0a10 	vmov	r0, s0
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb fbb6 	bl	8000550 <__aeabi_dmul>
 8004de4:	a3a8      	add	r3, pc, #672	; (adr r3, 8005088 <__ieee754_asin+0x2e0>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fbad 	bl	8000550 <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	f7fb f9f1 	bl	80001e4 <__adddf3>
 8004e02:	e00b      	b.n	8004e1c <__ieee754_asin+0x74>
 8004e04:	ee10 2a10 	vmov	r2, s0
 8004e08:	462b      	mov	r3, r5
 8004e0a:	ee10 0a10 	vmov	r0, s0
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f7fb f9e6 	bl	80001e0 <__aeabi_dsub>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	f7fb fcc4 	bl	80007a4 <__aeabi_ddiv>
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	460d      	mov	r5, r1
 8004e20:	ec45 4b10 	vmov	d0, r4, r5
 8004e24:	b003      	add	sp, #12
 8004e26:	ecbd 8b04 	vpop	{d8-d9}
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2e:	4baf      	ldr	r3, [pc, #700]	; (80050ec <__ieee754_asin+0x344>)
 8004e30:	4598      	cmp	r8, r3
 8004e32:	dc11      	bgt.n	8004e58 <__ieee754_asin+0xb0>
 8004e34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004e38:	f280 80ae 	bge.w	8004f98 <__ieee754_asin+0x1f0>
 8004e3c:	a394      	add	r3, pc, #592	; (adr r3, 8005090 <__ieee754_asin+0x2e8>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	ee10 0a10 	vmov	r0, s0
 8004e46:	4629      	mov	r1, r5
 8004e48:	f7fb f9cc 	bl	80001e4 <__adddf3>
 8004e4c:	4ba8      	ldr	r3, [pc, #672]	; (80050f0 <__ieee754_asin+0x348>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f7fb fe0e 	bl	8000a70 <__aeabi_dcmpgt>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e3      	bne.n	8004e20 <__ieee754_asin+0x78>
 8004e58:	ec45 4b10 	vmov	d0, r4, r5
 8004e5c:	f000 fa6c 	bl	8005338 <fabs>
 8004e60:	49a3      	ldr	r1, [pc, #652]	; (80050f0 <__ieee754_asin+0x348>)
 8004e62:	ec53 2b10 	vmov	r2, r3, d0
 8004e66:	2000      	movs	r0, #0
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_dsub>
 8004e6c:	4ba1      	ldr	r3, [pc, #644]	; (80050f4 <__ieee754_asin+0x34c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f7fb fb6e 	bl	8000550 <__aeabi_dmul>
 8004e74:	a388      	add	r3, pc, #544	; (adr r3, 8005098 <__ieee754_asin+0x2f0>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	460d      	mov	r5, r1
 8004e7e:	f7fb fb67 	bl	8000550 <__aeabi_dmul>
 8004e82:	a387      	add	r3, pc, #540	; (adr r3, 80050a0 <__ieee754_asin+0x2f8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb f9ac 	bl	80001e4 <__adddf3>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	462b      	mov	r3, r5
 8004e90:	f7fb fb5e 	bl	8000550 <__aeabi_dmul>
 8004e94:	a384      	add	r3, pc, #528	; (adr r3, 80050a8 <__ieee754_asin+0x300>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f7fb f9a1 	bl	80001e0 <__aeabi_dsub>
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	f7fb fb55 	bl	8000550 <__aeabi_dmul>
 8004ea6:	a382      	add	r3, pc, #520	; (adr r3, 80050b0 <__ieee754_asin+0x308>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb f99a 	bl	80001e4 <__adddf3>
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	f7fb fb4c 	bl	8000550 <__aeabi_dmul>
 8004eb8:	a37f      	add	r3, pc, #508	; (adr r3, 80050b8 <__ieee754_asin+0x310>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb f98f 	bl	80001e0 <__aeabi_dsub>
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	f7fb fb43 	bl	8000550 <__aeabi_dmul>
 8004eca:	a37d      	add	r3, pc, #500	; (adr r3, 80050c0 <__ieee754_asin+0x318>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f7fb f988 	bl	80001e4 <__adddf3>
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	f7fb fb3a 	bl	8000550 <__aeabi_dmul>
 8004edc:	a37a      	add	r3, pc, #488	; (adr r3, 80050c8 <__ieee754_asin+0x320>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	ec41 0b18 	vmov	d8, r0, r1
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fb31 	bl	8000550 <__aeabi_dmul>
 8004eee:	a378      	add	r3, pc, #480	; (adr r3, 80050d0 <__ieee754_asin+0x328>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb f974 	bl	80001e0 <__aeabi_dsub>
 8004ef8:	4622      	mov	r2, r4
 8004efa:	462b      	mov	r3, r5
 8004efc:	f7fb fb28 	bl	8000550 <__aeabi_dmul>
 8004f00:	a375      	add	r3, pc, #468	; (adr r3, 80050d8 <__ieee754_asin+0x330>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	f7fb f96d 	bl	80001e4 <__adddf3>
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	f7fb fb1f 	bl	8000550 <__aeabi_dmul>
 8004f12:	a373      	add	r3, pc, #460	; (adr r3, 80050e0 <__ieee754_asin+0x338>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb f962 	bl	80001e0 <__aeabi_dsub>
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	462b      	mov	r3, r5
 8004f20:	f7fb fb16 	bl	8000550 <__aeabi_dmul>
 8004f24:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <__ieee754_asin+0x348>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	f7fb f95c 	bl	80001e4 <__adddf3>
 8004f2c:	ec45 4b10 	vmov	d0, r4, r5
 8004f30:	4606      	mov	r6, r0
 8004f32:	460f      	mov	r7, r1
 8004f34:	f000 f94c 	bl	80051d0 <__ieee754_sqrt>
 8004f38:	4b6f      	ldr	r3, [pc, #444]	; (80050f8 <__ieee754_asin+0x350>)
 8004f3a:	4598      	cmp	r8, r3
 8004f3c:	ec5b ab10 	vmov	sl, fp, d0
 8004f40:	f340 80dc 	ble.w	80050fc <__ieee754_asin+0x354>
 8004f44:	4632      	mov	r2, r6
 8004f46:	463b      	mov	r3, r7
 8004f48:	ec51 0b18 	vmov	r0, r1, d8
 8004f4c:	f7fb fc2a 	bl	80007a4 <__aeabi_ddiv>
 8004f50:	4652      	mov	r2, sl
 8004f52:	465b      	mov	r3, fp
 8004f54:	f7fb fafc 	bl	8000550 <__aeabi_dmul>
 8004f58:	4652      	mov	r2, sl
 8004f5a:	465b      	mov	r3, fp
 8004f5c:	f7fb f942 	bl	80001e4 <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	f7fb f93e 	bl	80001e4 <__adddf3>
 8004f68:	a347      	add	r3, pc, #284	; (adr r3, 8005088 <__ieee754_asin+0x2e0>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb f937 	bl	80001e0 <__aeabi_dsub>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	a142      	add	r1, pc, #264	; (adr r1, 8005080 <__ieee754_asin+0x2d8>)
 8004f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f7c:	f7fb f930 	bl	80001e0 <__aeabi_dsub>
 8004f80:	9b01      	ldr	r3, [sp, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bfdc      	itt	le
 8004f86:	4602      	movle	r2, r0
 8004f88:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	bfdc      	itt	le
 8004f92:	4614      	movle	r4, r2
 8004f94:	461d      	movle	r5, r3
 8004f96:	e743      	b.n	8004e20 <__ieee754_asin+0x78>
 8004f98:	ee10 2a10 	vmov	r2, s0
 8004f9c:	ee10 0a10 	vmov	r0, s0
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb fad4 	bl	8000550 <__aeabi_dmul>
 8004fa8:	a33b      	add	r3, pc, #236	; (adr r3, 8005098 <__ieee754_asin+0x2f0>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	4606      	mov	r6, r0
 8004fb0:	460f      	mov	r7, r1
 8004fb2:	f7fb facd 	bl	8000550 <__aeabi_dmul>
 8004fb6:	a33a      	add	r3, pc, #232	; (adr r3, 80050a0 <__ieee754_asin+0x2f8>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb f912 	bl	80001e4 <__adddf3>
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	f7fb fac4 	bl	8000550 <__aeabi_dmul>
 8004fc8:	a337      	add	r3, pc, #220	; (adr r3, 80050a8 <__ieee754_asin+0x300>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb f907 	bl	80001e0 <__aeabi_dsub>
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	f7fb fabb 	bl	8000550 <__aeabi_dmul>
 8004fda:	a335      	add	r3, pc, #212	; (adr r3, 80050b0 <__ieee754_asin+0x308>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb f900 	bl	80001e4 <__adddf3>
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	f7fb fab2 	bl	8000550 <__aeabi_dmul>
 8004fec:	a332      	add	r3, pc, #200	; (adr r3, 80050b8 <__ieee754_asin+0x310>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f7fb f8f5 	bl	80001e0 <__aeabi_dsub>
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	f7fb faa9 	bl	8000550 <__aeabi_dmul>
 8004ffe:	a330      	add	r3, pc, #192	; (adr r3, 80050c0 <__ieee754_asin+0x318>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb f8ee 	bl	80001e4 <__adddf3>
 8005008:	4632      	mov	r2, r6
 800500a:	463b      	mov	r3, r7
 800500c:	f7fb faa0 	bl	8000550 <__aeabi_dmul>
 8005010:	a32d      	add	r3, pc, #180	; (adr r3, 80050c8 <__ieee754_asin+0x320>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb fa97 	bl	8000550 <__aeabi_dmul>
 8005022:	a32b      	add	r3, pc, #172	; (adr r3, 80050d0 <__ieee754_asin+0x328>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb f8da 	bl	80001e0 <__aeabi_dsub>
 800502c:	4632      	mov	r2, r6
 800502e:	463b      	mov	r3, r7
 8005030:	f7fb fa8e 	bl	8000550 <__aeabi_dmul>
 8005034:	a328      	add	r3, pc, #160	; (adr r3, 80050d8 <__ieee754_asin+0x330>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f8d3 	bl	80001e4 <__adddf3>
 800503e:	4632      	mov	r2, r6
 8005040:	463b      	mov	r3, r7
 8005042:	f7fb fa85 	bl	8000550 <__aeabi_dmul>
 8005046:	a326      	add	r3, pc, #152	; (adr r3, 80050e0 <__ieee754_asin+0x338>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb f8c8 	bl	80001e0 <__aeabi_dsub>
 8005050:	4632      	mov	r2, r6
 8005052:	463b      	mov	r3, r7
 8005054:	f7fb fa7c 	bl	8000550 <__aeabi_dmul>
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <__ieee754_asin+0x348>)
 800505a:	2200      	movs	r2, #0
 800505c:	f7fb f8c2 	bl	80001e4 <__adddf3>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb fb9c 	bl	80007a4 <__aeabi_ddiv>
 800506c:	4622      	mov	r2, r4
 800506e:	462b      	mov	r3, r5
 8005070:	f7fb fa6e 	bl	8000550 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	e6bf      	b.n	8004dfe <__ieee754_asin+0x56>
 800507e:	bf00      	nop
 8005080:	54442d18 	.word	0x54442d18
 8005084:	3ff921fb 	.word	0x3ff921fb
 8005088:	33145c07 	.word	0x33145c07
 800508c:	3c91a626 	.word	0x3c91a626
 8005090:	8800759c 	.word	0x8800759c
 8005094:	7e37e43c 	.word	0x7e37e43c
 8005098:	0dfdf709 	.word	0x0dfdf709
 800509c:	3f023de1 	.word	0x3f023de1
 80050a0:	7501b288 	.word	0x7501b288
 80050a4:	3f49efe0 	.word	0x3f49efe0
 80050a8:	b5688f3b 	.word	0xb5688f3b
 80050ac:	3fa48228 	.word	0x3fa48228
 80050b0:	0e884455 	.word	0x0e884455
 80050b4:	3fc9c155 	.word	0x3fc9c155
 80050b8:	03eb6f7d 	.word	0x03eb6f7d
 80050bc:	3fd4d612 	.word	0x3fd4d612
 80050c0:	55555555 	.word	0x55555555
 80050c4:	3fc55555 	.word	0x3fc55555
 80050c8:	b12e9282 	.word	0xb12e9282
 80050cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80050d0:	1b8d0159 	.word	0x1b8d0159
 80050d4:	3fe6066c 	.word	0x3fe6066c
 80050d8:	9c598ac8 	.word	0x9c598ac8
 80050dc:	40002ae5 	.word	0x40002ae5
 80050e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80050e4:	40033a27 	.word	0x40033a27
 80050e8:	3fefffff 	.word	0x3fefffff
 80050ec:	3fdfffff 	.word	0x3fdfffff
 80050f0:	3ff00000 	.word	0x3ff00000
 80050f4:	3fe00000 	.word	0x3fe00000
 80050f8:	3fef3332 	.word	0x3fef3332
 80050fc:	ee10 2a10 	vmov	r2, s0
 8005100:	ee10 0a10 	vmov	r0, s0
 8005104:	465b      	mov	r3, fp
 8005106:	4659      	mov	r1, fp
 8005108:	f7fb f86c 	bl	80001e4 <__adddf3>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	ec41 0b19 	vmov	d9, r0, r1
 8005114:	ec51 0b18 	vmov	r0, r1, d8
 8005118:	f7fb fb44 	bl	80007a4 <__aeabi_ddiv>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	ec51 0b19 	vmov	r0, r1, d9
 8005124:	f7fb fa14 	bl	8000550 <__aeabi_dmul>
 8005128:	f04f 0800 	mov.w	r8, #0
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	4642      	mov	r2, r8
 8005132:	465b      	mov	r3, fp
 8005134:	4640      	mov	r0, r8
 8005136:	4659      	mov	r1, fp
 8005138:	f7fb fa0a 	bl	8000550 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb f84c 	bl	80001e0 <__aeabi_dsub>
 8005148:	4642      	mov	r2, r8
 800514a:	4604      	mov	r4, r0
 800514c:	460d      	mov	r5, r1
 800514e:	465b      	mov	r3, fp
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f846 	bl	80001e4 <__adddf3>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb fb20 	bl	80007a4 <__aeabi_ddiv>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	f7fb f83c 	bl	80001e4 <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	a113      	add	r1, pc, #76	; (adr r1, 80051c0 <__ieee754_asin+0x418>)
 8005172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005176:	f7fb f833 	bl	80001e0 <__aeabi_dsub>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4630      	mov	r0, r6
 8005180:	4639      	mov	r1, r7
 8005182:	f7fb f82d 	bl	80001e0 <__aeabi_dsub>
 8005186:	4642      	mov	r2, r8
 8005188:	4604      	mov	r4, r0
 800518a:	460d      	mov	r5, r1
 800518c:	465b      	mov	r3, fp
 800518e:	4640      	mov	r0, r8
 8005190:	4659      	mov	r1, fp
 8005192:	f7fb f827 	bl	80001e4 <__adddf3>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	a10b      	add	r1, pc, #44	; (adr r1, 80051c8 <__ieee754_asin+0x420>)
 800519c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a0:	f7fb f81e 	bl	80001e0 <__aeabi_dsub>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb f818 	bl	80001e0 <__aeabi_dsub>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	a104      	add	r1, pc, #16	; (adr r1, 80051c8 <__ieee754_asin+0x420>)
 80051b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ba:	e6df      	b.n	8004f7c <__ieee754_asin+0x1d4>
 80051bc:	f3af 8000 	nop.w
 80051c0:	33145c07 	.word	0x33145c07
 80051c4:	3c91a626 	.word	0x3c91a626
 80051c8:	54442d18 	.word	0x54442d18
 80051cc:	3fe921fb 	.word	0x3fe921fb

080051d0 <__ieee754_sqrt>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	ec55 4b10 	vmov	r4, r5, d0
 80051d8:	4e56      	ldr	r6, [pc, #344]	; (8005334 <__ieee754_sqrt+0x164>)
 80051da:	43ae      	bics	r6, r5
 80051dc:	ee10 0a10 	vmov	r0, s0
 80051e0:	ee10 3a10 	vmov	r3, s0
 80051e4:	4629      	mov	r1, r5
 80051e6:	462a      	mov	r2, r5
 80051e8:	d110      	bne.n	800520c <__ieee754_sqrt+0x3c>
 80051ea:	ee10 2a10 	vmov	r2, s0
 80051ee:	462b      	mov	r3, r5
 80051f0:	f7fb f9ae 	bl	8000550 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fa fff2 	bl	80001e4 <__adddf3>
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	ec45 4b10 	vmov	d0, r4, r5
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520c:	2d00      	cmp	r5, #0
 800520e:	dc10      	bgt.n	8005232 <__ieee754_sqrt+0x62>
 8005210:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005214:	4330      	orrs	r0, r6
 8005216:	d0f5      	beq.n	8005204 <__ieee754_sqrt+0x34>
 8005218:	b15d      	cbz	r5, 8005232 <__ieee754_sqrt+0x62>
 800521a:	ee10 2a10 	vmov	r2, s0
 800521e:	462b      	mov	r3, r5
 8005220:	ee10 0a10 	vmov	r0, s0
 8005224:	f7fa ffdc 	bl	80001e0 <__aeabi_dsub>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	f7fb faba 	bl	80007a4 <__aeabi_ddiv>
 8005230:	e7e6      	b.n	8005200 <__ieee754_sqrt+0x30>
 8005232:	1509      	asrs	r1, r1, #20
 8005234:	d076      	beq.n	8005324 <__ieee754_sqrt+0x154>
 8005236:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800523a:	07ce      	lsls	r6, r1, #31
 800523c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005240:	bf5e      	ittt	pl
 8005242:	0fda      	lsrpl	r2, r3, #31
 8005244:	005b      	lslpl	r3, r3, #1
 8005246:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800524a:	0fda      	lsrs	r2, r3, #31
 800524c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005250:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005254:	2000      	movs	r0, #0
 8005256:	106d      	asrs	r5, r5, #1
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	f04f 0e16 	mov.w	lr, #22
 800525e:	4684      	mov	ip, r0
 8005260:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005264:	eb0c 0401 	add.w	r4, ip, r1
 8005268:	4294      	cmp	r4, r2
 800526a:	bfde      	ittt	le
 800526c:	1b12      	suble	r2, r2, r4
 800526e:	eb04 0c01 	addle.w	ip, r4, r1
 8005272:	1840      	addle	r0, r0, r1
 8005274:	0052      	lsls	r2, r2, #1
 8005276:	f1be 0e01 	subs.w	lr, lr, #1
 800527a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800527e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005282:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005286:	d1ed      	bne.n	8005264 <__ieee754_sqrt+0x94>
 8005288:	4671      	mov	r1, lr
 800528a:	2720      	movs	r7, #32
 800528c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005290:	4562      	cmp	r2, ip
 8005292:	eb04 060e 	add.w	r6, r4, lr
 8005296:	dc02      	bgt.n	800529e <__ieee754_sqrt+0xce>
 8005298:	d113      	bne.n	80052c2 <__ieee754_sqrt+0xf2>
 800529a:	429e      	cmp	r6, r3
 800529c:	d811      	bhi.n	80052c2 <__ieee754_sqrt+0xf2>
 800529e:	2e00      	cmp	r6, #0
 80052a0:	eb06 0e04 	add.w	lr, r6, r4
 80052a4:	da43      	bge.n	800532e <__ieee754_sqrt+0x15e>
 80052a6:	f1be 0f00 	cmp.w	lr, #0
 80052aa:	db40      	blt.n	800532e <__ieee754_sqrt+0x15e>
 80052ac:	f10c 0801 	add.w	r8, ip, #1
 80052b0:	eba2 020c 	sub.w	r2, r2, ip
 80052b4:	429e      	cmp	r6, r3
 80052b6:	bf88      	it	hi
 80052b8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80052bc:	1b9b      	subs	r3, r3, r6
 80052be:	4421      	add	r1, r4
 80052c0:	46c4      	mov	ip, r8
 80052c2:	0052      	lsls	r2, r2, #1
 80052c4:	3f01      	subs	r7, #1
 80052c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80052ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80052ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052d2:	d1dd      	bne.n	8005290 <__ieee754_sqrt+0xc0>
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d006      	beq.n	80052e6 <__ieee754_sqrt+0x116>
 80052d8:	1c4c      	adds	r4, r1, #1
 80052da:	bf13      	iteet	ne
 80052dc:	3101      	addne	r1, #1
 80052de:	3001      	addeq	r0, #1
 80052e0:	4639      	moveq	r1, r7
 80052e2:	f021 0101 	bicne.w	r1, r1, #1
 80052e6:	1043      	asrs	r3, r0, #1
 80052e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80052ec:	0849      	lsrs	r1, r1, #1
 80052ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80052f2:	07c2      	lsls	r2, r0, #31
 80052f4:	bf48      	it	mi
 80052f6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80052fa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80052fe:	460c      	mov	r4, r1
 8005300:	463d      	mov	r5, r7
 8005302:	e77f      	b.n	8005204 <__ieee754_sqrt+0x34>
 8005304:	0ada      	lsrs	r2, r3, #11
 8005306:	3815      	subs	r0, #21
 8005308:	055b      	lsls	r3, r3, #21
 800530a:	2a00      	cmp	r2, #0
 800530c:	d0fa      	beq.n	8005304 <__ieee754_sqrt+0x134>
 800530e:	02d7      	lsls	r7, r2, #11
 8005310:	d50a      	bpl.n	8005328 <__ieee754_sqrt+0x158>
 8005312:	f1c1 0420 	rsb	r4, r1, #32
 8005316:	fa23 f404 	lsr.w	r4, r3, r4
 800531a:	1e4d      	subs	r5, r1, #1
 800531c:	408b      	lsls	r3, r1
 800531e:	4322      	orrs	r2, r4
 8005320:	1b41      	subs	r1, r0, r5
 8005322:	e788      	b.n	8005236 <__ieee754_sqrt+0x66>
 8005324:	4608      	mov	r0, r1
 8005326:	e7f0      	b.n	800530a <__ieee754_sqrt+0x13a>
 8005328:	0052      	lsls	r2, r2, #1
 800532a:	3101      	adds	r1, #1
 800532c:	e7ef      	b.n	800530e <__ieee754_sqrt+0x13e>
 800532e:	46e0      	mov	r8, ip
 8005330:	e7be      	b.n	80052b0 <__ieee754_sqrt+0xe0>
 8005332:	bf00      	nop
 8005334:	7ff00000 	.word	0x7ff00000

08005338 <fabs>:
 8005338:	ec51 0b10 	vmov	r0, r1, d0
 800533c:	ee10 2a10 	vmov	r2, s0
 8005340:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005344:	ec43 2b10 	vmov	d0, r2, r3
 8005348:	4770      	bx	lr
 800534a:	0000      	movs	r0, r0
 800534c:	0000      	movs	r0, r0
	...

08005350 <nan>:
 8005350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005358 <nan+0x8>
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00000000 	.word	0x00000000
 800535c:	7ff80000 	.word	0x7ff80000

08005360 <_init>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr

0800536c <_fini>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

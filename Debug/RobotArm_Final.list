
RobotArm_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800aac8  0800aac8  0001aac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c8  0800b0c8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0c8  0800b0c8  0001b0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0d0  0800b0d0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d4  0800b0d4  0001b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e4  0800b2bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800b2bc  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd2  00000000  00000000  00033efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001837d  00000000  00000000  00038910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e8c  00000000  00000000  00050c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091051  00000000  00000000  00062b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  000f3bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aaac 	.word	0x0800aaac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800aaac 	.word	0x0800aaac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a3f      	ldr	r2, [pc, #252]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a38      	ldr	r2, [pc, #224]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_GPIO_Init+0x11c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_GPIO_Init+0x11c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROT_DIR_Pin|LOW_DIR_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f248 1120 	movw	r1, #33056	; 0x8120
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <MX_GPIO_Init+0x120>)
 800105a:	f002 fa7f 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GRIPPER_IN1_Pin|GRIPPER_IN4_Pin|GRIPPER_IN3_Pin|GRIPPER_IN2_Pin
 800105e:	2200      	movs	r2, #0
 8001060:	f24e 0112 	movw	r1, #57362	; 0xe012
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <MX_GPIO_Init+0x124>)
 8001066:	f002 fa79 	bl	800355c <HAL_GPIO_WritePin>
                          |HIGH_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_STEPS_GPIO_Port, ENABLE_STEPS_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <MX_GPIO_Init+0x120>)
 8001072:	f002 fa73 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4819      	ldr	r0, [pc, #100]	; (80010f4 <MX_GPIO_Init+0x128>)
 800108e:	f002 f8e1 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ROT_DIR_Pin|ENABLE_STEPS_Pin|LOW_DIR_Pin;
 8001092:	f248 3320 	movw	r3, #33568	; 0x8320
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <MX_GPIO_Init+0x120>)
 80010ac:	f002 f8d2 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GRIPPER_IN1_Pin|GRIPPER_IN4_Pin|GRIPPER_IN3_Pin|GRIPPER_IN2_Pin
 80010b0:	f24e 0312 	movw	r3, #57362	; 0xe012
 80010b4:	617b      	str	r3, [r7, #20]
                          |HIGH_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_GPIO_Init+0x124>)
 80010ca:	f002 f8c3 	bl	8003254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	f001 fe49 	bl	8002d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d8:	2028      	movs	r0, #40	; 0x28
 80010da:	f001 fe62 	bl	8002da2 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f001 fcd2 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f812 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f7ff ff62 	bl	8000fcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001108:	f001 fc28 	bl	800295c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800110c:	f001 f954 	bl	80023b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001110:	f001 f9f2 	bl	80024f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001114:	f001 fa66 	bl	80025e4 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001118:	f001 fada 	bl	80026d0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  Command_InitRobot();
 800111c:	f000 f9e4 	bl	80014e8 <Command_InitRobot>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 RobotArm_UART_loop();
 8001120:	f000 fa74 	bl	800160c <RobotArm_UART_loop>
 8001124:	e7fc      	b.n	8001120 <main+0x28>
	...

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f004 ffd6 	bl	80060e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SystemClock_Config+0xc8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <SystemClock_Config+0xc8>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <SystemClock_Config+0xc8>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SystemClock_Config+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <SystemClock_Config+0xcc>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <SystemClock_Config+0xcc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa13 	bl	80035d8 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b8:	f000 fb52 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2103      	movs	r1, #3
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fc75 	bl	8003ac8 <HAL_RCC_ClockConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e4:	f000 fb3c 	bl	8001860 <Error_Handler>
  }
}
 80011e8:	bf00      	nop
 80011ea:	3750      	adds	r7, #80	; 0x50
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_TIM_PeriodElapsedCallback>:
 * Obsługa przerwania od licznika taktującego silnik chwytaka
 * Zmienia takty na zasadzie maszyny stanów
 * Inkrementuje licznik kroków
 * Jeżeli licznik kroków obliczy wszystkie kroki do wykonania, to wyłączy chwytak
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance==robotArm.gripper_Stepper.timer.htim->Instance){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	f040 80fa 	bne.w	8001404 <HAL_TIM_PeriodElapsedCallback+0x20c>
		//Full step drive gripper
		switch (robotArm.gripper_Stepper.tick) {
 8001210:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001212:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001216:	2b03      	cmp	r3, #3
 8001218:	f200 80f5 	bhi.w	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
 800121c:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800121e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001222:	bf00      	nop
 8001224:	08001235 	.word	0x08001235
 8001228:	080012a5 	.word	0x080012a5
 800122c:	0800131d 	.word	0x0800131d
 8001230:	08001395 	.word	0x08001395
			case 0:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2102      	movs	r1, #2
 8001238:	4876      	ldr	r0, [pc, #472]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800123a:	f002 f98f 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001244:	4873      	ldr	r0, [pc, #460]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001246:	f002 f989 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001250:	4870      	ldr	r0, [pc, #448]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001252:	f002 f983 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125c:	486d      	ldr	r0, [pc, #436]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800125e:	f002 f97d 	bl	800355c <HAL_GPIO_WritePin>

				robotArm.gripper_Stepper.step_counter++;
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001266:	3301      	adds	r3, #1
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800126a:	6693      	str	r3, [r2, #104]	; 0x68
				if(robotArm.gripper_Stepper.step_counter >= robotArm.gripper_Stepper.steps_to_count)
 800126c:	4b68      	ldr	r3, [pc, #416]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800126e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001274:	429a      	cmp	r2, r3
 8001276:	d302      	bcc.n	800127e <HAL_TIM_PeriodElapsedCallback+0x86>
				{
					gripper_stop(&robotArm.gripper_Stepper);
 8001278:	4867      	ldr	r0, [pc, #412]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800127a:	f000 fee4 	bl	8002046 <gripper_stop>
				}

				if(robotArm.gripper_Stepper.state==open)robotArm.gripper_Stepper.tick++;
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001280:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001284:	2b00      	cmp	r3, #0
 8001286:	d108      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800128a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001294:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick=3;
				break;
 8001298:	e0b5      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
				else robotArm.gripper_Stepper.tick=3;
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800129c:	2203      	movs	r2, #3
 800129e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 80012a2:	e0b0      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
			case 1:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	485a      	ldr	r0, [pc, #360]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012aa:	f002 f957 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b4:	4857      	ldr	r0, [pc, #348]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012b6:	f002 f951 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c0:	4854      	ldr	r0, [pc, #336]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012c2:	f002 f94b 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4851      	ldr	r0, [pc, #324]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012ce:	f002 f945 	bl	800355c <HAL_GPIO_WritePin>

				robotArm.gripper_Stepper.step_counter++;
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012da:	6693      	str	r3, [r2, #104]	; 0x68
				if(robotArm.gripper_Stepper.step_counter >= robotArm.gripper_Stepper.steps_to_count)
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d302      	bcc.n	80012ee <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					gripper_stop(&robotArm.gripper_Stepper);
 80012e8:	484b      	ldr	r0, [pc, #300]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80012ea:	f000 feac 	bl	8002046 <gripper_stop>
				}

				if(robotArm.gripper_Stepper.state==open)robotArm.gripper_Stepper.tick++;
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012f0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0x112>
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001304:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 8001308:	e07d      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
				else robotArm.gripper_Stepper.tick--;
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800130c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001310:	3b01      	subs	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 800131a:	e074      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
			case 2:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2102      	movs	r1, #2
 8001320:	483c      	ldr	r0, [pc, #240]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001322:	f002 f91b 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	4839      	ldr	r0, [pc, #228]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800132e:	f002 f915 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001338:	4836      	ldr	r0, [pc, #216]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800133a:	f002 f90f 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	4833      	ldr	r0, [pc, #204]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001346:	f002 f909 	bl	800355c <HAL_GPIO_WritePin>

				robotArm.gripper_Stepper.step_counter++;
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800134c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800134e:	3301      	adds	r3, #1
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001352:	6693      	str	r3, [r2, #104]	; 0x68
				if(robotArm.gripper_Stepper.step_counter >= robotArm.gripper_Stepper.steps_to_count)
 8001354:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001356:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800135a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800135c:	429a      	cmp	r2, r3
 800135e:	d302      	bcc.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16e>
				{
					gripper_stop(&robotArm.gripper_Stepper);
 8001360:	482d      	ldr	r0, [pc, #180]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001362:	f000 fe70 	bl	8002046 <gripper_stop>
				}

				if(robotArm.gripper_Stepper.state==open)robotArm.gripper_Stepper.tick++;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001368:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800136c:	2b00      	cmp	r3, #0
 800136e:	d108      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001372:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800137c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 8001380:	e041      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
				else robotArm.gripper_Stepper.tick--;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001384:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001388:	3b01      	subs	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800138e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 8001392:	e038      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
			case 3:
				HAL_GPIO_WritePin(GRIPPER_IN1_GPIO_Port, GRIPPER_IN1_Pin, SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800139a:	f002 f8df 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN2_GPIO_Port, GRIPPER_IN2_Pin, RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a4:	481b      	ldr	r0, [pc, #108]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013a6:	f002 f8d9 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN3_GPIO_Port, GRIPPER_IN3_Pin, RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013b2:	f002 f8d3 	bl	800355c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRIPPER_IN4_GPIO_Port, GRIPPER_IN4_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013be:	f002 f8cd 	bl	800355c <HAL_GPIO_WritePin>

				robotArm.gripper_Stepper.step_counter++;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013ca:	6693      	str	r3, [r2, #104]	; 0x68
				if(robotArm.gripper_Stepper.step_counter >= robotArm.gripper_Stepper.steps_to_count)
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d302      	bcc.n	80013de <HAL_TIM_PeriodElapsedCallback+0x1e6>
				{
					gripper_stop(&robotArm.gripper_Stepper);
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013da:	f000 fe34 	bl	8002046 <gripper_stop>
				}

				if(robotArm.gripper_Stepper.state==open)robotArm.gripper_Stepper.tick=0;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d104      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x1fa>
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				else robotArm.gripper_Stepper.tick--;
				break;
 80013f0:	e009      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
				else robotArm.gripper_Stepper.tick--;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				break;
 8001402:	e000      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x20e>
		}
	}
 8001404:	bf00      	nop
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000210 	.word	0x20000210
 8001414:	40020400 	.word	0x40020400
 8001418:	20000270 	.word	0x20000270

0800141c <HAL_TIM_PWM_PulseFinishedCallback>:
 * Inkrementuje licznik kroków
 * Jeżeli licznik kroków obliczy wszystkie kroki do wykonania, to wylaczy silnik
 *
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	if(htim->Instance == robotArm.high_Stepper.timer.htim->Instance)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d10d      	bne.n	800144e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		robotArm.high_Stepper.step_counter++;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800143a:	60d3      	str	r3, [r2, #12]

		if(robotArm.high_Stepper.step_counter >= robotArm.high_Stepper.steps_to_count)
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	429a      	cmp	r2, r3
 8001446:	d302      	bcc.n	800144e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&robotArm.high_Stepper);
 8001448:	4818      	ldr	r0, [pc, #96]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800144a:	f000 faa3 	bl	8001994 <stepper_stop>
		}
	}
	if(htim->Instance == robotArm.low_Stepper.timer.htim->Instance)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d10d      	bne.n	8001478 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
	{
		robotArm.low_Stepper.step_counter++;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	3301      	adds	r3, #1
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001464:	62d3      	str	r3, [r2, #44]	; 0x2c

		if(robotArm.low_Stepper.step_counter >= robotArm.low_Stepper.steps_to_count)
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	429a      	cmp	r2, r3
 8001470:	d302      	bcc.n	8001478 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
		{
			stepper_stop(&robotArm.low_Stepper);
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8001474:	f000 fa8e 	bl	8001994 <stepper_stop>
		}
	}
	if(htim->Instance == robotArm.rot_Stepper.timer.htim->Instance)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d10d      	bne.n	80014a2 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
	{
		robotArm.rot_Stepper.step_counter++;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	3301      	adds	r3, #1
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 800148e:	64d3      	str	r3, [r2, #76]	; 0x4c

		if(robotArm.rot_Stepper.step_counter >= robotArm.rot_Stepper.steps_to_count)
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	429a      	cmp	r2, r3
 800149a:	d302      	bcc.n	80014a2 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
		{
			stepper_stop(&robotArm.rot_Stepper);
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 800149e:	f000 fa79 	bl	8001994 <stepper_stop>
		}
	}
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000210 	.word	0x20000210
 80014b0:	20000230 	.word	0x20000230
 80014b4:	20000250 	.word	0x20000250

080014b8 <HAL_UARTEx_RxEventCallback>:
/*
 * Obsługa przerwania od odbierania UART
 * * Wystawia flagę inforumującą o tym, że dane zostały odebrane i umieszczone w buforze odczytu
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_UARTEx_RxEventCallback+0x28>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d102      	bne.n	80014d4 <HAL_UARTEx_RxEventCallback+0x1c>
		RxEventFlag=1;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_UARTEx_RxEventCallback+0x2c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	}
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40004400 	.word	0x40004400
 80014e4:	20000200 	.word	0x20000200

080014e8 <Command_InitRobot>:
 * Czeka, aż użytkownik ustawi ramiona robota w pozycje krańcowe wyślę komendę 'INIT'
 * Inicjalizuje robota zgodnie z pozycjami krańcowymi
 * Wyświetla informację o zakończeniu inicjalizacji
 */

void Command_InitRobot(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "\nConnected!\nMove robot to endstop position and send 'INIT'\n", strlen("\nConnected!\nMove robot to endstop position and send 'INIT'\n"), 100);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	223b      	movs	r2, #59	; 0x3b
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <Command_InitRobot+0x44>)
 80014f2:	480f      	ldr	r0, [pc, #60]	; (8001530 <Command_InitRobot+0x48>)
 80014f4:	f003 fe1d 	bl	8005132 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, ReceiveBuffer, 20);
 80014f8:	2214      	movs	r2, #20
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <Command_InitRobot+0x4c>)
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <Command_InitRobot+0x48>)
 80014fe:	f003 feaa 	bl	8005256 <HAL_UARTEx_ReceiveToIdle_IT>
	while(strcmp(ReceiveBuffer,"INIT")!=0);
 8001502:	bf00      	nop
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <Command_InitRobot+0x50>)
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <Command_InitRobot+0x4c>)
 8001508:	f7fe fe6a 	bl	80001e0 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f8      	bne.n	8001504 <Command_InitRobot+0x1c>
	Command_ClearBuffer();
 8001512:	f000 f837 	bl	8001584 <Command_ClearBuffer>
	robotArm_init(&robotArm);
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <Command_InitRobot+0x54>)
 8001518:	f000 fafe 	bl	8001b18 <robotArm_init>
	HAL_UART_Transmit(&huart2, "Robot init completed\n", strlen("Robot init completed\n"), 100);
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	2215      	movs	r2, #21
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <Command_InitRobot+0x58>)
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <Command_InitRobot+0x48>)
 8001524:	f003 fe05 	bl	8005132 <HAL_UART_Transmit>

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0800aac8 	.word	0x0800aac8
 8001530:	200003e8 	.word	0x200003e8
 8001534:	200002b4 	.word	0x200002b4
 8001538:	0800ab04 	.word	0x0800ab04
 800153c:	20000210 	.word	0x20000210
 8001540:	0800ab0c 	.word	0x0800ab0c

08001544 <Command_Error>:
/*
 * Obsługa nieprawidłowo wpisanej komendy:
 * Wyświetla menu z dostępnymi komendami
 * Czyści bufor odczytu
 */
void Command_Error(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	b0ac      	sub	sp, #176	; 0xb0
 8001548:	af00      	add	r7, sp, #0
	uint8_t errortext[]="\n\nAvaliable commands:\n\nHOME\t\t\t-SET HOME POSITION X:0 Y:120 Z:120\nX:__ Y:__ Z:__\t\t-Set position XYZ\nG O/C\t\t\t-Gripper Open/Close\nSTART\t\t\t-Start program\nSTOP\t\t\t-Stop program\n";
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <Command_Error+0x38>)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4611      	mov	r1, r2
 8001550:	22ac      	movs	r2, #172	; 0xac
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fdba 	bl	80060cc <memcpy>
	HAL_UART_Transmit(&huart2, errortext, strlen(errortext), 100);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fe4a 	bl	80001f4 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	1d39      	adds	r1, r7, #4
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <Command_Error+0x3c>)
 800156a:	f003 fde2 	bl	8005132 <HAL_UART_Transmit>
	Command_ClearBuffer();
 800156e:	f000 f809 	bl	8001584 <Command_ClearBuffer>

}
 8001572:	bf00      	nop
 8001574:	37b0      	adds	r7, #176	; 0xb0
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800ab24 	.word	0x0800ab24
 8001580:	200003e8 	.word	0x200003e8

08001584 <Command_ClearBuffer>:
 * Czyszczenie bufora:
 * Wypełnienie wszystkich elementów bufora odczytu pustymi znakami '\0'
 * Wyzerowanie flagi odczytu po UART
 * Zlecenie odczytu UART w trybie przerwaniowym
 */
void Command_ClearBuffer(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	for ( uint8_t i = 0; i <= (20-1); ++i) {
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e006      	b.n	800159e <Command_ClearBuffer+0x1a>
		ReceiveBuffer[i]='\0';
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <Command_ClearBuffer+0x38>)
 8001594:	2100      	movs	r1, #0
 8001596:	54d1      	strb	r1, [r2, r3]
	for ( uint8_t i = 0; i <= (20-1); ++i) {
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	3301      	adds	r3, #1
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b13      	cmp	r3, #19
 80015a2:	d9f5      	bls.n	8001590 <Command_ClearBuffer+0xc>
	}
	RxEventFlag=0;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <Command_ClearBuffer+0x3c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, ReceiveBuffer, 20);
 80015aa:	2214      	movs	r2, #20
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <Command_ClearBuffer+0x38>)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <Command_ClearBuffer+0x40>)
 80015b0:	f003 fe51 	bl	8005256 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002b4 	.word	0x200002b4
 80015c0:	20000200 	.word	0x20000200
 80015c4:	200003e8 	.word	0x200003e8

080015c8 <Command_Control_Program>:
/*
 * Wyświetlenie komunikatu o starcie programu użytkownika
 */
void Command_Control_Program(void){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
	uint8_t text[]="\nStarted control program. To stop send 'STOP'";
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <Command_Control_Program+0x3c>)
 80015d0:	463c      	mov	r4, r7
 80015d2:	461d      	mov	r5, r3
 80015d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015e0:	c407      	stmia	r4!, {r0, r1, r2}
 80015e2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, text, strlen(text), 100);
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fe04 	bl	80001f4 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4639      	mov	r1, r7
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <Command_Control_Program+0x40>)
 80015f6:	f003 fd9c 	bl	8005132 <HAL_UART_Transmit>

}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdb0      	pop	{r4, r5, r7, pc}
 8001602:	bf00      	nop
 8001604:	0800abd0 	.word	0x0800abd0
 8001608:	200003e8 	.word	0x200003e8

0800160c <RobotArm_UART_loop>:
 * Oczekiwanie na flagę odczytu UART
 * Gdy flaga nadejdzie, obsługuje komendę
 * Gdy komenda jest nieprawidłowa wyświetla dostępne komendy
 */

void RobotArm_UART_loop(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af02      	add	r7, sp, #8
	if(RxEventFlag){
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <RobotArm_UART_loop+0xfc>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d071      	beq.n	80016fe <RobotArm_UART_loop+0xf2>
			if(ReceiveBuffer[0]=='X'){
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <RobotArm_UART_loop+0x100>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b58      	cmp	r3, #88	; 0x58
 8001620:	d122      	bne.n	8001668 <RobotArm_UART_loop+0x5c>
				float ReceiveX,ReceiveY,ReceiveZ;
				if(sscanf(ReceiveBuffer,"X:%f Y:%f Z:%f",&ReceiveX,&ReceiveY,&ReceiveZ)==3){
 8001622:	f107 0108 	add.w	r1, r7, #8
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	460b      	mov	r3, r1
 8001630:	4937      	ldr	r1, [pc, #220]	; (8001710 <RobotArm_UART_loop+0x104>)
 8001632:	4836      	ldr	r0, [pc, #216]	; (800170c <RobotArm_UART_loop+0x100>)
 8001634:	f004 ff96 	bl	8006564 <siscanf>
 8001638:	4603      	mov	r3, r0
 800163a:	2b03      	cmp	r3, #3
 800163c:	d111      	bne.n	8001662 <RobotArm_UART_loop+0x56>
					Command_ClearBuffer();
 800163e:	f7ff ffa1 	bl	8001584 <Command_ClearBuffer>
					robotArm_moveToXYZ(&robotArm, ReceiveX, ReceiveY, ReceiveZ);
 8001642:	edd7 7a03 	vldr	s15, [r7, #12]
 8001646:	ed97 7a02 	vldr	s14, [r7, #8]
 800164a:	edd7 6a01 	vldr	s13, [r7, #4]
 800164e:	eeb0 1a66 	vmov.f32	s2, s13
 8001652:	eef0 0a47 	vmov.f32	s1, s14
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	482e      	ldr	r0, [pc, #184]	; (8001714 <RobotArm_UART_loop+0x108>)
 800165c:	f000 fbda 	bl	8001e14 <robotArm_moveToXYZ>
				} while (strcmp(ReceiveBuffer,"STOP")!=0);
				Command_ClearBuffer();
			}
			else Command_Error();
		  }
}
 8001660:	e04d      	b.n	80016fe <RobotArm_UART_loop+0xf2>
				else Command_Error();
 8001662:	f7ff ff6f 	bl	8001544 <Command_Error>
}
 8001666:	e04a      	b.n	80016fe <RobotArm_UART_loop+0xf2>
			else if(ReceiveBuffer[0]=='G'){
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <RobotArm_UART_loop+0x100>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b47      	cmp	r3, #71	; 0x47
 800166e:	d118      	bne.n	80016a2 <RobotArm_UART_loop+0x96>
				if(ReceiveBuffer[2]=='O'){
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <RobotArm_UART_loop+0x100>)
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	2b4f      	cmp	r3, #79	; 0x4f
 8001676:	d106      	bne.n	8001686 <RobotArm_UART_loop+0x7a>
					Command_ClearBuffer();
 8001678:	f7ff ff84 	bl	8001584 <Command_ClearBuffer>
					robotArm_Gripper(&robotArm, open);
 800167c:	2100      	movs	r1, #0
 800167e:	4825      	ldr	r0, [pc, #148]	; (8001714 <RobotArm_UART_loop+0x108>)
 8001680:	f000 fca7 	bl	8001fd2 <robotArm_Gripper>
}
 8001684:	e03b      	b.n	80016fe <RobotArm_UART_loop+0xf2>
				else if (ReceiveBuffer[2]=='C'){
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <RobotArm_UART_loop+0x100>)
 8001688:	789b      	ldrb	r3, [r3, #2]
 800168a:	2b43      	cmp	r3, #67	; 0x43
 800168c:	d106      	bne.n	800169c <RobotArm_UART_loop+0x90>
					Command_ClearBuffer();
 800168e:	f7ff ff79 	bl	8001584 <Command_ClearBuffer>
					robotArm_Gripper(&robotArm, close);
 8001692:	2101      	movs	r1, #1
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <RobotArm_UART_loop+0x108>)
 8001696:	f000 fc9c 	bl	8001fd2 <robotArm_Gripper>
}
 800169a:	e030      	b.n	80016fe <RobotArm_UART_loop+0xf2>
				else Command_Error();
 800169c:	f7ff ff52 	bl	8001544 <Command_Error>
}
 80016a0:	e02d      	b.n	80016fe <RobotArm_UART_loop+0xf2>
			else if(strcmp(ReceiveBuffer,"HOME")==0){
 80016a2:	491d      	ldr	r1, [pc, #116]	; (8001718 <RobotArm_UART_loop+0x10c>)
 80016a4:	4819      	ldr	r0, [pc, #100]	; (800170c <RobotArm_UART_loop+0x100>)
 80016a6:	f7fe fd9b 	bl	80001e0 <strcmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10b      	bne.n	80016c8 <RobotArm_UART_loop+0xbc>
				Command_ClearBuffer();
 80016b0:	f7ff ff68 	bl	8001584 <Command_ClearBuffer>
				robotArm_moveToXYZ(&robotArm,X_HOME,Y_HOME,Z_HOME);
 80016b4:	ed9f 1a19 	vldr	s2, [pc, #100]	; 800171c <RobotArm_UART_loop+0x110>
 80016b8:	eddf 0a18 	vldr	s1, [pc, #96]	; 800171c <RobotArm_UART_loop+0x110>
 80016bc:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001720 <RobotArm_UART_loop+0x114>
 80016c0:	4814      	ldr	r0, [pc, #80]	; (8001714 <RobotArm_UART_loop+0x108>)
 80016c2:	f000 fba7 	bl	8001e14 <robotArm_moveToXYZ>
}
 80016c6:	e01a      	b.n	80016fe <RobotArm_UART_loop+0xf2>
			else if(strcmp(ReceiveBuffer,"START")==0){
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <RobotArm_UART_loop+0x118>)
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <RobotArm_UART_loop+0x100>)
 80016cc:	f7fe fd88 	bl	80001e0 <strcmp>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d111      	bne.n	80016fa <RobotArm_UART_loop+0xee>
				Command_Control_Program();
 80016d6:	f7ff ff77 	bl	80015c8 <Command_Control_Program>
				Command_ClearBuffer();
 80016da:	f7ff ff53 	bl	8001584 <Command_ClearBuffer>
					Command_ClearBuffer();
 80016de:	f7ff ff51 	bl	8001584 <Command_ClearBuffer>
					RobotArm_Control_Program();
 80016e2:	f000 f823 	bl	800172c <RobotArm_Control_Program>
				} while (strcmp(ReceiveBuffer,"STOP")!=0);
 80016e6:	4910      	ldr	r1, [pc, #64]	; (8001728 <RobotArm_UART_loop+0x11c>)
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <RobotArm_UART_loop+0x100>)
 80016ea:	f7fe fd79 	bl	80001e0 <strcmp>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f4      	bne.n	80016de <RobotArm_UART_loop+0xd2>
				Command_ClearBuffer();
 80016f4:	f7ff ff46 	bl	8001584 <Command_ClearBuffer>
}
 80016f8:	e001      	b.n	80016fe <RobotArm_UART_loop+0xf2>
			else Command_Error();
 80016fa:	f7ff ff23 	bl	8001544 <Command_Error>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000200 	.word	0x20000200
 800170c:	200002b4 	.word	0x200002b4
 8001710:	0800ac00 	.word	0x0800ac00
 8001714:	20000210 	.word	0x20000210
 8001718:	0800ac10 	.word	0x0800ac10
 800171c:	42f00000 	.word	0x42f00000
 8001720:	00000000 	.word	0x00000000
 8001724:	0800ac18 	.word	0x0800ac18
 8001728:	0800ac20 	.word	0x0800ac20

0800172c <RobotArm_Control_Program>:
/*
 * Program sterujący robotem do zaimplementowania przez użytkownika
 */
void RobotArm_Control_Program(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	  robotArm_Gripper(&robotArm, open);
 8001730:	2100      	movs	r1, #0
 8001732:	483c      	ldr	r0, [pc, #240]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001734:	f000 fc4d 	bl	8001fd2 <robotArm_Gripper>
	  robotArm_moveToXYZ(&robotArm, 0, 120, -80);
 8001738:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8001828 <RobotArm_Control_Program+0xfc>
 800173c:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800182c <RobotArm_Control_Program+0x100>
 8001740:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001830 <RobotArm_Control_Program+0x104>
 8001744:	4837      	ldr	r0, [pc, #220]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001746:	f000 fb65 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 0, 120, -110);
 800174a:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8001834 <RobotArm_Control_Program+0x108>
 800174e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800182c <RobotArm_Control_Program+0x100>
 8001752:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001830 <RobotArm_Control_Program+0x104>
 8001756:	4833      	ldr	r0, [pc, #204]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001758:	f000 fb5c 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_Gripper(&robotArm, close);
 800175c:	2101      	movs	r1, #1
 800175e:	4831      	ldr	r0, [pc, #196]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001760:	f000 fc37 	bl	8001fd2 <robotArm_Gripper>
	  robotArm_moveToXYZ(&robotArm, 120, 0, -80);
 8001764:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8001828 <RobotArm_Control_Program+0xfc>
 8001768:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001830 <RobotArm_Control_Program+0x104>
 800176c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800182c <RobotArm_Control_Program+0x100>
 8001770:	482c      	ldr	r0, [pc, #176]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001772:	f000 fb4f 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 120, 0, -110);
 8001776:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001834 <RobotArm_Control_Program+0x108>
 800177a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001830 <RobotArm_Control_Program+0x104>
 800177e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800182c <RobotArm_Control_Program+0x100>
 8001782:	4828      	ldr	r0, [pc, #160]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001784:	f000 fb46 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_Gripper(&robotArm, open);
 8001788:	2100      	movs	r1, #0
 800178a:	4826      	ldr	r0, [pc, #152]	; (8001824 <RobotArm_Control_Program+0xf8>)
 800178c:	f000 fc21 	bl	8001fd2 <robotArm_Gripper>

	  robotArm_moveToXYZ(&robotArm, 0, 120, 120);
 8001790:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800182c <RobotArm_Control_Program+0x100>
 8001794:	eddf 0a25 	vldr	s1, [pc, #148]	; 800182c <RobotArm_Control_Program+0x100>
 8001798:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001830 <RobotArm_Control_Program+0x104>
 800179c:	4821      	ldr	r0, [pc, #132]	; (8001824 <RobotArm_Control_Program+0xf8>)
 800179e:	f000 fb39 	bl	8001e14 <robotArm_moveToXYZ>

	  robotArm_moveToXYZ(&robotArm, 120, 0, -80);
 80017a2:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001828 <RobotArm_Control_Program+0xfc>
 80017a6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001830 <RobotArm_Control_Program+0x104>
 80017aa:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800182c <RobotArm_Control_Program+0x100>
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <RobotArm_Control_Program+0xf8>)
 80017b0:	f000 fb30 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 120, 0, -110);
 80017b4:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8001834 <RobotArm_Control_Program+0x108>
 80017b8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001830 <RobotArm_Control_Program+0x104>
 80017bc:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800182c <RobotArm_Control_Program+0x100>
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <RobotArm_Control_Program+0xf8>)
 80017c2:	f000 fb27 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_Gripper(&robotArm, close);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <RobotArm_Control_Program+0xf8>)
 80017ca:	f000 fc02 	bl	8001fd2 <robotArm_Gripper>
	  robotArm_moveToXYZ(&robotArm, 120, 0, 0);
 80017ce:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8001830 <RobotArm_Control_Program+0x104>
 80017d2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001830 <RobotArm_Control_Program+0x104>
 80017d6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800182c <RobotArm_Control_Program+0x100>
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <RobotArm_Control_Program+0xf8>)
 80017dc:	f000 fb1a 	bl	8001e14 <robotArm_moveToXYZ>

	  robotArm_moveToXYZ(&robotArm, 0, 120, 0);
 80017e0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001830 <RobotArm_Control_Program+0x104>
 80017e4:	eddf 0a11 	vldr	s1, [pc, #68]	; 800182c <RobotArm_Control_Program+0x100>
 80017e8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001830 <RobotArm_Control_Program+0x104>
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <RobotArm_Control_Program+0xf8>)
 80017ee:	f000 fb11 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_moveToXYZ(&robotArm, 0, 120, -110);
 80017f2:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001834 <RobotArm_Control_Program+0x108>
 80017f6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800182c <RobotArm_Control_Program+0x100>
 80017fa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001830 <RobotArm_Control_Program+0x104>
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001800:	f000 fb08 	bl	8001e14 <robotArm_moveToXYZ>
	  robotArm_Gripper(&robotArm, open);
 8001804:	2100      	movs	r1, #0
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <RobotArm_Control_Program+0xf8>)
 8001808:	f000 fbe3 	bl	8001fd2 <robotArm_Gripper>
	  robotArm_moveToXYZ(&robotArm, 0, 120, 120);
 800180c:	ed9f 1a07 	vldr	s2, [pc, #28]	; 800182c <RobotArm_Control_Program+0x100>
 8001810:	eddf 0a06 	vldr	s1, [pc, #24]	; 800182c <RobotArm_Control_Program+0x100>
 8001814:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001830 <RobotArm_Control_Program+0x104>
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <RobotArm_Control_Program+0xf8>)
 800181a:	f000 fafb 	bl	8001e14 <robotArm_moveToXYZ>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000210 	.word	0x20000210
 8001828:	c2a00000 	.word	0xc2a00000
 800182c:	42f00000 	.word	0x42f00000
 8001830:	00000000 	.word	0x00000000
 8001834:	c2dc0000 	.word	0xc2dc0000

08001838 <HAL_UART_ErrorCallback>:
/*
 * Obsługa błędu komunikacji UART:
 * Gdy wystąpi błąd w komunikacji UART, wysyła informację i programowo wykonuje reset procesora
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, "\nUART error! Reset system...\n", strlen("\nUART error! Reset system...\n"), 100);
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	221d      	movs	r2, #29
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <HAL_UART_ErrorCallback+0x20>)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_UART_ErrorCallback+0x24>)
 8001848:	f003 fc73 	bl	8005132 <HAL_UART_Transmit>
	HAL_NVIC_SystemReset();
 800184c:	f001 fab7 	bl	8002dbe <HAL_NVIC_SystemReset>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	0800ac28 	.word	0x0800ac28
 800185c:	200003e8 	.word	0x200003e8

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>

0800186a <stepper_init>:
 */
#include "robotArm.h"
#include "math.h"

void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel, GPIO_TypeDef *_dirPortGPIO, uint16_t _dirPinGPIO)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]

	_stepper->timer.htim = _htim;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]
	_stepper->dirGPIO.PORT = _dirPortGPIO;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	611a      	str	r2, [r3, #16]
	_stepper->dirGPIO.PIN = _dirPinGPIO;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8b3a      	ldrh	r2, [r7, #24]
 800188e:	829a      	strh	r2, [r3, #20]
	_stepper->speed = SPEED_DEFAULT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2232      	movs	r2, #50	; 0x32
 8001894:	775a      	strb	r2, [r3, #29]
	stepper_set_speed(_stepper, SPEED_DEFAULT);
 8001896:	2132      	movs	r1, #50	; 0x32
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f8d5 	bl	8001a48 <stepper_set_speed>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <stepper_set_angle_radian>:
	}

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
}
void stepper_set_angle_radian(struct stepper_s *_stepper, float _angle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	ed87 0a00 	vstr	s0, [r7]
	_stepper->mode = working;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	721a      	strb	r2, [r3, #8]
	stepper_set_speed(_stepper, _stepper->speed);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7f5b      	ldrb	r3, [r3, #29]
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8c1 	bl	8001a48 <stepper_set_speed>
	if (_angle > 0) {
 80018c6:	edd7 7a00 	vldr	s15, [r7]
 80018ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd1c      	ble.n	800190e <stepper_set_angle_radian+0x66>
		stepper_set_direction(_stepper, CW);
 80018d4:	2101      	movs	r1, #1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f892 	bl	8001a00 <stepper_set_direction>
		_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / (2.0 * M_PI);
 80018dc:	edd7 7a00 	vldr	s15, [r7]
 80018e0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001990 <stepper_set_angle_radian+0xe8>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	ee17 0a90 	vmov	r0, s15
 80018ec:	f7fe fe44 	bl	8000578 <__aeabi_f2d>
 80018f0:	a325      	add	r3, pc, #148	; (adr r3, 8001988 <stepper_set_angle_radian+0xe0>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe ffc1 	bl	800087c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f941 	bl	8000b88 <__aeabi_d2uiz>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e024      	b.n	8001958 <stepper_set_angle_radian+0xb0>
	}
	else if (_angle < 0){
 800190e:	edd7 7a00 	vldr	s15, [r7]
 8001912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	d51d      	bpl.n	8001958 <stepper_set_angle_radian+0xb0>
		stepper_set_direction(_stepper, CCW);
 800191c:	2100      	movs	r1, #0
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f86e 	bl	8001a00 <stepper_set_direction>
		_stepper->steps_to_count = -_angle * (STEP_PER_REVOLUTION * MICRO_STEP) / (2.0 * M_PI);
 8001924:	edd7 7a00 	vldr	s15, [r7]
 8001928:	eef1 7a67 	vneg.f32	s15, s15
 800192c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001990 <stepper_set_angle_radian+0xe8>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	ee17 0a90 	vmov	r0, s15
 8001938:	f7fe fe1e 	bl	8000578 <__aeabi_f2d>
 800193c:	a312      	add	r3, pc, #72	; (adr r3, 8001988 <stepper_set_angle_radian+0xe0>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe ff9b 	bl	800087c <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f91b 	bl	8000b88 <__aeabi_d2uiz>
 8001952:	4602      	mov	r2, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
	}
	_stepper->step_counter = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]

	if(0 == _stepper->steps_to_count)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <stepper_set_angle_radian+0xc4>
	{
		stepper_stop(_stepper);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f814 	bl	8001994 <stepper_stop>
	}

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f002 fc40 	bl	80041fc <HAL_TIM_PWM_Start_IT>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	54442d18 	.word	0x54442d18
 800198c:	401921fb 	.word	0x401921fb
 8001990:	45480000 	.word	0x45480000

08001994 <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <stepper_stop+0x22>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
 80019b4:	e018      	b.n	80019e8 <stepper_stop+0x54>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d105      	bne.n	80019ca <stepper_stop+0x36>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2300      	movs	r3, #0
 80019c6:	6393      	str	r3, [r2, #56]	; 0x38
 80019c8:	e00e      	b.n	80019e8 <stepper_stop+0x54>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d105      	bne.n	80019de <stepper_stop+0x4a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019dc:	e004      	b.n	80019e8 <stepper_stop+0x54>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f002 fb9e 	bl	8004134 <HAL_TIM_PWM_Stop>

}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, stepper_direction _dir)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
	_stepper->direction=_dir;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	771a      	strb	r2, [r3, #28]
	if(_dir == CCW)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d108      	bne.n	8001a2a <stepper_set_direction+0x2a>
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_SET);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6918      	ldr	r0, [r3, #16]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8a9b      	ldrh	r3, [r3, #20]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	f001 fd9a 	bl	800355c <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_RESET);
}
 8001a28:	e00a      	b.n	8001a40 <stepper_set_direction+0x40>
	else if(_dir == CW)
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <stepper_set_direction+0x40>
		HAL_GPIO_WritePin(_stepper->dirGPIO.PORT, _stepper->dirGPIO.PIN, GPIO_PIN_RESET);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6918      	ldr	r0, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	8a9b      	ldrh	r3, [r3, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f001 fd8e 	bl	800355c <HAL_GPIO_WritePin>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <stepper_set_speed>:
void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d902      	bls.n	8001a5e <stepper_set_speed+0x16>
	{
		_speed = 100;
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	e006      	b.n	8001a6c <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff95 	bl	8001994 <stepper_stop>
		return;
 8001a6a:	e050      	b.n	8001b0e <stepper_set_speed+0xc6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <stepper_set_speed+0xcc>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8001a80:	f002 f9f6 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8001a84:	4601      	mov	r1, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a96:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <stepper_set_speed+0x88>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	085a      	lsrs	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3a01      	subs	r2, #1
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ace:	e01e      	b.n	8001b0e <stepper_set_speed+0xc6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <stepper_set_speed+0xa0>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ae6:	e012      	b.n	8001b0e <stepper_set_speed+0xc6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d107      	bne.n	8001b00 <stepper_set_speed+0xb8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001afe:	e006      	b.n	8001b0e <stepper_set_speed+0xc6>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	51eb851f 	.word	0x51eb851f

08001b18 <robotArm_init>:

void robotArm_init(struct robotArm_s*_robotArm){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENABLE_STEPS_GPIO_Port, ENABLE_STEPS_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b26:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <robotArm_init+0x9c>)
 8001b28:	f001 fd18 	bl	800355c <HAL_GPIO_WritePin>


	stepper_init(&_robotArm->high_Stepper, &HIGH_STEP_HTIM, HIGH_STEP_TIM_CHANNEL, HIGH_DIR_GPIO_Port, HIGH_DIR_Pin);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	2310      	movs	r3, #16
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <robotArm_init+0xa0>)
 8001b34:	2208      	movs	r2, #8
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <robotArm_init+0xa4>)
 8001b38:	f7ff fe97 	bl	800186a <stepper_init>

	stepper_init(&_robotArm->low_Stepper, &LOW_STEP_HTIM, LOW_STEP_TIM_CHANNEL, LOW_DIR_GPIO_Port, LOW_DIR_Pin);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 0020 	add.w	r0, r3, #32
 8001b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <robotArm_init+0x9c>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	491c      	ldr	r1, [pc, #112]	; (8001bc0 <robotArm_init+0xa8>)
 8001b4e:	f7ff fe8c 	bl	800186a <stepper_init>

	stepper_init(&_robotArm->rot_Stepper, &ROT_STEP_HTIM, ROT_STEP_TIM_CHANNEL, ROT_DIR_GPIO_Port, ROT_DIR_Pin);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8001b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <robotArm_init+0x9c>)
 8001b60:	2204      	movs	r2, #4
 8001b62:	4918      	ldr	r1, [pc, #96]	; (8001bc4 <robotArm_init+0xac>)
 8001b64:	f7ff fe81 	bl	800186a <stepper_init>

	_robotArm->gripper_Stepper.timer.htim = &GRIPPER_HTIM;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <robotArm_init+0xb0>)
 8001b6c:	661a      	str	r2, [r3, #96]	; 0x60
	_robotArm->gripper_Stepper.state = close;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	_robotArm->highBigGear = HIGH_ENDSTOP;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <robotArm_init+0xb4>)
 8001b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	_robotArm->lowBigGear = LOW_ENDSTOP;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <robotArm_init+0xb8>)
 8001b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	_robotArm->rotBigGear = ROT_ENDSTOP;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	_robotArm->highSmallGear = HIGH_ENDSTOP * GEAR_RATIO;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <robotArm_init+0xbc>)
 8001b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	_robotArm->lowSmallGear = LOW_ENDSTOP * GEAR_RATIO;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <robotArm_init+0xc0>)
 8001b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	_robotArm->rotSmallGear = ROT_ENDSTOP * GEAR_RATIO;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	200003a0 	.word	0x200003a0
 8001bc0:	200002c8 	.word	0x200002c8
 8001bc4:	20000358 	.word	0x20000358
 8001bc8:	20000310 	.word	0x20000310
 8001bcc:	bee85696 	.word	0xbee85696
 8001bd0:	bf53bd95 	.word	0xbf53bd95
 8001bd4:	bfce85db 	.word	0xbfce85db
 8001bd8:	c03c36bd 	.word	0xc03c36bd
 8001bdc:	00000000 	.word	0x00000000

08001be0 <robotArm_Geometry_calculateRadian>:
void robotArm_Geometry_calculateRadian(struct robotArm_s *_robotArm, float _Xmm, float _Ymm, float _Zmm) {
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bec:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bf0:	ed87 1a00 	vstr	s2, [r7]


	float xmm=_Xmm;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
	float ymm=_Ymm;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
	float zmm=_Zmm;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
	float high, low, rot, rrot, rside, alpha, phi, omega;

   rrot =  sqrt((xmm * xmm) + (ymm * ymm));
 8001c00:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	ee17 0a90 	vmov	r0, s15
 8001c18:	f7fe fcae 	bl	8000578 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	ec43 2b10 	vmov	d0, r2, r3
 8001c24:	f008 f9dc 	bl	8009fe0 <sqrt>
 8001c28:	ec53 2b10 	vmov	r2, r3, d0
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ffca 	bl	8000bc8 <__aeabi_d2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   rside = sqrt((rrot * rrot) + (zmm * zmm));
 8001c38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c3c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	ee17 0a90 	vmov	r0, s15
 8001c50:	f7fe fc92 	bl	8000578 <__aeabi_f2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	ec43 2b10 	vmov	d0, r2, r3
 8001c5c:	f008 f9c0 	bl	8009fe0 <sqrt>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffae 	bl	8000bc8 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28

   rot = asin(xmm / rrot);
 8001c70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c7c:	ee16 0a90 	vmov	r0, s13
 8001c80:	f7fe fc7a 	bl	8000578 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	ec43 2b10 	vmov	d0, r2, r3
 8001c8c:	f008 f96e 	bl	8009f6c <asin>
 8001c90:	ec53 2b10 	vmov	r2, r3, d0
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff96 	bl	8000bc8 <__aeabi_d2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
   high = 2.0 * asin(rside / (2.0 * 120.0));
 8001ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ca2:	f7fe fc69 	bl	8000578 <__aeabi_f2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <robotArm_Geometry_calculateRadian+0x230>)
 8001cac:	f7fe fde6 	bl	800087c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	ec43 2b17 	vmov	d7, r2, r3
 8001cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbc:	eef0 0a67 	vmov.f32	s1, s15
 8001cc0:	f008 f954 	bl	8009f6c <asin>
 8001cc4:	ec51 0b10 	vmov	r0, r1, d0
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	f7fe faf6 	bl	80002bc <__adddf3>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe ff76 	bl	8000bc8 <__aeabi_d2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	623b      	str	r3, [r7, #32]

   alpha = (M_PI - high) / 2.0;
 8001ce0:	6a38      	ldr	r0, [r7, #32]
 8001ce2:	f7fe fc49 	bl	8000578 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	a145      	add	r1, pc, #276	; (adr r1, 8001e00 <robotArm_Geometry_calculateRadian+0x220>)
 8001cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf0:	f7fe fae2 	bl	80002b8 <__aeabi_dsub>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d04:	f7fe fdba 	bl	800087c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff5a 	bl	8000bc8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	61fb      	str	r3, [r7, #28]
   phi = alpha - (M_PI / 2.0);
 8001d18:	69f8      	ldr	r0, [r7, #28]
 8001d1a:	f7fe fc2d 	bl	8000578 <__aeabi_f2d>
 8001d1e:	a33a      	add	r3, pc, #232	; (adr r3, 8001e08 <robotArm_Geometry_calculateRadian+0x228>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fac8 	bl	80002b8 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ff4a 	bl	8000bc8 <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	61bb      	str	r3, [r7, #24]
   omega = acos(rrot / rside);
 8001d38:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d44:	ee16 0a90 	vmov	r0, s13
 8001d48:	f7fe fc16 	bl	8000578 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	ec43 2b10 	vmov	d0, r2, r3
 8001d54:	f008 f8d0 	bl	8009ef8 <acos>
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff32 	bl	8000bc8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	617b      	str	r3, [r7, #20]

   if (zmm > 0) {
 8001d68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	dd0a      	ble.n	8001d8c <robotArm_Geometry_calculateRadian+0x1ac>
	   low = - phi - omega;
 8001d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d7a:	eeb1 7a67 	vneg.f32	s14, s15
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001d8a:	e007      	b.n	8001d9c <robotArm_Geometry_calculateRadian+0x1bc>
   } else {
	   low = omega - phi;
 8001d8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
   }

    high = (M_PI / 2) - high + low;
 8001d9c:	6a38      	ldr	r0, [r7, #32]
 8001d9e:	f7fe fbeb 	bl	8000578 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	a118      	add	r1, pc, #96	; (adr r1, 8001e08 <robotArm_Geometry_calculateRadian+0x228>)
 8001da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dac:	f7fe fa84 	bl	80002b8 <__aeabi_dsub>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dba:	f7fe fbdd 	bl	8000578 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fef9 	bl	8000bc8 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	623b      	str	r3, [r7, #32]
   _robotArm->calcHigh = high;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   _robotArm->calcLow = low;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   _robotArm->calcRot = rot;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 8001df2:	bf00      	nop
 8001df4:	3740      	adds	r7, #64	; 0x40
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	54442d18 	.word	0x54442d18
 8001e04:	400921fb 	.word	0x400921fb
 8001e08:	54442d18 	.word	0x54442d18
 8001e0c:	3ff921fb 	.word	0x3ff921fb
 8001e10:	406e0000 	.word	0x406e0000

08001e14 <robotArm_moveToXYZ>:

void robotArm_moveToXYZ(struct robotArm_s * _robotArm, float _Xmm, float _Ymm, float _Zmm){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e20:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e24:	ed87 1a00 	vstr	s2, [r7]

	float highAngleToMove, lowAngleToMove, rotAngleToMove;


	robotArm_Geometry_calculateRadian(_robotArm, _Xmm, _Ymm,_Zmm);
 8001e28:	ed97 1a00 	vldr	s2, [r7]
 8001e2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e30:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fed3 	bl	8001be0 <robotArm_Geometry_calculateRadian>

	highAngleToMove=(_robotArm->calcHigh-_robotArm->highBigGear)*GEAR_RATIO;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001e4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e52:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5a:	edc7 7a07 	vstr	s15, [r7, #28]
	lowAngleToMove=(_robotArm->calcLow-_robotArm->lowBigGear)*GEAR_RATIO;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e76:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	edc7 7a06 	vstr	s15, [r7, #24]
	rotAngleToMove=(_robotArm->calcRot-_robotArm->rotBigGear)*GEAR_RATIO;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001e96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e9a:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea2:	edc7 7a05 	vstr	s15, [r7, #20]


		if(lowAngleToMove)stepper_set_angle_radian(&_robotArm->low_Stepper, lowAngleToMove);
 8001ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d006      	beq.n	8001ec2 <robotArm_moveToXYZ+0xae>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fcf3 	bl	80018a8 <stepper_set_angle_radian>

		if(highAngleToMove)stepper_set_angle_radian(&_robotArm->high_Stepper, highAngleToMove);
 8001ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	d005      	beq.n	8001edc <robotArm_moveToXYZ+0xc8>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fce6 	bl	80018a8 <stepper_set_angle_radian>

		if(rotAngleToMove)stepper_set_angle_radian(&_robotArm->rot_Stepper, rotAngleToMove);
 8001edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d006      	beq.n	8001ef8 <robotArm_moveToXYZ+0xe4>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3340      	adds	r3, #64	; 0x40
 8001eee:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcd8 	bl	80018a8 <stepper_set_angle_radian>

	while(!robotArm_isIdle(_robotArm));
 8001ef8:	bf00      	nop
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f84e 	bl	8001f9c <robotArm_isIdle>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f9      	beq.n	8001efa <robotArm_moveToXYZ+0xe6>

	_robotArm->Xmm = _Xmm;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	675a      	str	r2, [r3, #116]	; 0x74
	_robotArm->Ymm = _Ymm;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	679a      	str	r2, [r3, #120]	; 0x78
	_robotArm->Zmm = _Zmm;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	67da      	str	r2, [r3, #124]	; 0x7c


	_robotArm->highBigGear = _robotArm->calcHigh;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	_robotArm->lowBigGear = _robotArm->calcLow;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	_robotArm->rotBigGear = _robotArm->calcRot;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	_robotArm->highSmallGear=_robotArm->highBigGear * GEAR_RATIO;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001f42:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001f46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f4a:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	_robotArm->lowSmallGear=_robotArm->lowBigGear * GEAR_RATIO;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001f62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f66:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	_robotArm->rotSmallGear=_robotArm->rotBigGear * GEAR_RATIO;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f7a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001f98 <robotArm_moveToXYZ+0x184>
 8001f7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f82:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	42000000 	.word	0x42000000

08001f9c <robotArm_isIdle>:


unsigned int robotArm_isIdle(struct robotArm_s * _robotArm){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if(_robotArm->high_Stepper.mode==idle &&
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7a1b      	ldrb	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <robotArm_isIdle+0x28>
	   _robotArm->low_Stepper.mode==idle &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if(_robotArm->high_Stepper.mode==idle &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <robotArm_isIdle+0x28>
	   _robotArm->rot_Stepper.mode==idle
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	   _robotArm->low_Stepper.mode==idle &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <robotArm_isIdle+0x28>
	)return 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <robotArm_isIdle+0x2a>
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <robotArm_Gripper>:

void robotArm_Gripper(struct robotArm_s * _robotArm, gripper_state _state){
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]

	if(_robotArm->gripper_Stepper.state==_state) return;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d029      	beq.n	800203e <robotArm_Gripper+0x6c>

	_robotArm->gripper_Stepper.mode = working;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	_robotArm->gripper_Stepper.step_counter = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	669a      	str	r2, [r3, #104]	; 0x68

	if(_state == open){
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <robotArm_Gripper+0x3e>
		_robotArm->gripper_Stepper.state = open;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		_robotArm->gripper_Stepper.steps_to_count = 500;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800200c:	66da      	str	r2, [r3, #108]	; 0x6c
 800200e:	e00a      	b.n	8002026 <robotArm_Gripper+0x54>
	}
	else if (_state == close){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <robotArm_Gripper+0x54>
		_robotArm->gripper_Stepper.state = close;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		_robotArm->gripper_Stepper.steps_to_count = 900;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002024:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	HAL_TIM_Base_Start_IT(_robotArm->gripper_Stepper.timer.htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202a:	4618      	mov	r0, r3
 800202c:	f001 ff98 	bl	8003f60 <HAL_TIM_Base_Start_IT>
	while(_robotArm->gripper_Stepper.mode == working);
 8002030:	bf00      	nop
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002038:	2b01      	cmp	r3, #1
 800203a:	d0fa      	beq.n	8002032 <robotArm_Gripper+0x60>
 800203c:	e000      	b.n	8002040 <robotArm_Gripper+0x6e>
	if(_robotArm->gripper_Stepper.state==_state) return;
 800203e:	bf00      	nop


}
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <gripper_stop>:
void gripper_stop(struct gripper_s *_gripper)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	_gripper->mode = idle;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	711a      	strb	r2, [r3, #4]

	HAL_TIM_Base_Stop_IT(_gripper->timer.htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f001 ffe3 	bl	8004024 <HAL_TIM_Base_Stop_IT>

}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_MspInit+0x7c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_MspInit+0x7c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_MspInit+0x7c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_MspInit+0x7c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_MspInit+0x7c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_MspInit+0x7c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020a6:	2007      	movs	r0, #7
 80020a8:	f000 fe54 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2004      	movs	r0, #4
 80020b2:	f000 fe5a 	bl	8002d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80020b6:	2004      	movs	r0, #4
 80020b8:	f000 fe73 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2005      	movs	r0, #5
 80020c2:	f000 fe52 	bl	8002d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80020c6:	2005      	movs	r0, #5
 80020c8:	f000 fe6b 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2051      	movs	r0, #81	; 0x51
 80020d2:	f000 fe4a 	bl	8002d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80020d6:	2051      	movs	r0, #81	; 0x51
 80020d8:	f000 fe63 	bl	8002da2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <MemManage_Handler+0x4>

080020fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <UsageFault_Handler+0x4>

08002106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002134:	f000 fd08 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002140:	f000 fee0 	bl	8002f04 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800215e:	f002 f94b 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003a0 	.word	0x200003a0

0800216c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002172:	f002 f941 	bl	80043f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002178:	f002 f93e 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200003a0 	.word	0x200003a0
 8002184:	20000310 	.word	0x20000310

08002188 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800218e:	f002 f933 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003a0 	.word	0x200003a0

0800219c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TIM1_CC_IRQHandler+0x10>)
 80021a2:	f002 f929 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200003a0 	.word	0x200003a0

080021b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <TIM3_IRQHandler+0x10>)
 80021b6:	f002 f91f 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000358 	.word	0x20000358

080021c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM4_IRQHandler+0x10>)
 80021ca:	f002 f915 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200002c8 	.word	0x200002c8

080021d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART2_IRQHandler+0x10>)
 80021de:	f003 f89f 	bl	8005320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200003e8 	.word	0x200003e8

080021ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021f4:	f001 f9cc 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
	return 1;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_kill>:

int _kill(int pid, int sig)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002224:	f003 ff28 	bl	8006078 <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	2216      	movs	r2, #22
 800222c:	601a      	str	r2, [r3, #0]
	return -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_exit>:

void _exit (int status)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002242:	f04f 31ff 	mov.w	r1, #4294967295
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffe7 	bl	800221a <_kill>
	while (1) {}		/* Make sure we hang here */
 800224c:	e7fe      	b.n	800224c <_exit+0x12>

0800224e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e00a      	b.n	8002276 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002260:	f3af 8000 	nop.w
 8002264:	4601      	mov	r1, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	b2ca      	uxtb	r2, r1
 800226e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	dbf0      	blt.n	8002260 <_read+0x12>
	}

return len;
 800227e:	687b      	ldr	r3, [r7, #4]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e009      	b.n	80022ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbf1      	blt.n	800229a <_write+0x12>
	}
	return len;
 80022b6:	687b      	ldr	r3, [r7, #4]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_close>:

int _close(int file)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	return -1;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e8:	605a      	str	r2, [r3, #4]
	return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_isatty>:

int _isatty(int file)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
	return 0;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <_sbrk+0x5c>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <_sbrk+0x60>)
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x64>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <_sbrk+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d207      	bcs.n	8002368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002358:	f003 fe8e 	bl	8006078 <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	220c      	movs	r2, #12
 8002360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e009      	b.n	800237c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <_sbrk+0x64>)
 8002378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20020000 	.word	0x20020000
 8002388:	00000400 	.word	0x00000400
 800238c:	20000204 	.word	0x20000204
 8002390:	20000460 	.word	0x20000460

08002394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <SystemInit+0x20>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <SystemInit+0x20>)
 80023a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b096      	sub	sp, #88	; 0x58
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2220      	movs	r2, #32
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fe79 	bl	80060e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <MX_TIM1_Init+0x138>)
 80023f8:	4a3e      	ldr	r2, [pc, #248]	; (80024f4 <MX_TIM1_Init+0x13c>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80023fc:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <MX_TIM1_Init+0x138>)
 80023fe:	2263      	movs	r2, #99	; 0x63
 8002400:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <MX_TIM1_Init+0x138>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <MX_TIM1_Init+0x138>)
 800240a:	2263      	movs	r2, #99	; 0x63
 800240c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <MX_TIM1_Init+0x138>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <MX_TIM1_Init+0x138>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <MX_TIM1_Init+0x138>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002420:	4833      	ldr	r0, [pc, #204]	; (80024f0 <MX_TIM1_Init+0x138>)
 8002422:	f001 fd4d 	bl	8003ec0 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800242c:	f7ff fa18 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002436:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800243a:	4619      	mov	r1, r3
 800243c:	482c      	ldr	r0, [pc, #176]	; (80024f0 <MX_TIM1_Init+0x138>)
 800243e:	f002 f9a5 	bl	800478c <HAL_TIM_ConfigClockSource>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002448:	f7ff fa0a 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800244c:	4828      	ldr	r0, [pc, #160]	; (80024f0 <MX_TIM1_Init+0x138>)
 800244e:	f001 fe18 	bl	8004082 <HAL_TIM_PWM_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002458:	f7ff fa02 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002468:	4619      	mov	r1, r3
 800246a:	4821      	ldr	r0, [pc, #132]	; (80024f0 <MX_TIM1_Init+0x138>)
 800246c:	f002 fd40 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002476:	f7ff f9f3 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247a:	2360      	movs	r3, #96	; 0x60
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100/2-1;
 800247e:	2331      	movs	r3, #49	; 0x31
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002482:	2300      	movs	r3, #0
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002486:	2300      	movs	r3, #0
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	2208      	movs	r2, #8
 800249c:	4619      	mov	r1, r3
 800249e:	4814      	ldr	r0, [pc, #80]	; (80024f0 <MX_TIM1_Init+0x138>)
 80024a0:	f002 f8b2 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80024aa:	f7ff f9d9 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <MX_TIM1_Init+0x138>)
 80024d2:	f002 fd7b 	bl	8004fcc <HAL_TIMEx_ConfigBreakDeadTime>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80024dc:	f7ff f9c0 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <MX_TIM1_Init+0x138>)
 80024e2:	f000 f9b3 	bl	800284c <HAL_TIM_MspPostInit>

}
 80024e6:	bf00      	nop
 80024e8:	3758      	adds	r7, #88	; 0x58
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003a0 	.word	0x200003a0
 80024f4:	40010000 	.word	0x40010000

080024f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08e      	sub	sp, #56	; 0x38
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250c:	f107 0320 	add.w	r3, r7, #32
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	615a      	str	r2, [r3, #20]
 8002526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002528:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <MX_TIM3_Init+0xe4>)
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <MX_TIM3_Init+0xe8>)
 800252c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <MX_TIM3_Init+0xe4>)
 8002530:	2263      	movs	r2, #99	; 0x63
 8002532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <MX_TIM3_Init+0xe4>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <MX_TIM3_Init+0xe4>)
 800253c:	2263      	movs	r2, #99	; 0x63
 800253e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <MX_TIM3_Init+0xe4>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <MX_TIM3_Init+0xe4>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800254c:	4823      	ldr	r0, [pc, #140]	; (80025dc <MX_TIM3_Init+0xe4>)
 800254e:	f001 fcb7 	bl	8003ec0 <HAL_TIM_Base_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002558:	f7ff f982 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002566:	4619      	mov	r1, r3
 8002568:	481c      	ldr	r0, [pc, #112]	; (80025dc <MX_TIM3_Init+0xe4>)
 800256a:	f002 f90f 	bl	800478c <HAL_TIM_ConfigClockSource>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002574:	f7ff f974 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002578:	4818      	ldr	r0, [pc, #96]	; (80025dc <MX_TIM3_Init+0xe4>)
 800257a:	f001 fd82 	bl	8004082 <HAL_TIM_PWM_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002584:	f7ff f96c 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4619      	mov	r1, r3
 8002596:	4811      	ldr	r0, [pc, #68]	; (80025dc <MX_TIM3_Init+0xe4>)
 8002598:	f002 fcaa 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80025a2:	f7ff f95d 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a6:	2360      	movs	r3, #96	; 0x60
 80025a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100/2-1;
 80025aa:	2331      	movs	r3, #49	; 0x31
 80025ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2204      	movs	r2, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <MX_TIM3_Init+0xe4>)
 80025be:	f002 f823 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80025c8:	f7ff f94a 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <MX_TIM3_Init+0xe4>)
 80025ce:	f000 f93d 	bl	800284c <HAL_TIM_MspPostInit>

}
 80025d2:	bf00      	nop
 80025d4:	3738      	adds	r7, #56	; 0x38
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000358 	.word	0x20000358
 80025e0:	40000400 	.word	0x40000400

080025e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	; 0x38
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <MX_TIM4_Init+0xe8>)
 8002618:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <MX_TIM4_Init+0xe4>)
 800261c:	2263      	movs	r2, #99	; 0x63
 800261e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002626:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002628:	2263      	movs	r2, #99	; 0x63
 800262a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <MX_TIM4_Init+0xe4>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002638:	4823      	ldr	r0, [pc, #140]	; (80026c8 <MX_TIM4_Init+0xe4>)
 800263a:	f001 fc41 	bl	8003ec0 <HAL_TIM_Base_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002644:	f7ff f90c 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800264e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002652:	4619      	mov	r1, r3
 8002654:	481c      	ldr	r0, [pc, #112]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002656:	f002 f899 	bl	800478c <HAL_TIM_ConfigClockSource>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002660:	f7ff f8fe 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002664:	4818      	ldr	r0, [pc, #96]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002666:	f001 fd0c 	bl	8004082 <HAL_TIM_PWM_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002670:	f7ff f8f6 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800267c:	f107 0320 	add.w	r3, r7, #32
 8002680:	4619      	mov	r1, r3
 8002682:	4811      	ldr	r0, [pc, #68]	; (80026c8 <MX_TIM4_Init+0xe4>)
 8002684:	f002 fc34 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800268e:	f7ff f8e7 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002692:	2360      	movs	r3, #96	; 0x60
 8002694:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100/2-1;
 8002696:	2331      	movs	r3, #49	; 0x31
 8002698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2204      	movs	r2, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4807      	ldr	r0, [pc, #28]	; (80026c8 <MX_TIM4_Init+0xe4>)
 80026aa:	f001 ffad 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80026b4:	f7ff f8d4 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <MX_TIM4_Init+0xe4>)
 80026ba:	f000 f8c7 	bl	800284c <HAL_TIM_MspPostInit>

}
 80026be:	bf00      	nop
 80026c0:	3738      	adds	r7, #56	; 0x38
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002c8 	.word	0x200002c8
 80026cc:	40000800 	.word	0x40000800

080026d0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_TIM10_Init+0x40>)
 80026d6:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <MX_TIM10_Init+0x44>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000-1;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <MX_TIM10_Init+0x40>)
 80026dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_TIM10_Init+0x40>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_TIM10_Init+0x40>)
 80026ea:	22c7      	movs	r2, #199	; 0xc7
 80026ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_TIM10_Init+0x40>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_TIM10_Init+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM10_Init+0x40>)
 80026fc:	f001 fbe0 	bl	8003ec0 <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002706:	f7ff f8ab 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000310 	.word	0x20000310
 8002714:	40014400 	.word	0x40014400

08002718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_TIM_Base_MspInit+0x120>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d12e      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b40      	ldr	r3, [pc, #256]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	2018      	movs	r0, #24
 800274c:	f000 fb0d 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002750:	2018      	movs	r0, #24
 8002752:	f000 fb26 	bl	8002da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	2019      	movs	r0, #25
 800275c:	f000 fb05 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002760:	2019      	movs	r0, #25
 8002762:	f000 fb1e 	bl	8002da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201a      	movs	r0, #26
 800276c:	f000 fafd 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002770:	201a      	movs	r0, #26
 8002772:	f000 fb16 	bl	8002da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	201b      	movs	r0, #27
 800277c:	f000 faf5 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002780:	201b      	movs	r0, #27
 8002782:	f000 fb0e 	bl	8002da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002786:	e052      	b.n	800282e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <HAL_TIM_Base_MspInit+0x128>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d116      	bne.n	80027c0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	201d      	movs	r0, #29
 80027b4:	f000 fad9 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b8:	201d      	movs	r0, #29
 80027ba:	f000 faf2 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 80027be:	e036      	b.n	800282e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_TIM_Base_MspInit+0x12c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d116      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	201e      	movs	r0, #30
 80027ec:	f000 fabd 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027f0:	201e      	movs	r0, #30
 80027f2:	f000 fad6 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 80027f6:	e01a      	b.n	800282e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_TIM_Base_MspInit+0x130>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d115      	bne.n	800282e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_TIM_Base_MspInit+0x124>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2019      	movs	r0, #25
 8002824:	f000 faa1 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002828:	2019      	movs	r0, #25
 800282a:	f000 faba 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40010000 	.word	0x40010000
 800283c:	40023800 	.word	0x40023800
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800
 8002848:	40014400 	.word	0x40014400

0800284c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HAL_TIM_MspPostInit+0xf8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d11f      	bne.n	80028ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HIGH_STEP_Pin;
 800288a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIGH_STEP_GPIO_Port, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	4829      	ldr	r0, [pc, #164]	; (800294c <HAL_TIM_MspPostInit+0x100>)
 80028a8:	f000 fcd4 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028ac:	e046      	b.n	800293c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_TIM_MspPostInit+0x104>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d11e      	bne.n	80028f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6313      	str	r3, [r2, #48]	; 0x30
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROT_STEP_Pin;
 80028d4:	2320      	movs	r3, #32
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028e4:	2302      	movs	r3, #2
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROT_STEP_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4819      	ldr	r0, [pc, #100]	; (8002954 <HAL_TIM_MspPostInit+0x108>)
 80028f0:	f000 fcb0 	bl	8003254 <HAL_GPIO_Init>
}
 80028f4:	e022      	b.n	800293c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_TIM_MspPostInit+0x10c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d11d      	bne.n	800293c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_TIM_MspPostInit+0xfc>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LOW_STEP_Pin;
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800292c:	2302      	movs	r3, #2
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOW_STEP_GPIO_Port, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <HAL_TIM_MspPostInit+0x108>)
 8002938:	f000 fc8c 	bl	8003254 <HAL_GPIO_Init>
}
 800293c:	bf00      	nop
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010000 	.word	0x40010000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	40000400 	.word	0x40000400
 8002954:	40020400 	.word	0x40020400
 8002958:	40000800 	.word	0x40000800

0800295c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <MX_USART2_UART_Init+0x50>)
 8002964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002968:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800296c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002982:	220c      	movs	r2, #12
 8002984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002994:	f002 fb80 	bl	8005098 <HAL_UART_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800299e:	f7fe ff5f 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200003e8 	.word	0x200003e8
 80029ac:	40004400 	.word	0x40004400

080029b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_UART_MspInit+0x94>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d133      	bne.n	8002a3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_UART_MspInit+0x98>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_UART_MspInit+0x98>)
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_UART_MspInit+0x98>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_UART_MspInit+0x98>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <HAL_UART_MspInit+0x98>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_UART_MspInit+0x98>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <HAL_UART_MspInit+0x9c>)
 8002a26:	f000 fc15 	bl	8003254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2026      	movs	r0, #38	; 0x26
 8002a30:	f000 f99b 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a34:	2026      	movs	r0, #38	; 0x26
 8002a36:	f000 f9b4 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40004400 	.word	0x40004400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020000 	.word	0x40020000

08002a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a56:	490e      	ldr	r1, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a6c:	4c0b      	ldr	r4, [pc, #44]	; (8002a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a7a:	f7ff fc8b 	bl	8002394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f003 fb01 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a82:	f7fe fb39 	bl	80010f8 <main>
  bx  lr    
 8002a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a90:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a94:	0800b0d8 	.word	0x0800b0d8
  ldr r2, =_sbss
 8002a98:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a9c:	20000460 	.word	0x20000460

08002aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC_IRQHandler>
	...

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_Init+0x40>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_Init+0x40>)
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_Init+0x40>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 f941 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f808 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad8:	f7ff fac6 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f95d 	bl	8002dc6 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f000 f921 	bl	8002d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000008 	.word	0x20000008
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	2000042c 	.word	0x2000042c

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000042c 	.word	0x2000042c

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ce8:	f3bf 8f4f 	dsb	sy
}
 8002cec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <__NVIC_SystemReset+0x24>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <__NVIC_SystemReset+0x24>)
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_SystemReset+0x28>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cfe:	f3bf 8f4f 	dsb	sy
}
 8002d02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <__NVIC_SystemReset+0x20>
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	05fa0004 	.word	0x05fa0004

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff78 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff13 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff28 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff78 	bl	8002c7c <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff47 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff1b 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002dc2:	f7ff ff8f 	bl	8002ce4 <__NVIC_SystemReset>

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff9e 	bl	8002d10 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fec0 	bl	8002b70 <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d008      	beq.n	8002e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e052      	b.n	8002eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0216 	bic.w	r2, r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <HAL_DMA_Abort+0x62>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0208 	bic.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e60:	e013      	b.n	8002e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7ff fe85 	bl	8002b70 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d90c      	bls.n	8002e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e015      	b.n	8002eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e4      	bne.n	8002e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	223f      	movs	r2, #63	; 0x3f
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e00c      	b.n	8002ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2205      	movs	r2, #5
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002f24:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002f2a:	4b45      	ldr	r3, [pc, #276]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	e00b      	b.n	8002f4c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e002      	b.n	8002f4c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002f4c:	f000 f88e 	bl	800306c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f881 	bl	8003058 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04a      	beq.n	8002ffe <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d12d      	bne.n	8002fd4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f80:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8002f82:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f857 	bl	8003044 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a28      	ldr	r2, [pc, #160]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002f9e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fa8:	7a1b      	ldrb	r3, [r3, #8]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8c2 	bl	8003138 <FLASH_Erase_Sector>
 8002fb4:	e023      	b.n	8002ffe <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002fc8:	f000 f8fe 	bl	80031c8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f839 	bl	8003044 <HAL_FLASH_EndOfOperationCallback>
 8002fd2:	e014      	b.n	8002ffe <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d107      	bne.n	8002fee <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002fde:	f000 f8f3 	bl	80031c8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f82c 	bl	8003044 <HAL_FLASH_EndOfOperationCallback>
 8002fec:	e004      	b.n	8002ff8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f826 	bl	8003044 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 800300e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003012:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4a08      	ldr	r2, [pc, #32]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 800301a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_FLASH_IRQHandler+0x138>)
 8003026:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800302a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_FLASH_IRQHandler+0x13c>)
 800302e:	2200      	movs	r2, #0
 8003030:	761a      	strb	r2, [r3, #24]
  }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	20000430 	.word	0x20000430

08003044 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003070:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 8003086:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 800308a:	2210      	movs	r2, #16
 800308c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	4a24      	ldr	r2, [pc, #144]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80030a6:	4b22      	ldr	r3, [pc, #136]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030a8:	2220      	movs	r2, #32
 80030aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 80030fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 8003102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003106:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f043 0320 	orr.w	r3, r3, #32
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <FLASH_SetErrorCode+0xc8>)
 800311e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <FLASH_SetErrorCode+0xc4>)
 8003122:	2202      	movs	r2, #2
 8003124:	60da      	str	r2, [r3, #12]
  }
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40023c00 	.word	0x40023c00
 8003134:	20000430 	.word	0x20000430

08003138 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e010      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d103      	bne.n	8003162 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800315a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e009      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d103      	bne.n	8003170 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e002      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	490f      	ldr	r1, [pc, #60]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 8003194:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <FLASH_Erase_Sector+0x8c>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	6113      	str	r3, [r2, #16]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d017      	beq.n	8003208 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <FLASH_FlushCaches+0x88>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <FLASH_FlushCaches+0x88>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <FLASH_FlushCaches+0x88>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <FLASH_FlushCaches+0x88>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <FLASH_FlushCaches+0x88>)
 800321a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <FLASH_FlushCaches+0x88>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <FLASH_FlushCaches+0x88>)
 8003226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <FLASH_FlushCaches+0x88>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a07      	ldr	r2, [pc, #28]	; (8003250 <FLASH_FlushCaches+0x88>)
 8003232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003236:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <FLASH_FlushCaches+0x88>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <FLASH_FlushCaches+0x88>)
 800323e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003242:	6013      	str	r3, [r2, #0]
  }
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e159      	b.n	8003524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 8148 	bne.w	800351e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a2 	beq.w	800351e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_GPIO_Init+0x2ec>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a49      	ldr	r2, [pc, #292]	; (8003544 <HAL_GPIO_Init+0x2f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d019      	beq.n	8003456 <HAL_GPIO_Init+0x202>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a48      	ldr	r2, [pc, #288]	; (8003548 <HAL_GPIO_Init+0x2f4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_GPIO_Init+0x1fe>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a47      	ldr	r2, [pc, #284]	; (800354c <HAL_GPIO_Init+0x2f8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00d      	beq.n	800344e <HAL_GPIO_Init+0x1fa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_GPIO_Init+0x2fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <HAL_GPIO_Init+0x1f6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a45      	ldr	r2, [pc, #276]	; (8003554 <HAL_GPIO_Init+0x300>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_GPIO_Init+0x1f2>
 8003442:	2304      	movs	r3, #4
 8003444:	e008      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003446:	2307      	movs	r3, #7
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003456:	2300      	movs	r3, #0
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	4093      	lsls	r3, r2
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003468:	4935      	ldr	r1, [pc, #212]	; (8003540 <HAL_GPIO_Init+0x2ec>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_GPIO_Init+0x304>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800349a:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <HAL_GPIO_Init+0x304>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_GPIO_Init+0x304>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	f67f aea2 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f806 	bl	80035c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e264      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d075      	beq.n	80036e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	4ba3      	ldr	r3, [pc, #652]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00c      	beq.n	800361c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4ba0      	ldr	r3, [pc, #640]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800360a:	2b08      	cmp	r3, #8
 800360c:	d112      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b9d      	ldr	r3, [pc, #628]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b99      	ldr	r3, [pc, #612]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05b      	beq.n	80036e0 <HAL_RCC_OscConfig+0x108>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d157      	bne.n	80036e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e23f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x74>
 800363e:	4b91      	ldr	r3, [pc, #580]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a90      	ldr	r2, [pc, #576]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x98>
 8003656:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a8a      	ldr	r2, [pc, #552]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a87      	ldr	r2, [pc, #540]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 8003670:	4b84      	ldr	r3, [pc, #528]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a83      	ldr	r2, [pc, #524]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b81      	ldr	r3, [pc, #516]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a80      	ldr	r2, [pc, #512]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7ff fa6e 	bl	8002b70 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7ff fa6a 	bl	8002b70 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e204      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b76      	ldr	r3, [pc, #472]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xc0>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7ff fa5a 	bl	8002b70 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7ff fa56 	bl	8002b70 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1f0      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b6c      	ldr	r3, [pc, #432]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0xe8>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	4b65      	ldr	r3, [pc, #404]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003702:	2b08      	cmp	r3, #8
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1c4      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b56      	ldr	r3, [pc, #344]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4952      	ldr	r1, [pc, #328]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <HAL_RCC_OscConfig+0x2b0>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7ff fa0f 	bl	8002b70 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003756:	f7ff fa0b 	bl	8002b70 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1a5      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4940      	ldr	r1, [pc, #256]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_OscConfig+0x2b0>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7ff f9ee 	bl	8002b70 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003798:	f7ff f9ea 	bl	8002b70 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e184      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d030      	beq.n	8003824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <HAL_RCC_OscConfig+0x2b4>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7ff f9ce 	bl	8002b70 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d8:	f7ff f9ca 	bl	8002b70 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e164      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x200>
 80037f6:	e015      	b.n	8003824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x2b4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fe:	f7ff f9b7 	bl	8002b70 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003806:	f7ff f9b3 	bl	8002b70 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e14d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80a0 	beq.w	8003972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_OscConfig+0x2b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d121      	bne.n	80038b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x2b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_RCC_OscConfig+0x2b8>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7ff f979 	bl	8002b70 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e011      	b.n	80038a6 <HAL_RCC_OscConfig+0x2ce>
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	42470000 	.word	0x42470000
 800388c:	42470e80 	.word	0x42470e80
 8003890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7ff f96c 	bl	8002b70 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e106      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b85      	ldr	r3, [pc, #532]	; (8003abc <HAL_RCC_OscConfig+0x4e4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d106      	bne.n	80038c8 <HAL_RCC_OscConfig+0x2f0>
 80038ba:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a80      	ldr	r2, [pc, #512]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	e01c      	b.n	8003902 <HAL_RCC_OscConfig+0x32a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x312>
 80038d0:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a7a      	ldr	r2, [pc, #488]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	e00b      	b.n	8003902 <HAL_RCC_OscConfig+0x32a>
 80038ea:	4b75      	ldr	r3, [pc, #468]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a74      	ldr	r2, [pc, #464]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a71      	ldr	r2, [pc, #452]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7ff f931 	bl	8002b70 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7ff f92d 	bl	8002b70 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0c5      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <HAL_RCC_OscConfig+0x33a>
 8003934:	e014      	b.n	8003960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7ff f91b 	bl	8002b70 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7ff f917 	bl	8002b70 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0af      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a55      	ldr	r2, [pc, #340]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 809b 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d05c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d141      	bne.n	8003a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003990:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7ff f8eb 	bl	8002b70 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7ff f8e7 	bl	8002b70 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e081      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	019b      	lsls	r3, r3, #6
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	4937      	ldr	r1, [pc, #220]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7ff f8c0 	bl	8002b70 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f4:	f7ff f8bc 	bl	8002b70 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e056      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x41c>
 8003a12:	e04e      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7ff f8a9 	bl	8002b70 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7ff f8a5 	bl	8002b70 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e03f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x44a>
 8003a40:	e037      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e032      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d028      	beq.n	8003aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d121      	bne.n	8003aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d11a      	bne.n	8003aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	42470060 	.word	0x42470060

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0cc      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90c      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d044      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4934      	ldr	r1, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fe ffda 	bl	8002b70 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fe ffd6 	bl	8002b70 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20c      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe ff3a 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800ac54 	.word	0x0800ac54
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cac:	4b67      	ldr	r3, [pc, #412]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	f200 80bd 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc6:	e0b7      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cca:	60bb      	str	r3, [r7, #8]
       break;
 8003ccc:	e0b7      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cce:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cd0:	60bb      	str	r3, [r7, #8]
      break;
 8003cd2:	e0b4      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4b5d      	ldr	r3, [pc, #372]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cde:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04d      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b58      	ldr	r3, [pc, #352]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	ea02 0800 	and.w	r8, r2, r0
 8003d02:	ea03 0901 	and.w	r9, r3, r1
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	014b      	lsls	r3, r1, #5
 8003d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d18:	0142      	lsls	r2, r0, #5
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	ebb0 0008 	subs.w	r0, r0, r8
 8003d22:	eb61 0109 	sbc.w	r1, r1, r9
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	018b      	lsls	r3, r1, #6
 8003d30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d34:	0182      	lsls	r2, r0, #6
 8003d36:	1a12      	subs	r2, r2, r0
 8003d38:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3c:	f04f 0000 	mov.w	r0, #0
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	00d9      	lsls	r1, r3, #3
 8003d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d4a:	00d0      	lsls	r0, r2, #3
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	eb12 0208 	adds.w	r2, r2, r8
 8003d54:	eb43 0309 	adc.w	r3, r3, r9
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	0259      	lsls	r1, r3, #9
 8003d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d66:	0250      	lsls	r0, r2, #9
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f7fc ff76 	bl	8000c68 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e04a      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	ea02 0400 	and.w	r4, r2, r0
 8003d9e:	ea03 0501 	and.w	r5, r3, r1
 8003da2:	4620      	mov	r0, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	014b      	lsls	r3, r1, #5
 8003db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003db4:	0142      	lsls	r2, r0, #5
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	1b00      	subs	r0, r0, r4
 8003dbc:	eb61 0105 	sbc.w	r1, r1, r5
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	018b      	lsls	r3, r1, #6
 8003dca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dce:	0182      	lsls	r2, r0, #6
 8003dd0:	1a12      	subs	r2, r2, r0
 8003dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd6:	f04f 0000 	mov.w	r0, #0
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	00d9      	lsls	r1, r3, #3
 8003de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de4:	00d0      	lsls	r0, r2, #3
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	1912      	adds	r2, r2, r4
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	0299      	lsls	r1, r3, #10
 8003dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dfe:	0290      	lsls	r0, r2, #10
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f7fc ff2a 	bl	8000c68 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
      break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e3a:	60bb      	str	r3, [r7, #8]
      break;
 8003e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	007a1200 	.word	0x007a1200

08003e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e74:	f7ff fff0 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	0800ac64 	.word	0x0800ac64

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffdc 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0b5b      	lsrs	r3, r3, #13
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800ac64 	.word	0x0800ac64

08003ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e041      	b.n	8003f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe fc16 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f000 fd2a 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e044      	b.n	8004002 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d013      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <HAL_TIM_Base_Start_IT+0xb4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_TIM_Base_Start_IT+0xb8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <HAL_TIM_Base_Start_IT+0xbc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a16      	ldr	r2, [pc, #88]	; (8004020 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d111      	bne.n	8003ff0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d010      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	e007      	b.n	8004000 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40014000 	.word	0x40014000

08004024 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	f241 1311 	movw	r3, #4369	; 0x1111
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10f      	bne.n	800406c <HAL_TIM_Base_Stop_IT+0x48>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	f240 4344 	movw	r3, #1092	; 0x444
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_TIM_Base_Stop_IT+0x48>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e041      	b.n	8004118 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f839 	bl	8004120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f000 fc49 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	6839      	ldr	r1, [r7, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 feac 	bl	8004ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <HAL_TIM_PWM_Stop+0xc4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d117      	bne.n	8004186 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_TIM_PWM_Stop+0x52>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	f240 4344 	movw	r3, #1092	; 0x444
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <HAL_TIM_PWM_Stop+0x52>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <HAL_TIM_PWM_Stop+0x82>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	f240 4344 	movw	r3, #1092	; 0x444
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_PWM_Stop+0x82>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Stop+0x92>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	e013      	b.n	80041ee <HAL_TIM_PWM_Stop+0xba>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Stop+0xa2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	e00b      	b.n	80041ee <HAL_TIM_PWM_Stop+0xba>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Stop+0xb2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	e003      	b.n	80041ee <HAL_TIM_PWM_Stop+0xba>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40010000 	.word	0x40010000

080041fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_TIM_PWM_Start_IT+0x28>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e022      	b.n	800426a <HAL_TIM_PWM_Start_IT+0x6e>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d109      	bne.n	800423e <HAL_TIM_PWM_Start_IT+0x42>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	bf14      	ite	ne
 8004236:	2301      	movne	r3, #1
 8004238:	2300      	moveq	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	e015      	b.n	800426a <HAL_TIM_PWM_Start_IT+0x6e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d109      	bne.n	8004258 <HAL_TIM_PWM_Start_IT+0x5c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e008      	b.n	800426a <HAL_TIM_PWM_Start_IT+0x6e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0b3      	b.n	80043da <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start_IT+0x86>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004280:	e013      	b.n	80042aa <HAL_TIM_PWM_Start_IT+0xae>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start_IT+0x96>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004290:	e00b      	b.n	80042aa <HAL_TIM_PWM_Start_IT+0xae>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start_IT+0xa6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a0:	e003      	b.n	80042aa <HAL_TIM_PWM_Start_IT+0xae>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d841      	bhi.n	8004334 <HAL_TIM_PWM_Start_IT+0x138>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	08004335 	.word	0x08004335
 80042c0:	08004335 	.word	0x08004335
 80042c4:	08004335 	.word	0x08004335
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	08004335 	.word	0x08004335
 80042d0:	08004335 	.word	0x08004335
 80042d4:	08004335 	.word	0x08004335
 80042d8:	08004311 	.word	0x08004311
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004335 	.word	0x08004335
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004323 	.word	0x08004323
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0202 	orr.w	r2, r2, #2
 80042fa:	60da      	str	r2, [r3, #12]
      break;
 80042fc:	e01d      	b.n	800433a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0204 	orr.w	r2, r2, #4
 800430c:	60da      	str	r2, [r3, #12]
      break;
 800430e:	e014      	b.n	800433a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0208 	orr.w	r2, r2, #8
 800431e:	60da      	str	r2, [r3, #12]
      break;
 8004320:	e00b      	b.n	800433a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0210 	orr.w	r2, r2, #16
 8004330:	60da      	str	r2, [r3, #12]
      break;
 8004332:	e002      	b.n	800433a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	bf00      	nop
  }

  if (status == HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d14b      	bne.n	80043d8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fdab 	bl	8004ea4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d107      	bne.n	8004368 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004366:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d018      	beq.n	80043a4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d013      	beq.n	80043a4 <HAL_TIM_PWM_Start_IT+0x1a8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_TIM_PWM_Start_IT+0x1f0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIM_PWM_Start_IT+0x1a8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d111      	bne.n	80043c8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d010      	beq.n	80043d8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	e007      	b.n	80043d8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40014000 	.word	0x40014000

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa77 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa69 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fc ffe7 	bl	800141c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0204 	mvn.w	r2, #4
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa4d 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa3f 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc ffbd 	bl	800141c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa23 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa15 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fc ff93 	bl	800141c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0210 	mvn.w	r2, #16
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9f9 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9eb 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc ff69 	bl	800141c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fe3e 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fd6e 	bl	8005084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f9b7 	bl	8004942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0220 	mvn.w	r2, #32
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fd38 	bl	8005070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004622:	2302      	movs	r3, #2
 8004624:	e0ae      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	f200 809f 	bhi.w	8004774 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004671 	.word	0x08004671
 8004640:	08004775 	.word	0x08004775
 8004644:	08004775 	.word	0x08004775
 8004648:	08004775 	.word	0x08004775
 800464c:	080046b1 	.word	0x080046b1
 8004650:	08004775 	.word	0x08004775
 8004654:	08004775 	.word	0x08004775
 8004658:	08004775 	.word	0x08004775
 800465c:	080046f3 	.word	0x080046f3
 8004660:	08004775 	.word	0x08004775
 8004664:	08004775 	.word	0x08004775
 8004668:	08004775 	.word	0x08004775
 800466c:	08004733 	.word	0x08004733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f9ee 	bl	8004a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0208 	orr.w	r2, r2, #8
 800468a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	619a      	str	r2, [r3, #24]
      break;
 80046ae:	e064      	b.n	800477a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fa34 	bl	8004b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6999      	ldr	r1, [r3, #24]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	619a      	str	r2, [r3, #24]
      break;
 80046f0:	e043      	b.n	800477a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa7f 	bl	8004bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0208 	orr.w	r2, r2, #8
 800470c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0204 	bic.w	r2, r2, #4
 800471c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	61da      	str	r2, [r3, #28]
      break;
 8004730:	e023      	b.n	800477a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fac9 	bl	8004cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800474c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69d9      	ldr	r1, [r3, #28]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	021a      	lsls	r2, r3, #8
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	61da      	str	r2, [r3, #28]
      break;
 8004772:	e002      	b.n	800477a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75fb      	strb	r3, [r7, #23]
      break;
 8004778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_ConfigClockSource+0x1c>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0b4      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x186>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e0:	d03e      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0xd4>
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e6:	f200 8087 	bhi.w	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	f000 8086 	beq.w	80048fe <HAL_TIM_ConfigClockSource+0x172>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d87f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d01a      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xa6>
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d87b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d050      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d877      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b50      	cmp	r3, #80	; 0x50
 800480a:	d03c      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xfa>
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d873      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d058      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d86f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d064      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d86b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d060      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d867      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05c      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d05a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	e062      	b.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f000 fb0f 	bl	8004e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	609a      	str	r2, [r3, #8]
      break;
 800485e:	e04f      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f000 faf8 	bl	8004e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e03c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	461a      	mov	r2, r3
 8004894:	f000 fa6c 	bl	8004d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2150      	movs	r1, #80	; 0x50
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fac5 	bl	8004e2e <TIM_ITRx_SetConfig>
      break;
 80048a4:	e02c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 fa8b 	bl	8004dce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2160      	movs	r1, #96	; 0x60
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fab5 	bl	8004e2e <TIM_ITRx_SetConfig>
      break;
 80048c4:	e01c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 fa4c 	bl	8004d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 faa5 	bl	8004e2e <TIM_ITRx_SetConfig>
      break;
 80048e4:	e00c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f000 fa9c 	bl	8004e2e <TIM_ITRx_SetConfig>
      break;
 80048f6:	e003      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e000      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <TIM_Base_SetConfig+0xf0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <TIM_Base_SetConfig+0xf0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <TIM_Base_SetConfig+0xf4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <TIM_Base_SetConfig+0xf8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_Base_SetConfig+0xfc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	615a      	str	r2, [r3, #20]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 0302 	bic.w	r3, r3, #2
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <TIM_OC1_SetConfig+0xc8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d10c      	bne.n	8004ace <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0308 	bic.w	r3, r3, #8
 8004aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <TIM_OC1_SetConfig+0xc8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40010000 	.word	0x40010000

08004b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0210 	bic.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0320 	bic.w	r3, r3, #32
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <TIM_OC2_SetConfig+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <TIM_OC2_SetConfig+0xd4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d113      	bne.n	8004bd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000

08004bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <TIM_OC3_SetConfig+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d10d      	bne.n	8004c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <TIM_OC3_SetConfig+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d113      	bne.n	8004ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40010000 	.word	0x40010000

08004cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <TIM_OC4_SetConfig+0x9c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000

08004d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f023 030a 	bic.w	r3, r3, #10
 8004dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b087      	sub	sp, #28
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0210 	bic.w	r2, r3, #16
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f043 0307 	orr.w	r3, r3, #7
 8004e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	021a      	lsls	r2, r3, #8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	609a      	str	r2, [r3, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e050      	b.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d013      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10c      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40014000 	.word	0x40014000

08004fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e03d      	b.n	8005064 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e03f      	b.n	800512a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fc76 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	; 0x24
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fe03 	bl	8005ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	d17c      	bne.n	800524c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_UART_Transmit+0x2c>
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e075      	b.n	800524e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UART_Transmit+0x3e>
 800516c:	2302      	movs	r3, #2
 800516e:	e06e      	b.n	800524e <HAL_UART_Transmit+0x11c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005186:	f7fd fcf3 	bl	8002b70 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d108      	bne.n	80051b4 <HAL_UART_Transmit+0x82>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e003      	b.n	80051bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051c4:	e02a      	b.n	800521c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fb47 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e036      	b.n	800524e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	3302      	adds	r3, #2
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e007      	b.n	800520e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1cf      	bne.n	80051c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fb17 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e006      	b.n	800524e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08c      	sub	sp, #48	; 0x30
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4613      	mov	r3, r2
 8005262:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b20      	cmp	r3, #32
 800526e:	d152      	bne.n	8005316 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e04b      	b.n	8005318 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800528a:	2302      	movs	r3, #2
 800528c:	e044      	b.n	8005318 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	461a      	mov	r2, r3
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fb4c 	bl	8005940 <UART_Start_Receive_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80052ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d12c      	bne.n	8005310 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d125      	bne.n	800530a <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	617b      	str	r3, [r7, #20]
   return(result);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f043 0310 	orr.w	r3, r3, #16
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f4:	627a      	str	r2, [r7, #36]	; 0x24
 80052f6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	61fb      	str	r3, [r7, #28]
   return(result);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8005308:	e002      	b.n	8005310 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005314:	e000      	b.n	8005318 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005316:	2302      	movs	r3, #2
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3730      	adds	r7, #48	; 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b0ba      	sub	sp, #232	; 0xe8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800535e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fbf7 	bl	8005b72 <UART_Receive_IT>
      return;
 8005384:	e256      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80de 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
 8005390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80d1 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0202 	orr.w	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d011      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0208 	orr.w	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81ed 	beq.w	800582a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb82 	bl	8005b72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_UART_IRQHandler+0x17a>
 8005492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04f      	beq.n	800553a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa8a 	bl	80059b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d141      	bne.n	8005532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3314      	adds	r3, #20
 80054b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3314      	adds	r3, #20
 80054d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d9      	bne.n	80054ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4a7d      	ldr	r2, [pc, #500]	; (80056fc <HAL_UART_IRQHandler+0x3dc>)
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd fcd5 	bl	8002ebe <HAL_DMA_Abort_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00e      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc f984 	bl	8001838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00a      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc f980 	bl	8001838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e006      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc f97c 	bl	8001838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005546:	e170      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	bf00      	nop
    return;
 800554a:	e16e      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 814a 	bne.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8143 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 813c 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	f040 80b4 	bne.w	8005700 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8140 	beq.w	800582e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055b6:	429a      	cmp	r2, r3
 80055b8:	f080 8139 	bcs.w	800582e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	f000 8088 	beq.w	80056e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800560a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d9      	bne.n	80055d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800562e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800564a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e1      	bne.n	800561e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800567e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800568c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e3      	bne.n	80056a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd fb7e 	bl	8002dde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fee0 	bl	80014b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f8:	e099      	b.n	800582e <HAL_UART_IRQHandler+0x50e>
 80056fa:	bf00      	nop
 80056fc:	08005a7b 	.word	0x08005a7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 808b 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800571c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8086 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800573c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800574a:	647a      	str	r2, [r7, #68]	; 0x44
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	623b      	str	r3, [r7, #32]
   return(result);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3314      	adds	r3, #20
 800577e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005782:	633a      	str	r2, [r7, #48]	; 0x30
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e3      	bne.n	800575e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0310 	bic.w	r3, r3, #16
 80057ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e3      	bne.n	80057a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fb fe68 	bl	80014b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057e8:	e023      	b.n	8005832 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f94d 	bl	8005aa2 <UART_Transmit_IT>
    return;
 8005808:	e014      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
 8005816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f98d 	bl	8005b42 <UART_EndTransmit_IT>
    return;
 8005828:	e004      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    return;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 8005832:	bf00      	nop
  }
}
 8005834:	37e8      	adds	r7, #232	; 0xe8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b090      	sub	sp, #64	; 0x40
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005874:	e050      	b.n	8005918 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d04c      	beq.n	8005918 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <UART_WaitOnFlagUntilTimeout+0x30>
 8005884:	f7fd f974 	bl	8002b70 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005890:	429a      	cmp	r2, r3
 8005892:	d241      	bcs.n	8005918 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058b4:	637a      	str	r2, [r7, #52]	; 0x34
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3314      	adds	r3, #20
 80058ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	613b      	str	r3, [r7, #16]
   return(result);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e8:	623a      	str	r2, [r7, #32]
 80058ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69f9      	ldr	r1, [r7, #28]
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e00f      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	429a      	cmp	r2, r3
 8005934:	d09f      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3740      	adds	r7, #64	; 0x40
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2222      	movs	r2, #34	; 0x22
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005984:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0220 	orr.w	r2, r2, #32
 80059a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b095      	sub	sp, #84	; 0x54
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059dc:	643a      	str	r2, [r7, #64]	; 0x40
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d119      	bne.n	8005a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	647b      	str	r3, [r7, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a4c:	61ba      	str	r2, [r7, #24]
 8005a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a6e:	bf00      	nop
 8005a70:	3754      	adds	r7, #84	; 0x54
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7fb fecf 	bl	8001838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b21      	cmp	r3, #33	; 0x21
 8005ab4:	d13e      	bne.n	8005b34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abe:	d114      	bne.n	8005aea <UART_Transmit_IT+0x48>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d110      	bne.n	8005aea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005adc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	1c9a      	adds	r2, r3, #2
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	621a      	str	r2, [r3, #32]
 8005ae8:	e008      	b.n	8005afc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	1c59      	adds	r1, r3, #1
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6211      	str	r1, [r2, #32]
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10f      	bne.n	8005b30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fe6a 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08c      	sub	sp, #48	; 0x30
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b22      	cmp	r3, #34	; 0x22
 8005b84:	f040 80ab 	bne.w	8005cde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d117      	bne.n	8005bc2 <UART_Receive_IT+0x50>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d113      	bne.n	8005bc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	1c9a      	adds	r2, r3, #2
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc0:	e026      	b.n	8005c10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d007      	beq.n	8005be6 <UART_Receive_IT+0x74>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <UART_Receive_IT+0x82>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e008      	b.n	8005c06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d15a      	bne.n	8005cda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0220 	bic.w	r2, r2, #32
 8005c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d135      	bne.n	8005cd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	623a      	str	r2, [r7, #32]
 8005c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	69f9      	ldr	r1, [r7, #28]
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d10a      	bne.n	8005cc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fb fbf5 	bl	80014b8 <HAL_UARTEx_RxEventCallback>
 8005cce:	e002      	b.n	8005cd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fdbd 	bl	8005850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e002      	b.n	8005ce0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3730      	adds	r7, #48	; 0x30
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	b09f      	sub	sp, #124	; 0x7c
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfe:	68d9      	ldr	r1, [r3, #12]
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	ea40 0301 	orr.w	r3, r0, r1
 8005d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d2c:	f021 010c 	bic.w	r1, r1, #12
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d36:	430b      	orrs	r3, r1
 8005d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	6999      	ldr	r1, [r3, #24]
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	ea40 0301 	orr.w	r3, r0, r1
 8005d50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4bc5      	ldr	r3, [pc, #788]	; (800606c <UART_SetConfig+0x384>)
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d004      	beq.n	8005d66 <UART_SetConfig+0x7e>
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4bc3      	ldr	r3, [pc, #780]	; (8006070 <UART_SetConfig+0x388>)
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d103      	bne.n	8005d6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d66:	f7fe f897 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8005d6a:	6778      	str	r0, [r7, #116]	; 0x74
 8005d6c:	e002      	b.n	8005d74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d6e:	f7fe f87f 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8005d72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7c:	f040 80b6 	bne.w	8005eec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d82:	461c      	mov	r4, r3
 8005d84:	f04f 0500 	mov.w	r5, #0
 8005d88:	4622      	mov	r2, r4
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	1891      	adds	r1, r2, r2
 8005d8e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d90:	415b      	adcs	r3, r3
 8005d92:	647b      	str	r3, [r7, #68]	; 0x44
 8005d94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d98:	1912      	adds	r2, r2, r4
 8005d9a:	eb45 0303 	adc.w	r3, r5, r3
 8005d9e:	f04f 0000 	mov.w	r0, #0
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	00d9      	lsls	r1, r3, #3
 8005da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dac:	00d0      	lsls	r0, r2, #3
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	1911      	adds	r1, r2, r4
 8005db4:	6639      	str	r1, [r7, #96]	; 0x60
 8005db6:	416b      	adcs	r3, r5
 8005db8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dd4:	f7fa ff48 	bl	8000c68 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4ba5      	ldr	r3, [pc, #660]	; (8006074 <UART_SetConfig+0x38c>)
 8005dde:	fba3 2302 	umull	r2, r3, r3, r2
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	011e      	lsls	r6, r3, #4
 8005de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de8:	461c      	mov	r4, r3
 8005dea:	f04f 0500 	mov.w	r5, #0
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	1891      	adds	r1, r2, r2
 8005df4:	6339      	str	r1, [r7, #48]	; 0x30
 8005df6:	415b      	adcs	r3, r3
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dfe:	1912      	adds	r2, r2, r4
 8005e00:	eb45 0303 	adc.w	r3, r5, r3
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	00d9      	lsls	r1, r3, #3
 8005e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e12:	00d0      	lsls	r0, r2, #3
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	1911      	adds	r1, r2, r4
 8005e1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e1c:	416b      	adcs	r3, r5
 8005e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	461a      	mov	r2, r3
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	1891      	adds	r1, r2, r2
 8005e2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e2e:	415b      	adcs	r3, r3
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e3a:	f7fa ff15 	bl	8000c68 <__aeabi_uldivmod>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4b8c      	ldr	r3, [pc, #560]	; (8006074 <UART_SetConfig+0x38c>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	2164      	movs	r1, #100	; 0x64
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	3332      	adds	r3, #50	; 0x32
 8005e56:	4a87      	ldr	r2, [pc, #540]	; (8006074 <UART_SetConfig+0x38c>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e64:	441e      	add	r6, r3
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f04f 0100 	mov.w	r1, #0
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	1894      	adds	r4, r2, r2
 8005e74:	623c      	str	r4, [r7, #32]
 8005e76:	415b      	adcs	r3, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e7e:	1812      	adds	r2, r2, r0
 8005e80:	eb41 0303 	adc.w	r3, r1, r3
 8005e84:	f04f 0400 	mov.w	r4, #0
 8005e88:	f04f 0500 	mov.w	r5, #0
 8005e8c:	00dd      	lsls	r5, r3, #3
 8005e8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e92:	00d4      	lsls	r4, r2, #3
 8005e94:	4622      	mov	r2, r4
 8005e96:	462b      	mov	r3, r5
 8005e98:	1814      	adds	r4, r2, r0
 8005e9a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	1891      	adds	r1, r2, r2
 8005eac:	61b9      	str	r1, [r7, #24]
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005eba:	f7fa fed5 	bl	8000c68 <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4b6c      	ldr	r3, [pc, #432]	; (8006074 <UART_SetConfig+0x38c>)
 8005ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	2164      	movs	r1, #100	; 0x64
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	3332      	adds	r3, #50	; 0x32
 8005ed6:	4a67      	ldr	r2, [pc, #412]	; (8006074 <UART_SetConfig+0x38c>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	f003 0207 	and.w	r2, r3, #7
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4432      	add	r2, r6
 8005ee8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eea:	e0b9      	b.n	8006060 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eee:	461c      	mov	r4, r3
 8005ef0:	f04f 0500 	mov.w	r5, #0
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	1891      	adds	r1, r2, r2
 8005efa:	6139      	str	r1, [r7, #16]
 8005efc:	415b      	adcs	r3, r3
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f04:	1912      	adds	r2, r2, r4
 8005f06:	eb45 0303 	adc.w	r3, r5, r3
 8005f0a:	f04f 0000 	mov.w	r0, #0
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	00d9      	lsls	r1, r3, #3
 8005f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f18:	00d0      	lsls	r0, r2, #3
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	eb12 0804 	adds.w	r8, r2, r4
 8005f22:	eb43 0905 	adc.w	r9, r3, r5
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f3e:	0082      	lsls	r2, r0, #2
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fe90 	bl	8000c68 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b49      	ldr	r3, [pc, #292]	; (8006074 <UART_SetConfig+0x38c>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011e      	lsls	r6, r3, #4
 8005f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f04f 0100 	mov.w	r1, #0
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	1894      	adds	r4, r2, r2
 8005f64:	60bc      	str	r4, [r7, #8]
 8005f66:	415b      	adcs	r3, r3
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f6e:	1812      	adds	r2, r2, r0
 8005f70:	eb41 0303 	adc.w	r3, r1, r3
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	f04f 0500 	mov.w	r5, #0
 8005f7c:	00dd      	lsls	r5, r3, #3
 8005f7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f82:	00d4      	lsls	r4, r2, #3
 8005f84:	4622      	mov	r2, r4
 8005f86:	462b      	mov	r3, r5
 8005f88:	1814      	adds	r4, r2, r0
 8005f8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f8c:	414b      	adcs	r3, r1
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	008b      	lsls	r3, r1, #2
 8005fa4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fa8:	0082      	lsls	r2, r0, #2
 8005faa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fae:	f7fa fe5b 	bl	8000c68 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <UART_SetConfig+0x38c>)
 8005fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	2164      	movs	r1, #100	; 0x64
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	3332      	adds	r3, #50	; 0x32
 8005fca:	4a2a      	ldr	r2, [pc, #168]	; (8006074 <UART_SetConfig+0x38c>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd6:	441e      	add	r6, r3
 8005fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	1894      	adds	r4, r2, r2
 8005fe6:	603c      	str	r4, [r7, #0]
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff0:	1812      	adds	r2, r2, r0
 8005ff2:	eb41 0303 	adc.w	r3, r1, r3
 8005ff6:	f04f 0400 	mov.w	r4, #0
 8005ffa:	f04f 0500 	mov.w	r5, #0
 8005ffe:	00dd      	lsls	r5, r3, #3
 8006000:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006004:	00d4      	lsls	r4, r2, #3
 8006006:	4622      	mov	r2, r4
 8006008:	462b      	mov	r3, r5
 800600a:	eb12 0a00 	adds.w	sl, r2, r0
 800600e:	eb43 0b01 	adc.w	fp, r3, r1
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	f04f 0100 	mov.w	r1, #0
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	008b      	lsls	r3, r1, #2
 8006026:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800602a:	0082      	lsls	r2, r0, #2
 800602c:	4650      	mov	r0, sl
 800602e:	4659      	mov	r1, fp
 8006030:	f7fa fe1a 	bl	8000c68 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <UART_SetConfig+0x38c>)
 800603a:	fba3 1302 	umull	r1, r3, r3, r2
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2164      	movs	r1, #100	; 0x64
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	3332      	adds	r3, #50	; 0x32
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <UART_SetConfig+0x38c>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4432      	add	r2, r6
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	377c      	adds	r7, #124	; 0x7c
 8006064:	46bd      	mov	sp, r7
 8006066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606a:	bf00      	nop
 800606c:	40011000 	.word	0x40011000
 8006070:	40011400 	.word	0x40011400
 8006074:	51eb851f 	.word	0x51eb851f

08006078 <__errno>:
 8006078:	4b01      	ldr	r3, [pc, #4]	; (8006080 <__errno+0x8>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4d0d      	ldr	r5, [pc, #52]	; (80060bc <__libc_init_array+0x38>)
 8006088:	4c0d      	ldr	r4, [pc, #52]	; (80060c0 <__libc_init_array+0x3c>)
 800608a:	1b64      	subs	r4, r4, r5
 800608c:	10a4      	asrs	r4, r4, #2
 800608e:	2600      	movs	r6, #0
 8006090:	42a6      	cmp	r6, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	4d0b      	ldr	r5, [pc, #44]	; (80060c4 <__libc_init_array+0x40>)
 8006096:	4c0c      	ldr	r4, [pc, #48]	; (80060c8 <__libc_init_array+0x44>)
 8006098:	f004 fd08 	bl	800aaac <_init>
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	2600      	movs	r6, #0
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ac:	4798      	blx	r3
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b6:	4798      	blx	r3
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	0800b0d0 	.word	0x0800b0d0
 80060c0:	0800b0d0 	.word	0x0800b0d0
 80060c4:	0800b0d0 	.word	0x0800b0d0
 80060c8:	0800b0d4 	.word	0x0800b0d4

080060cc <memcpy>:
 80060cc:	440a      	add	r2, r1
 80060ce:	4291      	cmp	r1, r2
 80060d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d4:	d100      	bne.n	80060d8 <memcpy+0xc>
 80060d6:	4770      	bx	lr
 80060d8:	b510      	push	{r4, lr}
 80060da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e2:	4291      	cmp	r1, r2
 80060e4:	d1f9      	bne.n	80060da <memcpy+0xe>
 80060e6:	bd10      	pop	{r4, pc}

080060e8 <memset>:
 80060e8:	4402      	add	r2, r0
 80060ea:	4603      	mov	r3, r0
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d100      	bne.n	80060f2 <memset+0xa>
 80060f0:	4770      	bx	lr
 80060f2:	f803 1b01 	strb.w	r1, [r3], #1
 80060f6:	e7f9      	b.n	80060ec <memset+0x4>

080060f8 <_scanf_float>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b087      	sub	sp, #28
 80060fe:	4617      	mov	r7, r2
 8006100:	9303      	str	r3, [sp, #12]
 8006102:	688b      	ldr	r3, [r1, #8]
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800610a:	bf83      	ittte	hi
 800610c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006110:	195b      	addhi	r3, r3, r5
 8006112:	9302      	strhi	r3, [sp, #8]
 8006114:	2300      	movls	r3, #0
 8006116:	bf86      	itte	hi
 8006118:	f240 135d 	movwhi	r3, #349	; 0x15d
 800611c:	608b      	strhi	r3, [r1, #8]
 800611e:	9302      	strls	r3, [sp, #8]
 8006120:	680b      	ldr	r3, [r1, #0]
 8006122:	468b      	mov	fp, r1
 8006124:	2500      	movs	r5, #0
 8006126:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800612a:	f84b 3b1c 	str.w	r3, [fp], #28
 800612e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006132:	4680      	mov	r8, r0
 8006134:	460c      	mov	r4, r1
 8006136:	465e      	mov	r6, fp
 8006138:	46aa      	mov	sl, r5
 800613a:	46a9      	mov	r9, r5
 800613c:	9501      	str	r5, [sp, #4]
 800613e:	68a2      	ldr	r2, [r4, #8]
 8006140:	b152      	cbz	r2, 8006158 <_scanf_float+0x60>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b4e      	cmp	r3, #78	; 0x4e
 8006148:	d864      	bhi.n	8006214 <_scanf_float+0x11c>
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d83c      	bhi.n	80061c8 <_scanf_float+0xd0>
 800614e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006152:	b2c8      	uxtb	r0, r1
 8006154:	280e      	cmp	r0, #14
 8006156:	d93a      	bls.n	80061ce <_scanf_float+0xd6>
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	d003      	beq.n	8006166 <_scanf_float+0x6e>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800616a:	f1ba 0f01 	cmp.w	sl, #1
 800616e:	f200 8113 	bhi.w	8006398 <_scanf_float+0x2a0>
 8006172:	455e      	cmp	r6, fp
 8006174:	f200 8105 	bhi.w	8006382 <_scanf_float+0x28a>
 8006178:	2501      	movs	r5, #1
 800617a:	4628      	mov	r0, r5
 800617c:	b007      	add	sp, #28
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006186:	2a0d      	cmp	r2, #13
 8006188:	d8e6      	bhi.n	8006158 <_scanf_float+0x60>
 800618a:	a101      	add	r1, pc, #4	; (adr r1, 8006190 <_scanf_float+0x98>)
 800618c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006190:	080062cf 	.word	0x080062cf
 8006194:	08006159 	.word	0x08006159
 8006198:	08006159 	.word	0x08006159
 800619c:	08006159 	.word	0x08006159
 80061a0:	0800632f 	.word	0x0800632f
 80061a4:	08006307 	.word	0x08006307
 80061a8:	08006159 	.word	0x08006159
 80061ac:	08006159 	.word	0x08006159
 80061b0:	080062dd 	.word	0x080062dd
 80061b4:	08006159 	.word	0x08006159
 80061b8:	08006159 	.word	0x08006159
 80061bc:	08006159 	.word	0x08006159
 80061c0:	08006159 	.word	0x08006159
 80061c4:	08006295 	.word	0x08006295
 80061c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061cc:	e7db      	b.n	8006186 <_scanf_float+0x8e>
 80061ce:	290e      	cmp	r1, #14
 80061d0:	d8c2      	bhi.n	8006158 <_scanf_float+0x60>
 80061d2:	a001      	add	r0, pc, #4	; (adr r0, 80061d8 <_scanf_float+0xe0>)
 80061d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061d8:	08006287 	.word	0x08006287
 80061dc:	08006159 	.word	0x08006159
 80061e0:	08006287 	.word	0x08006287
 80061e4:	0800631b 	.word	0x0800631b
 80061e8:	08006159 	.word	0x08006159
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006271 	.word	0x08006271
 80061f4:	08006271 	.word	0x08006271
 80061f8:	08006271 	.word	0x08006271
 80061fc:	08006271 	.word	0x08006271
 8006200:	08006271 	.word	0x08006271
 8006204:	08006271 	.word	0x08006271
 8006208:	08006271 	.word	0x08006271
 800620c:	08006271 	.word	0x08006271
 8006210:	08006271 	.word	0x08006271
 8006214:	2b6e      	cmp	r3, #110	; 0x6e
 8006216:	d809      	bhi.n	800622c <_scanf_float+0x134>
 8006218:	2b60      	cmp	r3, #96	; 0x60
 800621a:	d8b2      	bhi.n	8006182 <_scanf_float+0x8a>
 800621c:	2b54      	cmp	r3, #84	; 0x54
 800621e:	d077      	beq.n	8006310 <_scanf_float+0x218>
 8006220:	2b59      	cmp	r3, #89	; 0x59
 8006222:	d199      	bne.n	8006158 <_scanf_float+0x60>
 8006224:	2d07      	cmp	r5, #7
 8006226:	d197      	bne.n	8006158 <_scanf_float+0x60>
 8006228:	2508      	movs	r5, #8
 800622a:	e029      	b.n	8006280 <_scanf_float+0x188>
 800622c:	2b74      	cmp	r3, #116	; 0x74
 800622e:	d06f      	beq.n	8006310 <_scanf_float+0x218>
 8006230:	2b79      	cmp	r3, #121	; 0x79
 8006232:	e7f6      	b.n	8006222 <_scanf_float+0x12a>
 8006234:	6821      	ldr	r1, [r4, #0]
 8006236:	05c8      	lsls	r0, r1, #23
 8006238:	d51a      	bpl.n	8006270 <_scanf_float+0x178>
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006240:	6021      	str	r1, [r4, #0]
 8006242:	f109 0901 	add.w	r9, r9, #1
 8006246:	b11b      	cbz	r3, 8006250 <_scanf_float+0x158>
 8006248:	3b01      	subs	r3, #1
 800624a:	3201      	adds	r2, #1
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	60a2      	str	r2, [r4, #8]
 8006250:	68a3      	ldr	r3, [r4, #8]
 8006252:	3b01      	subs	r3, #1
 8006254:	60a3      	str	r3, [r4, #8]
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	f340 8084 	ble.w	8006370 <_scanf_float+0x278>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	e766      	b.n	800613e <_scanf_float+0x46>
 8006270:	eb1a 0f05 	cmn.w	sl, r5
 8006274:	f47f af70 	bne.w	8006158 <_scanf_float+0x60>
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	f806 3b01 	strb.w	r3, [r6], #1
 8006284:	e7e4      	b.n	8006250 <_scanf_float+0x158>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	0610      	lsls	r0, r2, #24
 800628a:	f57f af65 	bpl.w	8006158 <_scanf_float+0x60>
 800628e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006292:	e7f4      	b.n	800627e <_scanf_float+0x186>
 8006294:	f1ba 0f00 	cmp.w	sl, #0
 8006298:	d10e      	bne.n	80062b8 <_scanf_float+0x1c0>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	d10e      	bne.n	80062be <_scanf_float+0x1c6>
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062aa:	d108      	bne.n	80062be <_scanf_float+0x1c6>
 80062ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	f04f 0a01 	mov.w	sl, #1
 80062b6:	e7e3      	b.n	8006280 <_scanf_float+0x188>
 80062b8:	f1ba 0f02 	cmp.w	sl, #2
 80062bc:	d055      	beq.n	800636a <_scanf_float+0x272>
 80062be:	2d01      	cmp	r5, #1
 80062c0:	d002      	beq.n	80062c8 <_scanf_float+0x1d0>
 80062c2:	2d04      	cmp	r5, #4
 80062c4:	f47f af48 	bne.w	8006158 <_scanf_float+0x60>
 80062c8:	3501      	adds	r5, #1
 80062ca:	b2ed      	uxtb	r5, r5
 80062cc:	e7d8      	b.n	8006280 <_scanf_float+0x188>
 80062ce:	f1ba 0f01 	cmp.w	sl, #1
 80062d2:	f47f af41 	bne.w	8006158 <_scanf_float+0x60>
 80062d6:	f04f 0a02 	mov.w	sl, #2
 80062da:	e7d1      	b.n	8006280 <_scanf_float+0x188>
 80062dc:	b97d      	cbnz	r5, 80062fe <_scanf_float+0x206>
 80062de:	f1b9 0f00 	cmp.w	r9, #0
 80062e2:	f47f af3c 	bne.w	800615e <_scanf_float+0x66>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062f0:	f47f af39 	bne.w	8006166 <_scanf_float+0x6e>
 80062f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	2501      	movs	r5, #1
 80062fc:	e7c0      	b.n	8006280 <_scanf_float+0x188>
 80062fe:	2d03      	cmp	r5, #3
 8006300:	d0e2      	beq.n	80062c8 <_scanf_float+0x1d0>
 8006302:	2d05      	cmp	r5, #5
 8006304:	e7de      	b.n	80062c4 <_scanf_float+0x1cc>
 8006306:	2d02      	cmp	r5, #2
 8006308:	f47f af26 	bne.w	8006158 <_scanf_float+0x60>
 800630c:	2503      	movs	r5, #3
 800630e:	e7b7      	b.n	8006280 <_scanf_float+0x188>
 8006310:	2d06      	cmp	r5, #6
 8006312:	f47f af21 	bne.w	8006158 <_scanf_float+0x60>
 8006316:	2507      	movs	r5, #7
 8006318:	e7b2      	b.n	8006280 <_scanf_float+0x188>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	0591      	lsls	r1, r2, #22
 800631e:	f57f af1b 	bpl.w	8006158 <_scanf_float+0x60>
 8006322:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	f8cd 9004 	str.w	r9, [sp, #4]
 800632c:	e7a8      	b.n	8006280 <_scanf_float+0x188>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006334:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006338:	d006      	beq.n	8006348 <_scanf_float+0x250>
 800633a:	0550      	lsls	r0, r2, #21
 800633c:	f57f af0c 	bpl.w	8006158 <_scanf_float+0x60>
 8006340:	f1b9 0f00 	cmp.w	r9, #0
 8006344:	f43f af0f 	beq.w	8006166 <_scanf_float+0x6e>
 8006348:	0591      	lsls	r1, r2, #22
 800634a:	bf58      	it	pl
 800634c:	9901      	ldrpl	r1, [sp, #4]
 800634e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006352:	bf58      	it	pl
 8006354:	eba9 0101 	subpl.w	r1, r9, r1
 8006358:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800635c:	bf58      	it	pl
 800635e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	e78a      	b.n	8006280 <_scanf_float+0x188>
 800636a:	f04f 0a03 	mov.w	sl, #3
 800636e:	e787      	b.n	8006280 <_scanf_float+0x188>
 8006370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006374:	4639      	mov	r1, r7
 8006376:	4640      	mov	r0, r8
 8006378:	4798      	blx	r3
 800637a:	2800      	cmp	r0, #0
 800637c:	f43f aedf 	beq.w	800613e <_scanf_float+0x46>
 8006380:	e6ea      	b.n	8006158 <_scanf_float+0x60>
 8006382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800638a:	463a      	mov	r2, r7
 800638c:	4640      	mov	r0, r8
 800638e:	4798      	blx	r3
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	3b01      	subs	r3, #1
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	e6ec      	b.n	8006172 <_scanf_float+0x7a>
 8006398:	1e6b      	subs	r3, r5, #1
 800639a:	2b06      	cmp	r3, #6
 800639c:	d825      	bhi.n	80063ea <_scanf_float+0x2f2>
 800639e:	2d02      	cmp	r5, #2
 80063a0:	d836      	bhi.n	8006410 <_scanf_float+0x318>
 80063a2:	455e      	cmp	r6, fp
 80063a4:	f67f aee8 	bls.w	8006178 <_scanf_float+0x80>
 80063a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063b0:	463a      	mov	r2, r7
 80063b2:	4640      	mov	r0, r8
 80063b4:	4798      	blx	r3
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	e7f1      	b.n	80063a2 <_scanf_float+0x2aa>
 80063be:	9802      	ldr	r0, [sp, #8]
 80063c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063c8:	9002      	str	r0, [sp, #8]
 80063ca:	463a      	mov	r2, r7
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063da:	fa5f fa8a 	uxtb.w	sl, sl
 80063de:	f1ba 0f02 	cmp.w	sl, #2
 80063e2:	d1ec      	bne.n	80063be <_scanf_float+0x2c6>
 80063e4:	3d03      	subs	r5, #3
 80063e6:	b2ed      	uxtb	r5, r5
 80063e8:	1b76      	subs	r6, r6, r5
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	05da      	lsls	r2, r3, #23
 80063ee:	d52f      	bpl.n	8006450 <_scanf_float+0x358>
 80063f0:	055b      	lsls	r3, r3, #21
 80063f2:	d510      	bpl.n	8006416 <_scanf_float+0x31e>
 80063f4:	455e      	cmp	r6, fp
 80063f6:	f67f aebf 	bls.w	8006178 <_scanf_float+0x80>
 80063fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006402:	463a      	mov	r2, r7
 8006404:	4640      	mov	r0, r8
 8006406:	4798      	blx	r3
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	e7f1      	b.n	80063f4 <_scanf_float+0x2fc>
 8006410:	46aa      	mov	sl, r5
 8006412:	9602      	str	r6, [sp, #8]
 8006414:	e7df      	b.n	80063d6 <_scanf_float+0x2de>
 8006416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	2965      	cmp	r1, #101	; 0x65
 800641e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006422:	f106 35ff 	add.w	r5, r6, #4294967295
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	d00c      	beq.n	8006444 <_scanf_float+0x34c>
 800642a:	2945      	cmp	r1, #69	; 0x45
 800642c:	d00a      	beq.n	8006444 <_scanf_float+0x34c>
 800642e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006432:	463a      	mov	r2, r7
 8006434:	4640      	mov	r0, r8
 8006436:	4798      	blx	r3
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800643e:	3b01      	subs	r3, #1
 8006440:	1eb5      	subs	r5, r6, #2
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006448:	463a      	mov	r2, r7
 800644a:	4640      	mov	r0, r8
 800644c:	4798      	blx	r3
 800644e:	462e      	mov	r6, r5
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	f015 0510 	ands.w	r5, r5, #16
 8006456:	d158      	bne.n	800650a <_scanf_float+0x412>
 8006458:	7035      	strb	r5, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006464:	d11c      	bne.n	80064a0 <_scanf_float+0x3a8>
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	454b      	cmp	r3, r9
 800646a:	eba3 0209 	sub.w	r2, r3, r9
 800646e:	d124      	bne.n	80064ba <_scanf_float+0x3c2>
 8006470:	2200      	movs	r2, #0
 8006472:	4659      	mov	r1, fp
 8006474:	4640      	mov	r0, r8
 8006476:	f000 ff0d 	bl	8007294 <_strtod_r>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	6821      	ldr	r1, [r4, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f011 0f02 	tst.w	r1, #2
 8006484:	ec57 6b10 	vmov	r6, r7, d0
 8006488:	f103 0204 	add.w	r2, r3, #4
 800648c:	d020      	beq.n	80064d0 <_scanf_float+0x3d8>
 800648e:	9903      	ldr	r1, [sp, #12]
 8006490:	600a      	str	r2, [r1, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	e9c3 6700 	strd	r6, r7, [r3]
 8006498:	68e3      	ldr	r3, [r4, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60e3      	str	r3, [r4, #12]
 800649e:	e66c      	b.n	800617a <_scanf_float+0x82>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0e4      	beq.n	8006470 <_scanf_float+0x378>
 80064a6:	9905      	ldr	r1, [sp, #20]
 80064a8:	230a      	movs	r3, #10
 80064aa:	462a      	mov	r2, r5
 80064ac:	3101      	adds	r1, #1
 80064ae:	4640      	mov	r0, r8
 80064b0:	f000 ff7a 	bl	80073a8 <_strtol_r>
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	9e05      	ldr	r6, [sp, #20]
 80064b8:	1ac2      	subs	r2, r0, r3
 80064ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064be:	429e      	cmp	r6, r3
 80064c0:	bf28      	it	cs
 80064c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064c6:	4912      	ldr	r1, [pc, #72]	; (8006510 <_scanf_float+0x418>)
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f82b 	bl	8006524 <siprintf>
 80064ce:	e7cf      	b.n	8006470 <_scanf_float+0x378>
 80064d0:	f011 0f04 	tst.w	r1, #4
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	600a      	str	r2, [r1, #0]
 80064d8:	d1db      	bne.n	8006492 <_scanf_float+0x39a>
 80064da:	f8d3 8000 	ldr.w	r8, [r3]
 80064de:	ee10 2a10 	vmov	r2, s0
 80064e2:	ee10 0a10 	vmov	r0, s0
 80064e6:	463b      	mov	r3, r7
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa fb37 	bl	8000b5c <__aeabi_dcmpun>
 80064ee:	b128      	cbz	r0, 80064fc <_scanf_float+0x404>
 80064f0:	4808      	ldr	r0, [pc, #32]	; (8006514 <_scanf_float+0x41c>)
 80064f2:	f000 f811 	bl	8006518 <nanf>
 80064f6:	ed88 0a00 	vstr	s0, [r8]
 80064fa:	e7cd      	b.n	8006498 <_scanf_float+0x3a0>
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7fa fb62 	bl	8000bc8 <__aeabi_d2f>
 8006504:	f8c8 0000 	str.w	r0, [r8]
 8006508:	e7c6      	b.n	8006498 <_scanf_float+0x3a0>
 800650a:	2500      	movs	r5, #0
 800650c:	e635      	b.n	800617a <_scanf_float+0x82>
 800650e:	bf00      	nop
 8006510:	0800ac70 	.word	0x0800ac70
 8006514:	0800b065 	.word	0x0800b065

08006518 <nanf>:
 8006518:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006520 <nanf+0x8>
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	7fc00000 	.word	0x7fc00000

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b500      	push	{lr}
 8006528:	b09c      	sub	sp, #112	; 0x70
 800652a:	ab1d      	add	r3, sp, #116	; 0x74
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <siprintf+0x38>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4909      	ldr	r1, [pc, #36]	; (8006560 <siprintf+0x3c>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	a902      	add	r1, sp, #8
 8006548:	f002 f866 	bl	8008618 <_svfiprintf_r>
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	2000000c 	.word	0x2000000c
 8006560:	ffff0208 	.word	0xffff0208

08006564 <siscanf>:
 8006564:	b40e      	push	{r1, r2, r3}
 8006566:	b510      	push	{r4, lr}
 8006568:	b09f      	sub	sp, #124	; 0x7c
 800656a:	ac21      	add	r4, sp, #132	; 0x84
 800656c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006570:	f854 2b04 	ldr.w	r2, [r4], #4
 8006574:	9201      	str	r2, [sp, #4]
 8006576:	f8ad 101c 	strh.w	r1, [sp, #28]
 800657a:	9004      	str	r0, [sp, #16]
 800657c:	9008      	str	r0, [sp, #32]
 800657e:	f7f9 fe39 	bl	80001f4 <strlen>
 8006582:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <siscanf+0x50>)
 8006584:	9005      	str	r0, [sp, #20]
 8006586:	9009      	str	r0, [sp, #36]	; 0x24
 8006588:	930d      	str	r3, [sp, #52]	; 0x34
 800658a:	480b      	ldr	r0, [pc, #44]	; (80065b8 <siscanf+0x54>)
 800658c:	9a01      	ldr	r2, [sp, #4]
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	9403      	str	r4, [sp, #12]
 8006592:	2300      	movs	r3, #0
 8006594:	9311      	str	r3, [sp, #68]	; 0x44
 8006596:	9316      	str	r3, [sp, #88]	; 0x58
 8006598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800659c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80065a0:	a904      	add	r1, sp, #16
 80065a2:	4623      	mov	r3, r4
 80065a4:	f002 f992 	bl	80088cc <__ssvfiscanf_r>
 80065a8:	b01f      	add	sp, #124	; 0x7c
 80065aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ae:	b003      	add	sp, #12
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	080065df 	.word	0x080065df
 80065b8:	2000000c 	.word	0x2000000c

080065bc <__sread>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	460c      	mov	r4, r1
 80065c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c4:	f002 fdda 	bl	800917c <_read_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	bfab      	itete	ge
 80065cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ce:	89a3      	ldrhlt	r3, [r4, #12]
 80065d0:	181b      	addge	r3, r3, r0
 80065d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065d6:	bfac      	ite	ge
 80065d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065da:	81a3      	strhlt	r3, [r4, #12]
 80065dc:	bd10      	pop	{r4, pc}

080065de <__seofread>:
 80065de:	2000      	movs	r0, #0
 80065e0:	4770      	bx	lr

080065e2 <__swrite>:
 80065e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e6:	461f      	mov	r7, r3
 80065e8:	898b      	ldrh	r3, [r1, #12]
 80065ea:	05db      	lsls	r3, r3, #23
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4616      	mov	r6, r2
 80065f2:	d505      	bpl.n	8006600 <__swrite+0x1e>
 80065f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f8:	2302      	movs	r3, #2
 80065fa:	2200      	movs	r2, #0
 80065fc:	f001 fa68 	bl	8007ad0 <_lseek_r>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	4632      	mov	r2, r6
 800660e:	463b      	mov	r3, r7
 8006610:	4628      	mov	r0, r5
 8006612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	f000 bec9 	b.w	80073ac <_write_r>

0800661a <__sseek>:
 800661a:	b510      	push	{r4, lr}
 800661c:	460c      	mov	r4, r1
 800661e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006622:	f001 fa55 	bl	8007ad0 <_lseek_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	bf15      	itete	ne
 800662c:	6560      	strne	r0, [r4, #84]	; 0x54
 800662e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strheq	r3, [r4, #12]
 8006638:	bf18      	it	ne
 800663a:	81a3      	strhne	r3, [r4, #12]
 800663c:	bd10      	pop	{r4, pc}

0800663e <__sclose>:
 800663e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006642:	f000 bec5 	b.w	80073d0 <_close_r>

08006646 <sulp>:
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	ec45 4b10 	vmov	d0, r4, r5
 8006650:	4616      	mov	r6, r2
 8006652:	f001 fdcd 	bl	80081f0 <__ulp>
 8006656:	ec51 0b10 	vmov	r0, r1, d0
 800665a:	b17e      	cbz	r6, 800667c <sulp+0x36>
 800665c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd09      	ble.n	800667c <sulp+0x36>
 8006668:	051b      	lsls	r3, r3, #20
 800666a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800666e:	2400      	movs	r4, #0
 8006670:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7f9 ffd6 	bl	8000628 <__aeabi_dmul>
 800667c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006680 <_strtod_l>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	b0a3      	sub	sp, #140	; 0x8c
 8006686:	461f      	mov	r7, r3
 8006688:	2300      	movs	r3, #0
 800668a:	931e      	str	r3, [sp, #120]	; 0x78
 800668c:	4ba4      	ldr	r3, [pc, #656]	; (8006920 <_strtod_l+0x2a0>)
 800668e:	9219      	str	r2, [sp, #100]	; 0x64
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	4604      	mov	r4, r0
 8006696:	4618      	mov	r0, r3
 8006698:	4688      	mov	r8, r1
 800669a:	f7f9 fdab 	bl	80001f4 <strlen>
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	4605      	mov	r5, r0
 80066a4:	f04f 0b00 	mov.w	fp, #0
 80066a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80066ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	2a2b      	cmp	r2, #43	; 0x2b
 80066b2:	d04c      	beq.n	800674e <_strtod_l+0xce>
 80066b4:	d839      	bhi.n	800672a <_strtod_l+0xaa>
 80066b6:	2a0d      	cmp	r2, #13
 80066b8:	d832      	bhi.n	8006720 <_strtod_l+0xa0>
 80066ba:	2a08      	cmp	r2, #8
 80066bc:	d832      	bhi.n	8006724 <_strtod_l+0xa4>
 80066be:	2a00      	cmp	r2, #0
 80066c0:	d03c      	beq.n	800673c <_strtod_l+0xbc>
 80066c2:	2300      	movs	r3, #0
 80066c4:	930e      	str	r3, [sp, #56]	; 0x38
 80066c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80066c8:	7833      	ldrb	r3, [r6, #0]
 80066ca:	2b30      	cmp	r3, #48	; 0x30
 80066cc:	f040 80b4 	bne.w	8006838 <_strtod_l+0x1b8>
 80066d0:	7873      	ldrb	r3, [r6, #1]
 80066d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066d6:	2b58      	cmp	r3, #88	; 0x58
 80066d8:	d16c      	bne.n	80067b4 <_strtod_l+0x134>
 80066da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	ab1e      	add	r3, sp, #120	; 0x78
 80066e0:	9702      	str	r7, [sp, #8]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4a8f      	ldr	r2, [pc, #572]	; (8006924 <_strtod_l+0x2a4>)
 80066e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80066e8:	a91d      	add	r1, sp, #116	; 0x74
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fee8 	bl	80074c0 <__gethex>
 80066f0:	f010 0707 	ands.w	r7, r0, #7
 80066f4:	4605      	mov	r5, r0
 80066f6:	d005      	beq.n	8006704 <_strtod_l+0x84>
 80066f8:	2f06      	cmp	r7, #6
 80066fa:	d12a      	bne.n	8006752 <_strtod_l+0xd2>
 80066fc:	3601      	adds	r6, #1
 80066fe:	2300      	movs	r3, #0
 8006700:	961d      	str	r6, [sp, #116]	; 0x74
 8006702:	930e      	str	r3, [sp, #56]	; 0x38
 8006704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 8596 	bne.w	8007238 <_strtod_l+0xbb8>
 800670c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670e:	b1db      	cbz	r3, 8006748 <_strtod_l+0xc8>
 8006710:	4652      	mov	r2, sl
 8006712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006716:	ec43 2b10 	vmov	d0, r2, r3
 800671a:	b023      	add	sp, #140	; 0x8c
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	2a20      	cmp	r2, #32
 8006722:	d1ce      	bne.n	80066c2 <_strtod_l+0x42>
 8006724:	3301      	adds	r3, #1
 8006726:	931d      	str	r3, [sp, #116]	; 0x74
 8006728:	e7c0      	b.n	80066ac <_strtod_l+0x2c>
 800672a:	2a2d      	cmp	r2, #45	; 0x2d
 800672c:	d1c9      	bne.n	80066c2 <_strtod_l+0x42>
 800672e:	2201      	movs	r2, #1
 8006730:	920e      	str	r2, [sp, #56]	; 0x38
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	921d      	str	r2, [sp, #116]	; 0x74
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1c4      	bne.n	80066c6 <_strtod_l+0x46>
 800673c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800673e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 8576 	bne.w	8007234 <_strtod_l+0xbb4>
 8006748:	4652      	mov	r2, sl
 800674a:	465b      	mov	r3, fp
 800674c:	e7e3      	b.n	8006716 <_strtod_l+0x96>
 800674e:	2200      	movs	r2, #0
 8006750:	e7ee      	b.n	8006730 <_strtod_l+0xb0>
 8006752:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006754:	b13a      	cbz	r2, 8006766 <_strtod_l+0xe6>
 8006756:	2135      	movs	r1, #53	; 0x35
 8006758:	a820      	add	r0, sp, #128	; 0x80
 800675a:	f001 fe54 	bl	8008406 <__copybits>
 800675e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006760:	4620      	mov	r0, r4
 8006762:	f001 fa19 	bl	8007b98 <_Bfree>
 8006766:	3f01      	subs	r7, #1
 8006768:	2f05      	cmp	r7, #5
 800676a:	d807      	bhi.n	800677c <_strtod_l+0xfc>
 800676c:	e8df f007 	tbb	[pc, r7]
 8006770:	1d180b0e 	.word	0x1d180b0e
 8006774:	030e      	.short	0x030e
 8006776:	f04f 0b00 	mov.w	fp, #0
 800677a:	46da      	mov	sl, fp
 800677c:	0728      	lsls	r0, r5, #28
 800677e:	d5c1      	bpl.n	8006704 <_strtod_l+0x84>
 8006780:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006784:	e7be      	b.n	8006704 <_strtod_l+0x84>
 8006786:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800678a:	e7f7      	b.n	800677c <_strtod_l+0xfc>
 800678c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006790:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006796:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800679a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800679e:	e7ed      	b.n	800677c <_strtod_l+0xfc>
 80067a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006928 <_strtod_l+0x2a8>
 80067a4:	f04f 0a00 	mov.w	sl, #0
 80067a8:	e7e8      	b.n	800677c <_strtod_l+0xfc>
 80067aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80067ae:	f04f 3aff 	mov.w	sl, #4294967295
 80067b2:	e7e3      	b.n	800677c <_strtod_l+0xfc>
 80067b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	921d      	str	r2, [sp, #116]	; 0x74
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d0f9      	beq.n	80067b4 <_strtod_l+0x134>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d09f      	beq.n	8006704 <_strtod_l+0x84>
 80067c4:	2301      	movs	r3, #1
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067ce:	930a      	str	r3, [sp, #40]	; 0x28
 80067d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067d4:	464f      	mov	r7, r9
 80067d6:	220a      	movs	r2, #10
 80067d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80067da:	7806      	ldrb	r6, [r0, #0]
 80067dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80067e0:	b2d9      	uxtb	r1, r3
 80067e2:	2909      	cmp	r1, #9
 80067e4:	d92a      	bls.n	800683c <_strtod_l+0x1bc>
 80067e6:	9907      	ldr	r1, [sp, #28]
 80067e8:	462a      	mov	r2, r5
 80067ea:	f002 fd2b 	bl	8009244 <strncmp>
 80067ee:	b398      	cbz	r0, 8006858 <_strtod_l+0x1d8>
 80067f0:	2000      	movs	r0, #0
 80067f2:	4633      	mov	r3, r6
 80067f4:	463d      	mov	r5, r7
 80067f6:	9007      	str	r0, [sp, #28]
 80067f8:	4602      	mov	r2, r0
 80067fa:	2b65      	cmp	r3, #101	; 0x65
 80067fc:	d001      	beq.n	8006802 <_strtod_l+0x182>
 80067fe:	2b45      	cmp	r3, #69	; 0x45
 8006800:	d118      	bne.n	8006834 <_strtod_l+0x1b4>
 8006802:	b91d      	cbnz	r5, 800680c <_strtod_l+0x18c>
 8006804:	9b04      	ldr	r3, [sp, #16]
 8006806:	4303      	orrs	r3, r0
 8006808:	d098      	beq.n	800673c <_strtod_l+0xbc>
 800680a:	2500      	movs	r5, #0
 800680c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006810:	f108 0301 	add.w	r3, r8, #1
 8006814:	931d      	str	r3, [sp, #116]	; 0x74
 8006816:	f898 3001 	ldrb.w	r3, [r8, #1]
 800681a:	2b2b      	cmp	r3, #43	; 0x2b
 800681c:	d075      	beq.n	800690a <_strtod_l+0x28a>
 800681e:	2b2d      	cmp	r3, #45	; 0x2d
 8006820:	d07b      	beq.n	800691a <_strtod_l+0x29a>
 8006822:	f04f 0c00 	mov.w	ip, #0
 8006826:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800682a:	2909      	cmp	r1, #9
 800682c:	f240 8082 	bls.w	8006934 <_strtod_l+0x2b4>
 8006830:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006834:	2600      	movs	r6, #0
 8006836:	e09d      	b.n	8006974 <_strtod_l+0x2f4>
 8006838:	2300      	movs	r3, #0
 800683a:	e7c4      	b.n	80067c6 <_strtod_l+0x146>
 800683c:	2f08      	cmp	r7, #8
 800683e:	bfd8      	it	le
 8006840:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006842:	f100 0001 	add.w	r0, r0, #1
 8006846:	bfda      	itte	le
 8006848:	fb02 3301 	mlale	r3, r2, r1, r3
 800684c:	9309      	strle	r3, [sp, #36]	; 0x24
 800684e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006852:	3701      	adds	r7, #1
 8006854:	901d      	str	r0, [sp, #116]	; 0x74
 8006856:	e7bf      	b.n	80067d8 <_strtod_l+0x158>
 8006858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800685a:	195a      	adds	r2, r3, r5
 800685c:	921d      	str	r2, [sp, #116]	; 0x74
 800685e:	5d5b      	ldrb	r3, [r3, r5]
 8006860:	2f00      	cmp	r7, #0
 8006862:	d037      	beq.n	80068d4 <_strtod_l+0x254>
 8006864:	9007      	str	r0, [sp, #28]
 8006866:	463d      	mov	r5, r7
 8006868:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800686c:	2a09      	cmp	r2, #9
 800686e:	d912      	bls.n	8006896 <_strtod_l+0x216>
 8006870:	2201      	movs	r2, #1
 8006872:	e7c2      	b.n	80067fa <_strtod_l+0x17a>
 8006874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	921d      	str	r2, [sp, #116]	; 0x74
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	3001      	adds	r0, #1
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d0f8      	beq.n	8006874 <_strtod_l+0x1f4>
 8006882:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006886:	2a08      	cmp	r2, #8
 8006888:	f200 84db 	bhi.w	8007242 <_strtod_l+0xbc2>
 800688c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800688e:	9007      	str	r0, [sp, #28]
 8006890:	2000      	movs	r0, #0
 8006892:	920a      	str	r2, [sp, #40]	; 0x28
 8006894:	4605      	mov	r5, r0
 8006896:	3b30      	subs	r3, #48	; 0x30
 8006898:	f100 0201 	add.w	r2, r0, #1
 800689c:	d014      	beq.n	80068c8 <_strtod_l+0x248>
 800689e:	9907      	ldr	r1, [sp, #28]
 80068a0:	4411      	add	r1, r2
 80068a2:	9107      	str	r1, [sp, #28]
 80068a4:	462a      	mov	r2, r5
 80068a6:	eb00 0e05 	add.w	lr, r0, r5
 80068aa:	210a      	movs	r1, #10
 80068ac:	4572      	cmp	r2, lr
 80068ae:	d113      	bne.n	80068d8 <_strtod_l+0x258>
 80068b0:	182a      	adds	r2, r5, r0
 80068b2:	2a08      	cmp	r2, #8
 80068b4:	f105 0501 	add.w	r5, r5, #1
 80068b8:	4405      	add	r5, r0
 80068ba:	dc1c      	bgt.n	80068f6 <_strtod_l+0x276>
 80068bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068be:	220a      	movs	r2, #10
 80068c0:	fb02 3301 	mla	r3, r2, r1, r3
 80068c4:	9309      	str	r3, [sp, #36]	; 0x24
 80068c6:	2200      	movs	r2, #0
 80068c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	911d      	str	r1, [sp, #116]	; 0x74
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	4610      	mov	r0, r2
 80068d2:	e7c9      	b.n	8006868 <_strtod_l+0x1e8>
 80068d4:	4638      	mov	r0, r7
 80068d6:	e7d2      	b.n	800687e <_strtod_l+0x1fe>
 80068d8:	2a08      	cmp	r2, #8
 80068da:	dc04      	bgt.n	80068e6 <_strtod_l+0x266>
 80068dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80068de:	434e      	muls	r6, r1
 80068e0:	9609      	str	r6, [sp, #36]	; 0x24
 80068e2:	3201      	adds	r2, #1
 80068e4:	e7e2      	b.n	80068ac <_strtod_l+0x22c>
 80068e6:	f102 0c01 	add.w	ip, r2, #1
 80068ea:	f1bc 0f10 	cmp.w	ip, #16
 80068ee:	bfd8      	it	le
 80068f0:	fb01 f909 	mulle.w	r9, r1, r9
 80068f4:	e7f5      	b.n	80068e2 <_strtod_l+0x262>
 80068f6:	2d10      	cmp	r5, #16
 80068f8:	bfdc      	itt	le
 80068fa:	220a      	movle	r2, #10
 80068fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006900:	e7e1      	b.n	80068c6 <_strtod_l+0x246>
 8006902:	2300      	movs	r3, #0
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	2201      	movs	r2, #1
 8006908:	e77c      	b.n	8006804 <_strtod_l+0x184>
 800690a:	f04f 0c00 	mov.w	ip, #0
 800690e:	f108 0302 	add.w	r3, r8, #2
 8006912:	931d      	str	r3, [sp, #116]	; 0x74
 8006914:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006918:	e785      	b.n	8006826 <_strtod_l+0x1a6>
 800691a:	f04f 0c01 	mov.w	ip, #1
 800691e:	e7f6      	b.n	800690e <_strtod_l+0x28e>
 8006920:	0800ae54 	.word	0x0800ae54
 8006924:	0800ac84 	.word	0x0800ac84
 8006928:	7ff00000 	.word	0x7ff00000
 800692c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	911d      	str	r1, [sp, #116]	; 0x74
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b30      	cmp	r3, #48	; 0x30
 8006936:	d0f9      	beq.n	800692c <_strtod_l+0x2ac>
 8006938:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800693c:	2908      	cmp	r1, #8
 800693e:	f63f af79 	bhi.w	8006834 <_strtod_l+0x1b4>
 8006942:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006946:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	911d      	str	r1, [sp, #116]	; 0x74
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006956:	2e09      	cmp	r6, #9
 8006958:	d937      	bls.n	80069ca <_strtod_l+0x34a>
 800695a:	9e08      	ldr	r6, [sp, #32]
 800695c:	1b89      	subs	r1, r1, r6
 800695e:	2908      	cmp	r1, #8
 8006960:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006964:	dc02      	bgt.n	800696c <_strtod_l+0x2ec>
 8006966:	4576      	cmp	r6, lr
 8006968:	bfa8      	it	ge
 800696a:	4676      	movge	r6, lr
 800696c:	f1bc 0f00 	cmp.w	ip, #0
 8006970:	d000      	beq.n	8006974 <_strtod_l+0x2f4>
 8006972:	4276      	negs	r6, r6
 8006974:	2d00      	cmp	r5, #0
 8006976:	d14f      	bne.n	8006a18 <_strtod_l+0x398>
 8006978:	9904      	ldr	r1, [sp, #16]
 800697a:	4301      	orrs	r1, r0
 800697c:	f47f aec2 	bne.w	8006704 <_strtod_l+0x84>
 8006980:	2a00      	cmp	r2, #0
 8006982:	f47f aedb 	bne.w	800673c <_strtod_l+0xbc>
 8006986:	2b69      	cmp	r3, #105	; 0x69
 8006988:	d027      	beq.n	80069da <_strtod_l+0x35a>
 800698a:	dc24      	bgt.n	80069d6 <_strtod_l+0x356>
 800698c:	2b49      	cmp	r3, #73	; 0x49
 800698e:	d024      	beq.n	80069da <_strtod_l+0x35a>
 8006990:	2b4e      	cmp	r3, #78	; 0x4e
 8006992:	f47f aed3 	bne.w	800673c <_strtod_l+0xbc>
 8006996:	499e      	ldr	r1, [pc, #632]	; (8006c10 <_strtod_l+0x590>)
 8006998:	a81d      	add	r0, sp, #116	; 0x74
 800699a:	f000 ffe9 	bl	8007970 <__match>
 800699e:	2800      	cmp	r0, #0
 80069a0:	f43f aecc 	beq.w	800673c <_strtod_l+0xbc>
 80069a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b28      	cmp	r3, #40	; 0x28
 80069aa:	d12d      	bne.n	8006a08 <_strtod_l+0x388>
 80069ac:	4999      	ldr	r1, [pc, #612]	; (8006c14 <_strtod_l+0x594>)
 80069ae:	aa20      	add	r2, sp, #128	; 0x80
 80069b0:	a81d      	add	r0, sp, #116	; 0x74
 80069b2:	f000 fff1 	bl	8007998 <__hexnan>
 80069b6:	2805      	cmp	r0, #5
 80069b8:	d126      	bne.n	8006a08 <_strtod_l+0x388>
 80069ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80069c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80069c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80069c8:	e69c      	b.n	8006704 <_strtod_l+0x84>
 80069ca:	210a      	movs	r1, #10
 80069cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80069d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80069d4:	e7b9      	b.n	800694a <_strtod_l+0x2ca>
 80069d6:	2b6e      	cmp	r3, #110	; 0x6e
 80069d8:	e7db      	b.n	8006992 <_strtod_l+0x312>
 80069da:	498f      	ldr	r1, [pc, #572]	; (8006c18 <_strtod_l+0x598>)
 80069dc:	a81d      	add	r0, sp, #116	; 0x74
 80069de:	f000 ffc7 	bl	8007970 <__match>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f43f aeaa 	beq.w	800673c <_strtod_l+0xbc>
 80069e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069ea:	498c      	ldr	r1, [pc, #560]	; (8006c1c <_strtod_l+0x59c>)
 80069ec:	3b01      	subs	r3, #1
 80069ee:	a81d      	add	r0, sp, #116	; 0x74
 80069f0:	931d      	str	r3, [sp, #116]	; 0x74
 80069f2:	f000 ffbd 	bl	8007970 <__match>
 80069f6:	b910      	cbnz	r0, 80069fe <_strtod_l+0x37e>
 80069f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069fa:	3301      	adds	r3, #1
 80069fc:	931d      	str	r3, [sp, #116]	; 0x74
 80069fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006c2c <_strtod_l+0x5ac>
 8006a02:	f04f 0a00 	mov.w	sl, #0
 8006a06:	e67d      	b.n	8006704 <_strtod_l+0x84>
 8006a08:	4885      	ldr	r0, [pc, #532]	; (8006c20 <_strtod_l+0x5a0>)
 8006a0a:	f002 fbc9 	bl	80091a0 <nan>
 8006a0e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006a16:	e675      	b.n	8006704 <_strtod_l+0x84>
 8006a18:	9b07      	ldr	r3, [sp, #28]
 8006a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1c:	1af3      	subs	r3, r6, r3
 8006a1e:	2f00      	cmp	r7, #0
 8006a20:	bf08      	it	eq
 8006a22:	462f      	moveq	r7, r5
 8006a24:	2d10      	cmp	r5, #16
 8006a26:	9308      	str	r3, [sp, #32]
 8006a28:	46a8      	mov	r8, r5
 8006a2a:	bfa8      	it	ge
 8006a2c:	f04f 0810 	movge.w	r8, #16
 8006a30:	f7f9 fd80 	bl	8000534 <__aeabi_ui2d>
 8006a34:	2d09      	cmp	r5, #9
 8006a36:	4682      	mov	sl, r0
 8006a38:	468b      	mov	fp, r1
 8006a3a:	dd13      	ble.n	8006a64 <_strtod_l+0x3e4>
 8006a3c:	4b79      	ldr	r3, [pc, #484]	; (8006c24 <_strtod_l+0x5a4>)
 8006a3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006a42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a46:	f7f9 fdef 	bl	8000628 <__aeabi_dmul>
 8006a4a:	4682      	mov	sl, r0
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	468b      	mov	fp, r1
 8006a50:	f7f9 fd70 	bl	8000534 <__aeabi_ui2d>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4650      	mov	r0, sl
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	f7f9 fc2e 	bl	80002bc <__adddf3>
 8006a60:	4682      	mov	sl, r0
 8006a62:	468b      	mov	fp, r1
 8006a64:	2d0f      	cmp	r5, #15
 8006a66:	dc38      	bgt.n	8006ada <_strtod_l+0x45a>
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f43f ae4a 	beq.w	8006704 <_strtod_l+0x84>
 8006a70:	dd24      	ble.n	8006abc <_strtod_l+0x43c>
 8006a72:	2b16      	cmp	r3, #22
 8006a74:	dc0b      	bgt.n	8006a8e <_strtod_l+0x40e>
 8006a76:	4d6b      	ldr	r5, [pc, #428]	; (8006c24 <_strtod_l+0x5a4>)
 8006a78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006a7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006a80:	4652      	mov	r2, sl
 8006a82:	465b      	mov	r3, fp
 8006a84:	f7f9 fdd0 	bl	8000628 <__aeabi_dmul>
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	e63a      	b.n	8006704 <_strtod_l+0x84>
 8006a8e:	9a08      	ldr	r2, [sp, #32]
 8006a90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006a94:	4293      	cmp	r3, r2
 8006a96:	db20      	blt.n	8006ada <_strtod_l+0x45a>
 8006a98:	4c62      	ldr	r4, [pc, #392]	; (8006c24 <_strtod_l+0x5a4>)
 8006a9a:	f1c5 050f 	rsb	r5, r5, #15
 8006a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006aa2:	4652      	mov	r2, sl
 8006aa4:	465b      	mov	r3, fp
 8006aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aaa:	f7f9 fdbd 	bl	8000628 <__aeabi_dmul>
 8006aae:	9b08      	ldr	r3, [sp, #32]
 8006ab0:	1b5d      	subs	r5, r3, r5
 8006ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006aba:	e7e3      	b.n	8006a84 <_strtod_l+0x404>
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	3316      	adds	r3, #22
 8006ac0:	db0b      	blt.n	8006ada <_strtod_l+0x45a>
 8006ac2:	9b07      	ldr	r3, [sp, #28]
 8006ac4:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <_strtod_l+0x5a4>)
 8006ac6:	1b9e      	subs	r6, r3, r6
 8006ac8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006acc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	f7f9 fed2 	bl	800087c <__aeabi_ddiv>
 8006ad8:	e7d6      	b.n	8006a88 <_strtod_l+0x408>
 8006ada:	9b08      	ldr	r3, [sp, #32]
 8006adc:	eba5 0808 	sub.w	r8, r5, r8
 8006ae0:	4498      	add	r8, r3
 8006ae2:	f1b8 0f00 	cmp.w	r8, #0
 8006ae6:	dd71      	ble.n	8006bcc <_strtod_l+0x54c>
 8006ae8:	f018 030f 	ands.w	r3, r8, #15
 8006aec:	d00a      	beq.n	8006b04 <_strtod_l+0x484>
 8006aee:	494d      	ldr	r1, [pc, #308]	; (8006c24 <_strtod_l+0x5a4>)
 8006af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006af4:	4652      	mov	r2, sl
 8006af6:	465b      	mov	r3, fp
 8006af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afc:	f7f9 fd94 	bl	8000628 <__aeabi_dmul>
 8006b00:	4682      	mov	sl, r0
 8006b02:	468b      	mov	fp, r1
 8006b04:	f038 080f 	bics.w	r8, r8, #15
 8006b08:	d04d      	beq.n	8006ba6 <_strtod_l+0x526>
 8006b0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006b0e:	dd22      	ble.n	8006b56 <_strtod_l+0x4d6>
 8006b10:	2500      	movs	r5, #0
 8006b12:	462e      	mov	r6, r5
 8006b14:	9509      	str	r5, [sp, #36]	; 0x24
 8006b16:	9507      	str	r5, [sp, #28]
 8006b18:	2322      	movs	r3, #34	; 0x22
 8006b1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006c2c <_strtod_l+0x5ac>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	f04f 0a00 	mov.w	sl, #0
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f43f adec 	beq.w	8006704 <_strtod_l+0x84>
 8006b2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f001 f832 	bl	8007b98 <_Bfree>
 8006b34:	9907      	ldr	r1, [sp, #28]
 8006b36:	4620      	mov	r0, r4
 8006b38:	f001 f82e 	bl	8007b98 <_Bfree>
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f001 f82a 	bl	8007b98 <_Bfree>
 8006b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b46:	4620      	mov	r0, r4
 8006b48:	f001 f826 	bl	8007b98 <_Bfree>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f001 f822 	bl	8007b98 <_Bfree>
 8006b54:	e5d6      	b.n	8006704 <_strtod_l+0x84>
 8006b56:	2300      	movs	r3, #0
 8006b58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4659      	mov	r1, fp
 8006b60:	4699      	mov	r9, r3
 8006b62:	f1b8 0f01 	cmp.w	r8, #1
 8006b66:	dc21      	bgt.n	8006bac <_strtod_l+0x52c>
 8006b68:	b10b      	cbz	r3, 8006b6e <_strtod_l+0x4ee>
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	468b      	mov	fp, r1
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <_strtod_l+0x5a8>)
 8006b70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006b78:	4652      	mov	r2, sl
 8006b7a:	465b      	mov	r3, fp
 8006b7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006b80:	f7f9 fd52 	bl	8000628 <__aeabi_dmul>
 8006b84:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <_strtod_l+0x5ac>)
 8006b86:	460a      	mov	r2, r1
 8006b88:	400b      	ands	r3, r1
 8006b8a:	4929      	ldr	r1, [pc, #164]	; (8006c30 <_strtod_l+0x5b0>)
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	4682      	mov	sl, r0
 8006b90:	d8be      	bhi.n	8006b10 <_strtod_l+0x490>
 8006b92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b96:	428b      	cmp	r3, r1
 8006b98:	bf86      	itte	hi
 8006b9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006c34 <_strtod_l+0x5b4>
 8006b9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ba2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	e081      	b.n	8006cb0 <_strtod_l+0x630>
 8006bac:	f018 0f01 	tst.w	r8, #1
 8006bb0:	d007      	beq.n	8006bc2 <_strtod_l+0x542>
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <_strtod_l+0x5a8>)
 8006bb4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fd34 	bl	8000628 <__aeabi_dmul>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f109 0901 	add.w	r9, r9, #1
 8006bc6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bca:	e7ca      	b.n	8006b62 <_strtod_l+0x4e2>
 8006bcc:	d0eb      	beq.n	8006ba6 <_strtod_l+0x526>
 8006bce:	f1c8 0800 	rsb	r8, r8, #0
 8006bd2:	f018 020f 	ands.w	r2, r8, #15
 8006bd6:	d00a      	beq.n	8006bee <_strtod_l+0x56e>
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <_strtod_l+0x5a4>)
 8006bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bde:	4650      	mov	r0, sl
 8006be0:	4659      	mov	r1, fp
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fe49 	bl	800087c <__aeabi_ddiv>
 8006bea:	4682      	mov	sl, r0
 8006bec:	468b      	mov	fp, r1
 8006bee:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006bf2:	d0d8      	beq.n	8006ba6 <_strtod_l+0x526>
 8006bf4:	f1b8 0f1f 	cmp.w	r8, #31
 8006bf8:	dd1e      	ble.n	8006c38 <_strtod_l+0x5b8>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	462e      	mov	r6, r5
 8006bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8006c00:	9507      	str	r5, [sp, #28]
 8006c02:	2322      	movs	r3, #34	; 0x22
 8006c04:	f04f 0a00 	mov.w	sl, #0
 8006c08:	f04f 0b00 	mov.w	fp, #0
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	e789      	b.n	8006b24 <_strtod_l+0x4a4>
 8006c10:	0800ac7e 	.word	0x0800ac7e
 8006c14:	0800ac98 	.word	0x0800ac98
 8006c18:	0800ac75 	.word	0x0800ac75
 8006c1c:	0800ac78 	.word	0x0800ac78
 8006c20:	0800b065 	.word	0x0800b065
 8006c24:	0800af08 	.word	0x0800af08
 8006c28:	0800aee0 	.word	0x0800aee0
 8006c2c:	7ff00000 	.word	0x7ff00000
 8006c30:	7ca00000 	.word	0x7ca00000
 8006c34:	7fefffff 	.word	0x7fefffff
 8006c38:	f018 0310 	ands.w	r3, r8, #16
 8006c3c:	bf18      	it	ne
 8006c3e:	236a      	movne	r3, #106	; 0x6a
 8006c40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006ff8 <_strtod_l+0x978>
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	4650      	mov	r0, sl
 8006c48:	4659      	mov	r1, fp
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f018 0f01 	tst.w	r8, #1
 8006c50:	d004      	beq.n	8006c5c <_strtod_l+0x5dc>
 8006c52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c56:	f7f9 fce7 	bl	8000628 <__aeabi_dmul>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006c60:	f109 0908 	add.w	r9, r9, #8
 8006c64:	d1f2      	bne.n	8006c4c <_strtod_l+0x5cc>
 8006c66:	b10b      	cbz	r3, 8006c6c <_strtod_l+0x5ec>
 8006c68:	4682      	mov	sl, r0
 8006c6a:	468b      	mov	fp, r1
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	b1bb      	cbz	r3, 8006ca0 <_strtod_l+0x620>
 8006c70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006c74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	4659      	mov	r1, fp
 8006c7c:	dd10      	ble.n	8006ca0 <_strtod_l+0x620>
 8006c7e:	2b1f      	cmp	r3, #31
 8006c80:	f340 8128 	ble.w	8006ed4 <_strtod_l+0x854>
 8006c84:	2b34      	cmp	r3, #52	; 0x34
 8006c86:	bfde      	ittt	le
 8006c88:	3b20      	suble	r3, #32
 8006c8a:	f04f 32ff 	movle.w	r2, #4294967295
 8006c8e:	fa02 f303 	lslle.w	r3, r2, r3
 8006c92:	f04f 0a00 	mov.w	sl, #0
 8006c96:	bfcc      	ite	gt
 8006c98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c9c:	ea03 0b01 	andle.w	fp, r3, r1
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	f7f9 ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d1a4      	bne.n	8006bfa <_strtod_l+0x57a>
 8006cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	463a      	mov	r2, r7
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 ffd8 	bl	8007c70 <__s2b>
 8006cc0:	9009      	str	r0, [sp, #36]	; 0x24
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f43f af24 	beq.w	8006b10 <_strtod_l+0x490>
 8006cc8:	9b07      	ldr	r3, [sp, #28]
 8006cca:	1b9e      	subs	r6, r3, r6
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfb4      	ite	lt
 8006cd2:	4633      	movlt	r3, r6
 8006cd4:	2300      	movge	r3, #0
 8006cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8006cd8:	9b08      	ldr	r3, [sp, #32]
 8006cda:	2500      	movs	r5, #0
 8006cdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ce0:	9318      	str	r3, [sp, #96]	; 0x60
 8006ce2:	462e      	mov	r6, r5
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	6859      	ldr	r1, [r3, #4]
 8006cea:	f000 ff15 	bl	8007b18 <_Balloc>
 8006cee:	9007      	str	r0, [sp, #28]
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f43f af11 	beq.w	8006b18 <_strtod_l+0x498>
 8006cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	3202      	adds	r2, #2
 8006cfc:	f103 010c 	add.w	r1, r3, #12
 8006d00:	0092      	lsls	r2, r2, #2
 8006d02:	300c      	adds	r0, #12
 8006d04:	f7ff f9e2 	bl	80060cc <memcpy>
 8006d08:	ec4b ab10 	vmov	d0, sl, fp
 8006d0c:	aa20      	add	r2, sp, #128	; 0x80
 8006d0e:	a91f      	add	r1, sp, #124	; 0x7c
 8006d10:	4620      	mov	r0, r4
 8006d12:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006d16:	f001 fae7 	bl	80082e8 <__d2b>
 8006d1a:	901e      	str	r0, [sp, #120]	; 0x78
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f43f aefb 	beq.w	8006b18 <_strtod_l+0x498>
 8006d22:	2101      	movs	r1, #1
 8006d24:	4620      	mov	r0, r4
 8006d26:	f001 f83d 	bl	8007da4 <__i2b>
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f aef3 	beq.w	8006b18 <_strtod_l+0x498>
 8006d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d34:	9904      	ldr	r1, [sp, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfab      	itete	ge
 8006d3a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006d3c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006d3e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006d40:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006d44:	bfac      	ite	ge
 8006d46:	eb03 0902 	addge.w	r9, r3, r2
 8006d4a:	1ad7      	sublt	r7, r2, r3
 8006d4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d4e:	eba3 0801 	sub.w	r8, r3, r1
 8006d52:	4490      	add	r8, r2
 8006d54:	4ba3      	ldr	r3, [pc, #652]	; (8006fe4 <_strtod_l+0x964>)
 8006d56:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d5a:	4598      	cmp	r8, r3
 8006d5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d60:	f280 80cc 	bge.w	8006efc <_strtod_l+0x87c>
 8006d64:	eba3 0308 	sub.w	r3, r3, r8
 8006d68:	2b1f      	cmp	r3, #31
 8006d6a:	eba2 0203 	sub.w	r2, r2, r3
 8006d6e:	f04f 0101 	mov.w	r1, #1
 8006d72:	f300 80b6 	bgt.w	8006ee2 <_strtod_l+0x862>
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	9311      	str	r3, [sp, #68]	; 0x44
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d80:	eb09 0802 	add.w	r8, r9, r2
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	45c1      	cmp	r9, r8
 8006d88:	4417      	add	r7, r2
 8006d8a:	441f      	add	r7, r3
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	bfa8      	it	ge
 8006d90:	4643      	movge	r3, r8
 8006d92:	42bb      	cmp	r3, r7
 8006d94:	bfa8      	it	ge
 8006d96:	463b      	movge	r3, r7
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfc2      	ittt	gt
 8006d9c:	eba8 0803 	subgt.w	r8, r8, r3
 8006da0:	1aff      	subgt	r7, r7, r3
 8006da2:	eba9 0903 	subgt.w	r9, r9, r3
 8006da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dd17      	ble.n	8006ddc <_strtod_l+0x75c>
 8006dac:	4631      	mov	r1, r6
 8006dae:	461a      	mov	r2, r3
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 f8b3 	bl	8007f1c <__pow5mult>
 8006db6:	4606      	mov	r6, r0
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f aead 	beq.w	8006b18 <_strtod_l+0x498>
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f001 f804 	bl	8007dd0 <__multiply>
 8006dc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f43f aea4 	beq.w	8006b18 <_strtod_l+0x498>
 8006dd0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 fee0 	bl	8007b98 <_Bfree>
 8006dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dda:	931e      	str	r3, [sp, #120]	; 0x78
 8006ddc:	f1b8 0f00 	cmp.w	r8, #0
 8006de0:	f300 8091 	bgt.w	8006f06 <_strtod_l+0x886>
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dd08      	ble.n	8006dfc <_strtod_l+0x77c>
 8006dea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dec:	9907      	ldr	r1, [sp, #28]
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 f894 	bl	8007f1c <__pow5mult>
 8006df4:	9007      	str	r0, [sp, #28]
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f ae8e 	beq.w	8006b18 <_strtod_l+0x498>
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	dd08      	ble.n	8006e12 <_strtod_l+0x792>
 8006e00:	9907      	ldr	r1, [sp, #28]
 8006e02:	463a      	mov	r2, r7
 8006e04:	4620      	mov	r0, r4
 8006e06:	f001 f8e3 	bl	8007fd0 <__lshift>
 8006e0a:	9007      	str	r0, [sp, #28]
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f ae83 	beq.w	8006b18 <_strtod_l+0x498>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	dd08      	ble.n	8006e2a <_strtod_l+0x7aa>
 8006e18:	4631      	mov	r1, r6
 8006e1a:	464a      	mov	r2, r9
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f001 f8d7 	bl	8007fd0 <__lshift>
 8006e22:	4606      	mov	r6, r0
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f43f ae77 	beq.w	8006b18 <_strtod_l+0x498>
 8006e2a:	9a07      	ldr	r2, [sp, #28]
 8006e2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 f956 	bl	80080e0 <__mdiff>
 8006e34:	4605      	mov	r5, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f ae6e 	beq.w	8006b18 <_strtod_l+0x498>
 8006e3c:	68c3      	ldr	r3, [r0, #12]
 8006e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e40:	2300      	movs	r3, #0
 8006e42:	60c3      	str	r3, [r0, #12]
 8006e44:	4631      	mov	r1, r6
 8006e46:	f001 f92f 	bl	80080a8 <__mcmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	da65      	bge.n	8006f1a <_strtod_l+0x89a>
 8006e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e50:	ea53 030a 	orrs.w	r3, r3, sl
 8006e54:	f040 8087 	bne.w	8006f66 <_strtod_l+0x8e6>
 8006e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 8082 	bne.w	8006f66 <_strtod_l+0x8e6>
 8006e62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e66:	0d1b      	lsrs	r3, r3, #20
 8006e68:	051b      	lsls	r3, r3, #20
 8006e6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e6e:	d97a      	bls.n	8006f66 <_strtod_l+0x8e6>
 8006e70:	696b      	ldr	r3, [r5, #20]
 8006e72:	b913      	cbnz	r3, 8006e7a <_strtod_l+0x7fa>
 8006e74:	692b      	ldr	r3, [r5, #16]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	dd75      	ble.n	8006f66 <_strtod_l+0x8e6>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f001 f8a6 	bl	8007fd0 <__lshift>
 8006e84:	4631      	mov	r1, r6
 8006e86:	4605      	mov	r5, r0
 8006e88:	f001 f90e 	bl	80080a8 <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dd6a      	ble.n	8006f66 <_strtod_l+0x8e6>
 8006e90:	9904      	ldr	r1, [sp, #16]
 8006e92:	4a55      	ldr	r2, [pc, #340]	; (8006fe8 <_strtod_l+0x968>)
 8006e94:	465b      	mov	r3, fp
 8006e96:	2900      	cmp	r1, #0
 8006e98:	f000 8085 	beq.w	8006fa6 <_strtod_l+0x926>
 8006e9c:	ea02 010b 	and.w	r1, r2, fp
 8006ea0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006ea4:	dc7f      	bgt.n	8006fa6 <_strtod_l+0x926>
 8006ea6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006eaa:	f77f aeaa 	ble.w	8006c02 <_strtod_l+0x582>
 8006eae:	4a4f      	ldr	r2, [pc, #316]	; (8006fec <_strtod_l+0x96c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	f7f9 fbb3 	bl	8000628 <__aeabi_dmul>
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4303      	orrs	r3, r0
 8006ec6:	bf08      	it	eq
 8006ec8:	2322      	moveq	r3, #34	; 0x22
 8006eca:	4682      	mov	sl, r0
 8006ecc:	468b      	mov	fp, r1
 8006ece:	bf08      	it	eq
 8006ed0:	6023      	streq	r3, [r4, #0]
 8006ed2:	e62b      	b.n	8006b2c <_strtod_l+0x4ac>
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	ea03 0a0a 	and.w	sl, r3, sl
 8006ee0:	e6de      	b.n	8006ca0 <_strtod_l+0x620>
 8006ee2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006ee6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006eea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006eee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ef2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef8:	9111      	str	r1, [sp, #68]	; 0x44
 8006efa:	e741      	b.n	8006d80 <_strtod_l+0x700>
 8006efc:	2300      	movs	r3, #0
 8006efe:	930c      	str	r3, [sp, #48]	; 0x30
 8006f00:	2301      	movs	r3, #1
 8006f02:	9311      	str	r3, [sp, #68]	; 0x44
 8006f04:	e73c      	b.n	8006d80 <_strtod_l+0x700>
 8006f06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f08:	4642      	mov	r2, r8
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f001 f860 	bl	8007fd0 <__lshift>
 8006f10:	901e      	str	r0, [sp, #120]	; 0x78
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f47f af66 	bne.w	8006de4 <_strtod_l+0x764>
 8006f18:	e5fe      	b.n	8006b18 <_strtod_l+0x498>
 8006f1a:	465f      	mov	r7, fp
 8006f1c:	d16e      	bne.n	8006ffc <_strtod_l+0x97c>
 8006f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f24:	b342      	cbz	r2, 8006f78 <_strtod_l+0x8f8>
 8006f26:	4a32      	ldr	r2, [pc, #200]	; (8006ff0 <_strtod_l+0x970>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d128      	bne.n	8006f7e <_strtod_l+0x8fe>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	4650      	mov	r0, sl
 8006f30:	b1eb      	cbz	r3, 8006f6e <_strtod_l+0x8ee>
 8006f32:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <_strtod_l+0x968>)
 8006f34:	403a      	ands	r2, r7
 8006f36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f3e:	d819      	bhi.n	8006f74 <_strtod_l+0x8f4>
 8006f40:	0d12      	lsrs	r2, r2, #20
 8006f42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	4298      	cmp	r0, r3
 8006f4c:	d117      	bne.n	8006f7e <_strtod_l+0x8fe>
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <_strtod_l+0x974>)
 8006f50:	429f      	cmp	r7, r3
 8006f52:	d102      	bne.n	8006f5a <_strtod_l+0x8da>
 8006f54:	3001      	adds	r0, #1
 8006f56:	f43f addf 	beq.w	8006b18 <_strtod_l+0x498>
 8006f5a:	4b23      	ldr	r3, [pc, #140]	; (8006fe8 <_strtod_l+0x968>)
 8006f5c:	403b      	ands	r3, r7
 8006f5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1a0      	bne.n	8006eae <_strtod_l+0x82e>
 8006f6c:	e5de      	b.n	8006b2c <_strtod_l+0x4ac>
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	e7ea      	b.n	8006f4a <_strtod_l+0x8ca>
 8006f74:	460b      	mov	r3, r1
 8006f76:	e7e8      	b.n	8006f4a <_strtod_l+0x8ca>
 8006f78:	ea53 030a 	orrs.w	r3, r3, sl
 8006f7c:	d088      	beq.n	8006e90 <_strtod_l+0x810>
 8006f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f80:	b1db      	cbz	r3, 8006fba <_strtod_l+0x93a>
 8006f82:	423b      	tst	r3, r7
 8006f84:	d0ef      	beq.n	8006f66 <_strtod_l+0x8e6>
 8006f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f88:	9a04      	ldr	r2, [sp, #16]
 8006f8a:	4650      	mov	r0, sl
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	b1c3      	cbz	r3, 8006fc2 <_strtod_l+0x942>
 8006f90:	f7ff fb59 	bl	8006646 <sulp>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9c:	f7f9 f98e 	bl	80002bc <__adddf3>
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	468b      	mov	fp, r1
 8006fa4:	e7df      	b.n	8006f66 <_strtod_l+0x8e6>
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006fb4:	f04f 3aff 	mov.w	sl, #4294967295
 8006fb8:	e7d5      	b.n	8006f66 <_strtod_l+0x8e6>
 8006fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fbc:	ea13 0f0a 	tst.w	r3, sl
 8006fc0:	e7e0      	b.n	8006f84 <_strtod_l+0x904>
 8006fc2:	f7ff fb40 	bl	8006646 <sulp>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fce:	f7f9 f973 	bl	80002b8 <__aeabi_dsub>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4682      	mov	sl, r0
 8006fd8:	468b      	mov	fp, r1
 8006fda:	f7f9 fd8d 	bl	8000af8 <__aeabi_dcmpeq>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0c1      	beq.n	8006f66 <_strtod_l+0x8e6>
 8006fe2:	e60e      	b.n	8006c02 <_strtod_l+0x582>
 8006fe4:	fffffc02 	.word	0xfffffc02
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	39500000 	.word	0x39500000
 8006ff0:	000fffff 	.word	0x000fffff
 8006ff4:	7fefffff 	.word	0x7fefffff
 8006ff8:	0800acb0 	.word	0x0800acb0
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	f001 f9ce 	bl	80083a0 <__ratio>
 8007004:	ec59 8b10 	vmov	r8, r9, d0
 8007008:	ee10 0a10 	vmov	r0, s0
 800700c:	2200      	movs	r2, #0
 800700e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007012:	4649      	mov	r1, r9
 8007014:	f7f9 fd84 	bl	8000b20 <__aeabi_dcmple>
 8007018:	2800      	cmp	r0, #0
 800701a:	d07c      	beq.n	8007116 <_strtod_l+0xa96>
 800701c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d04c      	beq.n	80070bc <_strtod_l+0xa3c>
 8007022:	4b95      	ldr	r3, [pc, #596]	; (8007278 <_strtod_l+0xbf8>)
 8007024:	2200      	movs	r2, #0
 8007026:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800702a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007278 <_strtod_l+0xbf8>
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	4b92      	ldr	r3, [pc, #584]	; (800727c <_strtod_l+0xbfc>)
 8007034:	403b      	ands	r3, r7
 8007036:	9311      	str	r3, [sp, #68]	; 0x44
 8007038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800703a:	4b91      	ldr	r3, [pc, #580]	; (8007280 <_strtod_l+0xc00>)
 800703c:	429a      	cmp	r2, r3
 800703e:	f040 80b2 	bne.w	80071a6 <_strtod_l+0xb26>
 8007042:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800704a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800704e:	ec4b ab10 	vmov	d0, sl, fp
 8007052:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007056:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800705a:	f001 f8c9 	bl	80081f0 <__ulp>
 800705e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007062:	ec53 2b10 	vmov	r2, r3, d0
 8007066:	f7f9 fadf 	bl	8000628 <__aeabi_dmul>
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	f7f9 f925 	bl	80002bc <__adddf3>
 8007072:	460b      	mov	r3, r1
 8007074:	4981      	ldr	r1, [pc, #516]	; (800727c <_strtod_l+0xbfc>)
 8007076:	4a83      	ldr	r2, [pc, #524]	; (8007284 <_strtod_l+0xc04>)
 8007078:	4019      	ands	r1, r3
 800707a:	4291      	cmp	r1, r2
 800707c:	4682      	mov	sl, r0
 800707e:	d95e      	bls.n	800713e <_strtod_l+0xabe>
 8007080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007082:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007086:	4293      	cmp	r3, r2
 8007088:	d103      	bne.n	8007092 <_strtod_l+0xa12>
 800708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708c:	3301      	adds	r3, #1
 800708e:	f43f ad43 	beq.w	8006b18 <_strtod_l+0x498>
 8007092:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007290 <_strtod_l+0xc10>
 8007096:	f04f 3aff 	mov.w	sl, #4294967295
 800709a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fd7b 	bl	8007b98 <_Bfree>
 80070a2:	9907      	ldr	r1, [sp, #28]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fd77 	bl	8007b98 <_Bfree>
 80070aa:	4631      	mov	r1, r6
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fd73 	bl	8007b98 <_Bfree>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fd6f 	bl	8007b98 <_Bfree>
 80070ba:	e613      	b.n	8006ce4 <_strtod_l+0x664>
 80070bc:	f1ba 0f00 	cmp.w	sl, #0
 80070c0:	d11b      	bne.n	80070fa <_strtod_l+0xa7a>
 80070c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070c6:	b9f3      	cbnz	r3, 8007106 <_strtod_l+0xa86>
 80070c8:	4b6b      	ldr	r3, [pc, #428]	; (8007278 <_strtod_l+0xbf8>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 fd1c 	bl	8000b0c <__aeabi_dcmplt>
 80070d4:	b9d0      	cbnz	r0, 800710c <_strtod_l+0xa8c>
 80070d6:	4640      	mov	r0, r8
 80070d8:	4649      	mov	r1, r9
 80070da:	4b6b      	ldr	r3, [pc, #428]	; (8007288 <_strtod_l+0xc08>)
 80070dc:	2200      	movs	r2, #0
 80070de:	f7f9 faa3 	bl	8000628 <__aeabi_dmul>
 80070e2:	4680      	mov	r8, r0
 80070e4:	4689      	mov	r9, r1
 80070e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80070ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80070ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80070f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80070f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80070f8:	e79b      	b.n	8007032 <_strtod_l+0x9b2>
 80070fa:	f1ba 0f01 	cmp.w	sl, #1
 80070fe:	d102      	bne.n	8007106 <_strtod_l+0xa86>
 8007100:	2f00      	cmp	r7, #0
 8007102:	f43f ad7e 	beq.w	8006c02 <_strtod_l+0x582>
 8007106:	4b61      	ldr	r3, [pc, #388]	; (800728c <_strtod_l+0xc0c>)
 8007108:	2200      	movs	r2, #0
 800710a:	e78c      	b.n	8007026 <_strtod_l+0x9a6>
 800710c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007288 <_strtod_l+0xc08>
 8007110:	f04f 0800 	mov.w	r8, #0
 8007114:	e7e7      	b.n	80070e6 <_strtod_l+0xa66>
 8007116:	4b5c      	ldr	r3, [pc, #368]	; (8007288 <_strtod_l+0xc08>)
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	2200      	movs	r2, #0
 800711e:	f7f9 fa83 	bl	8000628 <__aeabi_dmul>
 8007122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007124:	4680      	mov	r8, r0
 8007126:	4689      	mov	r9, r1
 8007128:	b933      	cbnz	r3, 8007138 <_strtod_l+0xab8>
 800712a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800712e:	9012      	str	r0, [sp, #72]	; 0x48
 8007130:	9313      	str	r3, [sp, #76]	; 0x4c
 8007132:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007136:	e7dd      	b.n	80070f4 <_strtod_l+0xa74>
 8007138:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800713c:	e7f9      	b.n	8007132 <_strtod_l+0xab2>
 800713e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007142:	9b04      	ldr	r3, [sp, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1a8      	bne.n	800709a <_strtod_l+0xa1a>
 8007148:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800714c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800714e:	0d1b      	lsrs	r3, r3, #20
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	429a      	cmp	r2, r3
 8007154:	d1a1      	bne.n	800709a <_strtod_l+0xa1a>
 8007156:	4640      	mov	r0, r8
 8007158:	4649      	mov	r1, r9
 800715a:	f7f9 fd9d 	bl	8000c98 <__aeabi_d2lz>
 800715e:	f7f9 fa35 	bl	80005cc <__aeabi_l2d>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4640      	mov	r0, r8
 8007168:	4649      	mov	r1, r9
 800716a:	f7f9 f8a5 	bl	80002b8 <__aeabi_dsub>
 800716e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007174:	ea43 030a 	orr.w	r3, r3, sl
 8007178:	4313      	orrs	r3, r2
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	d053      	beq.n	8007228 <_strtod_l+0xba8>
 8007180:	a335      	add	r3, pc, #212	; (adr r3, 8007258 <_strtod_l+0xbd8>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 fcc1 	bl	8000b0c <__aeabi_dcmplt>
 800718a:	2800      	cmp	r0, #0
 800718c:	f47f acce 	bne.w	8006b2c <_strtod_l+0x4ac>
 8007190:	a333      	add	r3, pc, #204	; (adr r3, 8007260 <_strtod_l+0xbe0>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 fcd5 	bl	8000b48 <__aeabi_dcmpgt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f43f af7b 	beq.w	800709a <_strtod_l+0xa1a>
 80071a4:	e4c2      	b.n	8006b2c <_strtod_l+0x4ac>
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	b333      	cbz	r3, 80071f8 <_strtod_l+0xb78>
 80071aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071b0:	d822      	bhi.n	80071f8 <_strtod_l+0xb78>
 80071b2:	a32d      	add	r3, pc, #180	; (adr r3, 8007268 <_strtod_l+0xbe8>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f9 fcb0 	bl	8000b20 <__aeabi_dcmple>
 80071c0:	b1a0      	cbz	r0, 80071ec <_strtod_l+0xb6c>
 80071c2:	4649      	mov	r1, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	f7f9 fcdf 	bl	8000b88 <__aeabi_d2uiz>
 80071ca:	2801      	cmp	r0, #1
 80071cc:	bf38      	it	cc
 80071ce:	2001      	movcc	r0, #1
 80071d0:	f7f9 f9b0 	bl	8000534 <__aeabi_ui2d>
 80071d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d6:	4680      	mov	r8, r0
 80071d8:	4689      	mov	r9, r1
 80071da:	bb13      	cbnz	r3, 8007222 <_strtod_l+0xba2>
 80071dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071e0:	9014      	str	r0, [sp, #80]	; 0x50
 80071e2:	9315      	str	r3, [sp, #84]	; 0x54
 80071e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80071ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	930d      	str	r3, [sp, #52]	; 0x34
 80071f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007204:	f000 fff4 	bl	80081f0 <__ulp>
 8007208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800720c:	ec53 2b10 	vmov	r2, r3, d0
 8007210:	f7f9 fa0a 	bl	8000628 <__aeabi_dmul>
 8007214:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007218:	f7f9 f850 	bl	80002bc <__adddf3>
 800721c:	4682      	mov	sl, r0
 800721e:	468b      	mov	fp, r1
 8007220:	e78f      	b.n	8007142 <_strtod_l+0xac2>
 8007222:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007226:	e7dd      	b.n	80071e4 <_strtod_l+0xb64>
 8007228:	a311      	add	r3, pc, #68	; (adr r3, 8007270 <_strtod_l+0xbf0>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f7f9 fc6d 	bl	8000b0c <__aeabi_dcmplt>
 8007232:	e7b4      	b.n	800719e <_strtod_l+0xb1e>
 8007234:	2300      	movs	r3, #0
 8007236:	930e      	str	r3, [sp, #56]	; 0x38
 8007238:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800723a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	f7ff ba65 	b.w	800670c <_strtod_l+0x8c>
 8007242:	2b65      	cmp	r3, #101	; 0x65
 8007244:	f43f ab5d 	beq.w	8006902 <_strtod_l+0x282>
 8007248:	2b45      	cmp	r3, #69	; 0x45
 800724a:	f43f ab5a 	beq.w	8006902 <_strtod_l+0x282>
 800724e:	2201      	movs	r2, #1
 8007250:	f7ff bb92 	b.w	8006978 <_strtod_l+0x2f8>
 8007254:	f3af 8000 	nop.w
 8007258:	94a03595 	.word	0x94a03595
 800725c:	3fdfffff 	.word	0x3fdfffff
 8007260:	35afe535 	.word	0x35afe535
 8007264:	3fe00000 	.word	0x3fe00000
 8007268:	ffc00000 	.word	0xffc00000
 800726c:	41dfffff 	.word	0x41dfffff
 8007270:	94a03595 	.word	0x94a03595
 8007274:	3fcfffff 	.word	0x3fcfffff
 8007278:	3ff00000 	.word	0x3ff00000
 800727c:	7ff00000 	.word	0x7ff00000
 8007280:	7fe00000 	.word	0x7fe00000
 8007284:	7c9fffff 	.word	0x7c9fffff
 8007288:	3fe00000 	.word	0x3fe00000
 800728c:	bff00000 	.word	0xbff00000
 8007290:	7fefffff 	.word	0x7fefffff

08007294 <_strtod_r>:
 8007294:	4b01      	ldr	r3, [pc, #4]	; (800729c <_strtod_r+0x8>)
 8007296:	f7ff b9f3 	b.w	8006680 <_strtod_l>
 800729a:	bf00      	nop
 800729c:	20000074 	.word	0x20000074

080072a0 <_strtol_l.isra.0>:
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a6:	d001      	beq.n	80072ac <_strtol_l.isra.0+0xc>
 80072a8:	2b24      	cmp	r3, #36	; 0x24
 80072aa:	d906      	bls.n	80072ba <_strtol_l.isra.0+0x1a>
 80072ac:	f7fe fee4 	bl	8006078 <__errno>
 80072b0:	2316      	movs	r3, #22
 80072b2:	6003      	str	r3, [r0, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	4f3a      	ldr	r7, [pc, #232]	; (80073a4 <_strtol_l.isra.0+0x104>)
 80072bc:	468e      	mov	lr, r1
 80072be:	4676      	mov	r6, lr
 80072c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80072c4:	5de5      	ldrb	r5, [r4, r7]
 80072c6:	f015 0508 	ands.w	r5, r5, #8
 80072ca:	d1f8      	bne.n	80072be <_strtol_l.isra.0+0x1e>
 80072cc:	2c2d      	cmp	r4, #45	; 0x2d
 80072ce:	d134      	bne.n	800733a <_strtol_l.isra.0+0x9a>
 80072d0:	f89e 4000 	ldrb.w	r4, [lr]
 80072d4:	f04f 0801 	mov.w	r8, #1
 80072d8:	f106 0e02 	add.w	lr, r6, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d05c      	beq.n	800739a <_strtol_l.isra.0+0xfa>
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d10c      	bne.n	80072fe <_strtol_l.isra.0+0x5e>
 80072e4:	2c30      	cmp	r4, #48	; 0x30
 80072e6:	d10a      	bne.n	80072fe <_strtol_l.isra.0+0x5e>
 80072e8:	f89e 4000 	ldrb.w	r4, [lr]
 80072ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80072f0:	2c58      	cmp	r4, #88	; 0x58
 80072f2:	d14d      	bne.n	8007390 <_strtol_l.isra.0+0xf0>
 80072f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80072f8:	2310      	movs	r3, #16
 80072fa:	f10e 0e02 	add.w	lr, lr, #2
 80072fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007302:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007306:	2600      	movs	r6, #0
 8007308:	fbbc f9f3 	udiv	r9, ip, r3
 800730c:	4635      	mov	r5, r6
 800730e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007312:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007316:	2f09      	cmp	r7, #9
 8007318:	d818      	bhi.n	800734c <_strtol_l.isra.0+0xac>
 800731a:	463c      	mov	r4, r7
 800731c:	42a3      	cmp	r3, r4
 800731e:	dd24      	ble.n	800736a <_strtol_l.isra.0+0xca>
 8007320:	2e00      	cmp	r6, #0
 8007322:	db1f      	blt.n	8007364 <_strtol_l.isra.0+0xc4>
 8007324:	45a9      	cmp	r9, r5
 8007326:	d31d      	bcc.n	8007364 <_strtol_l.isra.0+0xc4>
 8007328:	d101      	bne.n	800732e <_strtol_l.isra.0+0x8e>
 800732a:	45a2      	cmp	sl, r4
 800732c:	db1a      	blt.n	8007364 <_strtol_l.isra.0+0xc4>
 800732e:	fb05 4503 	mla	r5, r5, r3, r4
 8007332:	2601      	movs	r6, #1
 8007334:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007338:	e7eb      	b.n	8007312 <_strtol_l.isra.0+0x72>
 800733a:	2c2b      	cmp	r4, #43	; 0x2b
 800733c:	bf08      	it	eq
 800733e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007342:	46a8      	mov	r8, r5
 8007344:	bf08      	it	eq
 8007346:	f106 0e02 	addeq.w	lr, r6, #2
 800734a:	e7c7      	b.n	80072dc <_strtol_l.isra.0+0x3c>
 800734c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007350:	2f19      	cmp	r7, #25
 8007352:	d801      	bhi.n	8007358 <_strtol_l.isra.0+0xb8>
 8007354:	3c37      	subs	r4, #55	; 0x37
 8007356:	e7e1      	b.n	800731c <_strtol_l.isra.0+0x7c>
 8007358:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800735c:	2f19      	cmp	r7, #25
 800735e:	d804      	bhi.n	800736a <_strtol_l.isra.0+0xca>
 8007360:	3c57      	subs	r4, #87	; 0x57
 8007362:	e7db      	b.n	800731c <_strtol_l.isra.0+0x7c>
 8007364:	f04f 36ff 	mov.w	r6, #4294967295
 8007368:	e7e4      	b.n	8007334 <_strtol_l.isra.0+0x94>
 800736a:	2e00      	cmp	r6, #0
 800736c:	da05      	bge.n	800737a <_strtol_l.isra.0+0xda>
 800736e:	2322      	movs	r3, #34	; 0x22
 8007370:	6003      	str	r3, [r0, #0]
 8007372:	4665      	mov	r5, ip
 8007374:	b942      	cbnz	r2, 8007388 <_strtol_l.isra.0+0xe8>
 8007376:	4628      	mov	r0, r5
 8007378:	e79d      	b.n	80072b6 <_strtol_l.isra.0+0x16>
 800737a:	f1b8 0f00 	cmp.w	r8, #0
 800737e:	d000      	beq.n	8007382 <_strtol_l.isra.0+0xe2>
 8007380:	426d      	negs	r5, r5
 8007382:	2a00      	cmp	r2, #0
 8007384:	d0f7      	beq.n	8007376 <_strtol_l.isra.0+0xd6>
 8007386:	b10e      	cbz	r6, 800738c <_strtol_l.isra.0+0xec>
 8007388:	f10e 31ff 	add.w	r1, lr, #4294967295
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	e7f2      	b.n	8007376 <_strtol_l.isra.0+0xd6>
 8007390:	2430      	movs	r4, #48	; 0x30
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1b3      	bne.n	80072fe <_strtol_l.isra.0+0x5e>
 8007396:	2308      	movs	r3, #8
 8007398:	e7b1      	b.n	80072fe <_strtol_l.isra.0+0x5e>
 800739a:	2c30      	cmp	r4, #48	; 0x30
 800739c:	d0a4      	beq.n	80072e8 <_strtol_l.isra.0+0x48>
 800739e:	230a      	movs	r3, #10
 80073a0:	e7ad      	b.n	80072fe <_strtol_l.isra.0+0x5e>
 80073a2:	bf00      	nop
 80073a4:	0800acd9 	.word	0x0800acd9

080073a8 <_strtol_r>:
 80073a8:	f7ff bf7a 	b.w	80072a0 <_strtol_l.isra.0>

080073ac <_write_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d07      	ldr	r5, [pc, #28]	; (80073cc <_write_r+0x20>)
 80073b0:	4604      	mov	r4, r0
 80073b2:	4608      	mov	r0, r1
 80073b4:	4611      	mov	r1, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	602a      	str	r2, [r5, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7fa ff64 	bl	8002288 <_write>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_write_r+0x1e>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_write_r+0x1e>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000450 	.word	0x20000450

080073d0 <_close_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	; (80073ec <_close_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7fa ff70 	bl	80022c0 <_close>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_close_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_close_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000450 	.word	0x20000450

080073f0 <rshift>:
 80073f0:	6903      	ldr	r3, [r0, #16]
 80073f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073fe:	f100 0414 	add.w	r4, r0, #20
 8007402:	dd45      	ble.n	8007490 <rshift+0xa0>
 8007404:	f011 011f 	ands.w	r1, r1, #31
 8007408:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800740c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007410:	d10c      	bne.n	800742c <rshift+0x3c>
 8007412:	f100 0710 	add.w	r7, r0, #16
 8007416:	4629      	mov	r1, r5
 8007418:	42b1      	cmp	r1, r6
 800741a:	d334      	bcc.n	8007486 <rshift+0x96>
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	1eea      	subs	r2, r5, #3
 8007422:	4296      	cmp	r6, r2
 8007424:	bf38      	it	cc
 8007426:	2300      	movcc	r3, #0
 8007428:	4423      	add	r3, r4
 800742a:	e015      	b.n	8007458 <rshift+0x68>
 800742c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007430:	f1c1 0820 	rsb	r8, r1, #32
 8007434:	40cf      	lsrs	r7, r1
 8007436:	f105 0e04 	add.w	lr, r5, #4
 800743a:	46a1      	mov	r9, r4
 800743c:	4576      	cmp	r6, lr
 800743e:	46f4      	mov	ip, lr
 8007440:	d815      	bhi.n	800746e <rshift+0x7e>
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	009a      	lsls	r2, r3, #2
 8007446:	3a04      	subs	r2, #4
 8007448:	3501      	adds	r5, #1
 800744a:	42ae      	cmp	r6, r5
 800744c:	bf38      	it	cc
 800744e:	2200      	movcc	r2, #0
 8007450:	18a3      	adds	r3, r4, r2
 8007452:	50a7      	str	r7, [r4, r2]
 8007454:	b107      	cbz	r7, 8007458 <rshift+0x68>
 8007456:	3304      	adds	r3, #4
 8007458:	1b1a      	subs	r2, r3, r4
 800745a:	42a3      	cmp	r3, r4
 800745c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007460:	bf08      	it	eq
 8007462:	2300      	moveq	r3, #0
 8007464:	6102      	str	r2, [r0, #16]
 8007466:	bf08      	it	eq
 8007468:	6143      	streq	r3, [r0, #20]
 800746a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800746e:	f8dc c000 	ldr.w	ip, [ip]
 8007472:	fa0c fc08 	lsl.w	ip, ip, r8
 8007476:	ea4c 0707 	orr.w	r7, ip, r7
 800747a:	f849 7b04 	str.w	r7, [r9], #4
 800747e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007482:	40cf      	lsrs	r7, r1
 8007484:	e7da      	b.n	800743c <rshift+0x4c>
 8007486:	f851 cb04 	ldr.w	ip, [r1], #4
 800748a:	f847 cf04 	str.w	ip, [r7, #4]!
 800748e:	e7c3      	b.n	8007418 <rshift+0x28>
 8007490:	4623      	mov	r3, r4
 8007492:	e7e1      	b.n	8007458 <rshift+0x68>

08007494 <__hexdig_fun>:
 8007494:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007498:	2b09      	cmp	r3, #9
 800749a:	d802      	bhi.n	80074a2 <__hexdig_fun+0xe>
 800749c:	3820      	subs	r0, #32
 800749e:	b2c0      	uxtb	r0, r0
 80074a0:	4770      	bx	lr
 80074a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d801      	bhi.n	80074ae <__hexdig_fun+0x1a>
 80074aa:	3847      	subs	r0, #71	; 0x47
 80074ac:	e7f7      	b.n	800749e <__hexdig_fun+0xa>
 80074ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d801      	bhi.n	80074ba <__hexdig_fun+0x26>
 80074b6:	3827      	subs	r0, #39	; 0x27
 80074b8:	e7f1      	b.n	800749e <__hexdig_fun+0xa>
 80074ba:	2000      	movs	r0, #0
 80074bc:	4770      	bx	lr
	...

080074c0 <__gethex>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	ed2d 8b02 	vpush	{d8}
 80074c8:	b089      	sub	sp, #36	; 0x24
 80074ca:	ee08 0a10 	vmov	s16, r0
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	4bbc      	ldr	r3, [pc, #752]	; (80077c4 <__gethex+0x304>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	4618      	mov	r0, r3
 80074d8:	468b      	mov	fp, r1
 80074da:	4690      	mov	r8, r2
 80074dc:	f7f8 fe8a 	bl	80001f4 <strlen>
 80074e0:	9b01      	ldr	r3, [sp, #4]
 80074e2:	f8db 2000 	ldr.w	r2, [fp]
 80074e6:	4403      	add	r3, r0
 80074e8:	4682      	mov	sl, r0
 80074ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	1c93      	adds	r3, r2, #2
 80074f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80074f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80074fa:	32fe      	adds	r2, #254	; 0xfe
 80074fc:	18d1      	adds	r1, r2, r3
 80074fe:	461f      	mov	r7, r3
 8007500:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007504:	9100      	str	r1, [sp, #0]
 8007506:	2830      	cmp	r0, #48	; 0x30
 8007508:	d0f8      	beq.n	80074fc <__gethex+0x3c>
 800750a:	f7ff ffc3 	bl	8007494 <__hexdig_fun>
 800750e:	4604      	mov	r4, r0
 8007510:	2800      	cmp	r0, #0
 8007512:	d13a      	bne.n	800758a <__gethex+0xca>
 8007514:	9901      	ldr	r1, [sp, #4]
 8007516:	4652      	mov	r2, sl
 8007518:	4638      	mov	r0, r7
 800751a:	f001 fe93 	bl	8009244 <strncmp>
 800751e:	4605      	mov	r5, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d168      	bne.n	80075f6 <__gethex+0x136>
 8007524:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007528:	eb07 060a 	add.w	r6, r7, sl
 800752c:	f7ff ffb2 	bl	8007494 <__hexdig_fun>
 8007530:	2800      	cmp	r0, #0
 8007532:	d062      	beq.n	80075fa <__gethex+0x13a>
 8007534:	4633      	mov	r3, r6
 8007536:	7818      	ldrb	r0, [r3, #0]
 8007538:	2830      	cmp	r0, #48	; 0x30
 800753a:	461f      	mov	r7, r3
 800753c:	f103 0301 	add.w	r3, r3, #1
 8007540:	d0f9      	beq.n	8007536 <__gethex+0x76>
 8007542:	f7ff ffa7 	bl	8007494 <__hexdig_fun>
 8007546:	2301      	movs	r3, #1
 8007548:	fab0 f480 	clz	r4, r0
 800754c:	0964      	lsrs	r4, r4, #5
 800754e:	4635      	mov	r5, r6
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	463a      	mov	r2, r7
 8007554:	4616      	mov	r6, r2
 8007556:	3201      	adds	r2, #1
 8007558:	7830      	ldrb	r0, [r6, #0]
 800755a:	f7ff ff9b 	bl	8007494 <__hexdig_fun>
 800755e:	2800      	cmp	r0, #0
 8007560:	d1f8      	bne.n	8007554 <__gethex+0x94>
 8007562:	9901      	ldr	r1, [sp, #4]
 8007564:	4652      	mov	r2, sl
 8007566:	4630      	mov	r0, r6
 8007568:	f001 fe6c 	bl	8009244 <strncmp>
 800756c:	b980      	cbnz	r0, 8007590 <__gethex+0xd0>
 800756e:	b94d      	cbnz	r5, 8007584 <__gethex+0xc4>
 8007570:	eb06 050a 	add.w	r5, r6, sl
 8007574:	462a      	mov	r2, r5
 8007576:	4616      	mov	r6, r2
 8007578:	3201      	adds	r2, #1
 800757a:	7830      	ldrb	r0, [r6, #0]
 800757c:	f7ff ff8a 	bl	8007494 <__hexdig_fun>
 8007580:	2800      	cmp	r0, #0
 8007582:	d1f8      	bne.n	8007576 <__gethex+0xb6>
 8007584:	1bad      	subs	r5, r5, r6
 8007586:	00ad      	lsls	r5, r5, #2
 8007588:	e004      	b.n	8007594 <__gethex+0xd4>
 800758a:	2400      	movs	r4, #0
 800758c:	4625      	mov	r5, r4
 800758e:	e7e0      	b.n	8007552 <__gethex+0x92>
 8007590:	2d00      	cmp	r5, #0
 8007592:	d1f7      	bne.n	8007584 <__gethex+0xc4>
 8007594:	7833      	ldrb	r3, [r6, #0]
 8007596:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800759a:	2b50      	cmp	r3, #80	; 0x50
 800759c:	d13b      	bne.n	8007616 <__gethex+0x156>
 800759e:	7873      	ldrb	r3, [r6, #1]
 80075a0:	2b2b      	cmp	r3, #43	; 0x2b
 80075a2:	d02c      	beq.n	80075fe <__gethex+0x13e>
 80075a4:	2b2d      	cmp	r3, #45	; 0x2d
 80075a6:	d02e      	beq.n	8007606 <__gethex+0x146>
 80075a8:	1c71      	adds	r1, r6, #1
 80075aa:	f04f 0900 	mov.w	r9, #0
 80075ae:	7808      	ldrb	r0, [r1, #0]
 80075b0:	f7ff ff70 	bl	8007494 <__hexdig_fun>
 80075b4:	1e43      	subs	r3, r0, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b18      	cmp	r3, #24
 80075ba:	d82c      	bhi.n	8007616 <__gethex+0x156>
 80075bc:	f1a0 0210 	sub.w	r2, r0, #16
 80075c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075c4:	f7ff ff66 	bl	8007494 <__hexdig_fun>
 80075c8:	1e43      	subs	r3, r0, #1
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b18      	cmp	r3, #24
 80075ce:	d91d      	bls.n	800760c <__gethex+0x14c>
 80075d0:	f1b9 0f00 	cmp.w	r9, #0
 80075d4:	d000      	beq.n	80075d8 <__gethex+0x118>
 80075d6:	4252      	negs	r2, r2
 80075d8:	4415      	add	r5, r2
 80075da:	f8cb 1000 	str.w	r1, [fp]
 80075de:	b1e4      	cbz	r4, 800761a <__gethex+0x15a>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2700      	movne	r7, #0
 80075e8:	2706      	moveq	r7, #6
 80075ea:	4638      	mov	r0, r7
 80075ec:	b009      	add	sp, #36	; 0x24
 80075ee:	ecbd 8b02 	vpop	{d8}
 80075f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f6:	463e      	mov	r6, r7
 80075f8:	4625      	mov	r5, r4
 80075fa:	2401      	movs	r4, #1
 80075fc:	e7ca      	b.n	8007594 <__gethex+0xd4>
 80075fe:	f04f 0900 	mov.w	r9, #0
 8007602:	1cb1      	adds	r1, r6, #2
 8007604:	e7d3      	b.n	80075ae <__gethex+0xee>
 8007606:	f04f 0901 	mov.w	r9, #1
 800760a:	e7fa      	b.n	8007602 <__gethex+0x142>
 800760c:	230a      	movs	r3, #10
 800760e:	fb03 0202 	mla	r2, r3, r2, r0
 8007612:	3a10      	subs	r2, #16
 8007614:	e7d4      	b.n	80075c0 <__gethex+0x100>
 8007616:	4631      	mov	r1, r6
 8007618:	e7df      	b.n	80075da <__gethex+0x11a>
 800761a:	1bf3      	subs	r3, r6, r7
 800761c:	3b01      	subs	r3, #1
 800761e:	4621      	mov	r1, r4
 8007620:	2b07      	cmp	r3, #7
 8007622:	dc0b      	bgt.n	800763c <__gethex+0x17c>
 8007624:	ee18 0a10 	vmov	r0, s16
 8007628:	f000 fa76 	bl	8007b18 <_Balloc>
 800762c:	4604      	mov	r4, r0
 800762e:	b940      	cbnz	r0, 8007642 <__gethex+0x182>
 8007630:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <__gethex+0x308>)
 8007632:	4602      	mov	r2, r0
 8007634:	21de      	movs	r1, #222	; 0xde
 8007636:	4865      	ldr	r0, [pc, #404]	; (80077cc <__gethex+0x30c>)
 8007638:	f001 fedc 	bl	80093f4 <__assert_func>
 800763c:	3101      	adds	r1, #1
 800763e:	105b      	asrs	r3, r3, #1
 8007640:	e7ee      	b.n	8007620 <__gethex+0x160>
 8007642:	f100 0914 	add.w	r9, r0, #20
 8007646:	f04f 0b00 	mov.w	fp, #0
 800764a:	f1ca 0301 	rsb	r3, sl, #1
 800764e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007652:	f8cd b000 	str.w	fp, [sp]
 8007656:	9306      	str	r3, [sp, #24]
 8007658:	42b7      	cmp	r7, r6
 800765a:	d340      	bcc.n	80076de <__gethex+0x21e>
 800765c:	9802      	ldr	r0, [sp, #8]
 800765e:	9b00      	ldr	r3, [sp, #0]
 8007660:	f840 3b04 	str.w	r3, [r0], #4
 8007664:	eba0 0009 	sub.w	r0, r0, r9
 8007668:	1080      	asrs	r0, r0, #2
 800766a:	0146      	lsls	r6, r0, #5
 800766c:	6120      	str	r0, [r4, #16]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fb48 	bl	8007d04 <__hi0bits>
 8007674:	1a30      	subs	r0, r6, r0
 8007676:	f8d8 6000 	ldr.w	r6, [r8]
 800767a:	42b0      	cmp	r0, r6
 800767c:	dd63      	ble.n	8007746 <__gethex+0x286>
 800767e:	1b87      	subs	r7, r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fee2 	bl	800844c <__any_on>
 8007688:	4682      	mov	sl, r0
 800768a:	b1a8      	cbz	r0, 80076b8 <__gethex+0x1f8>
 800768c:	1e7b      	subs	r3, r7, #1
 800768e:	1159      	asrs	r1, r3, #5
 8007690:	f003 021f 	and.w	r2, r3, #31
 8007694:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007698:	f04f 0a01 	mov.w	sl, #1
 800769c:	fa0a f202 	lsl.w	r2, sl, r2
 80076a0:	420a      	tst	r2, r1
 80076a2:	d009      	beq.n	80076b8 <__gethex+0x1f8>
 80076a4:	4553      	cmp	r3, sl
 80076a6:	dd05      	ble.n	80076b4 <__gethex+0x1f4>
 80076a8:	1eb9      	subs	r1, r7, #2
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fece 	bl	800844c <__any_on>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d145      	bne.n	8007740 <__gethex+0x280>
 80076b4:	f04f 0a02 	mov.w	sl, #2
 80076b8:	4639      	mov	r1, r7
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff fe98 	bl	80073f0 <rshift>
 80076c0:	443d      	add	r5, r7
 80076c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076c6:	42ab      	cmp	r3, r5
 80076c8:	da4c      	bge.n	8007764 <__gethex+0x2a4>
 80076ca:	ee18 0a10 	vmov	r0, s16
 80076ce:	4621      	mov	r1, r4
 80076d0:	f000 fa62 	bl	8007b98 <_Bfree>
 80076d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076d6:	2300      	movs	r3, #0
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	27a3      	movs	r7, #163	; 0xa3
 80076dc:	e785      	b.n	80075ea <__gethex+0x12a>
 80076de:	1e73      	subs	r3, r6, #1
 80076e0:	9a05      	ldr	r2, [sp, #20]
 80076e2:	9303      	str	r3, [sp, #12]
 80076e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d019      	beq.n	8007720 <__gethex+0x260>
 80076ec:	f1bb 0f20 	cmp.w	fp, #32
 80076f0:	d107      	bne.n	8007702 <__gethex+0x242>
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	9a00      	ldr	r2, [sp, #0]
 80076f6:	f843 2b04 	str.w	r2, [r3], #4
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2300      	movs	r3, #0
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	469b      	mov	fp, r3
 8007702:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007706:	f7ff fec5 	bl	8007494 <__hexdig_fun>
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	f000 000f 	and.w	r0, r0, #15
 8007710:	fa00 f00b 	lsl.w	r0, r0, fp
 8007714:	4303      	orrs	r3, r0
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	f10b 0b04 	add.w	fp, fp, #4
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	e00d      	b.n	800773c <__gethex+0x27c>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	9a06      	ldr	r2, [sp, #24]
 8007724:	4413      	add	r3, r2
 8007726:	42bb      	cmp	r3, r7
 8007728:	d3e0      	bcc.n	80076ec <__gethex+0x22c>
 800772a:	4618      	mov	r0, r3
 800772c:	9901      	ldr	r1, [sp, #4]
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	4652      	mov	r2, sl
 8007732:	f001 fd87 	bl	8009244 <strncmp>
 8007736:	9b07      	ldr	r3, [sp, #28]
 8007738:	2800      	cmp	r0, #0
 800773a:	d1d7      	bne.n	80076ec <__gethex+0x22c>
 800773c:	461e      	mov	r6, r3
 800773e:	e78b      	b.n	8007658 <__gethex+0x198>
 8007740:	f04f 0a03 	mov.w	sl, #3
 8007744:	e7b8      	b.n	80076b8 <__gethex+0x1f8>
 8007746:	da0a      	bge.n	800775e <__gethex+0x29e>
 8007748:	1a37      	subs	r7, r6, r0
 800774a:	4621      	mov	r1, r4
 800774c:	ee18 0a10 	vmov	r0, s16
 8007750:	463a      	mov	r2, r7
 8007752:	f000 fc3d 	bl	8007fd0 <__lshift>
 8007756:	1bed      	subs	r5, r5, r7
 8007758:	4604      	mov	r4, r0
 800775a:	f100 0914 	add.w	r9, r0, #20
 800775e:	f04f 0a00 	mov.w	sl, #0
 8007762:	e7ae      	b.n	80076c2 <__gethex+0x202>
 8007764:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007768:	42a8      	cmp	r0, r5
 800776a:	dd72      	ble.n	8007852 <__gethex+0x392>
 800776c:	1b45      	subs	r5, r0, r5
 800776e:	42ae      	cmp	r6, r5
 8007770:	dc36      	bgt.n	80077e0 <__gethex+0x320>
 8007772:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d02a      	beq.n	80077d0 <__gethex+0x310>
 800777a:	2b03      	cmp	r3, #3
 800777c:	d02c      	beq.n	80077d8 <__gethex+0x318>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d115      	bne.n	80077ae <__gethex+0x2ee>
 8007782:	42ae      	cmp	r6, r5
 8007784:	d113      	bne.n	80077ae <__gethex+0x2ee>
 8007786:	2e01      	cmp	r6, #1
 8007788:	d10b      	bne.n	80077a2 <__gethex+0x2e2>
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	2301      	movs	r3, #1
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	f8c9 3000 	str.w	r3, [r9]
 800779a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800779c:	2762      	movs	r7, #98	; 0x62
 800779e:	601c      	str	r4, [r3, #0]
 80077a0:	e723      	b.n	80075ea <__gethex+0x12a>
 80077a2:	1e71      	subs	r1, r6, #1
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fe51 	bl	800844c <__any_on>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1ed      	bne.n	800778a <__gethex+0x2ca>
 80077ae:	ee18 0a10 	vmov	r0, s16
 80077b2:	4621      	mov	r1, r4
 80077b4:	f000 f9f0 	bl	8007b98 <_Bfree>
 80077b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ba:	2300      	movs	r3, #0
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	2750      	movs	r7, #80	; 0x50
 80077c0:	e713      	b.n	80075ea <__gethex+0x12a>
 80077c2:	bf00      	nop
 80077c4:	0800ae54 	.word	0x0800ae54
 80077c8:	0800add9 	.word	0x0800add9
 80077cc:	0800adea 	.word	0x0800adea
 80077d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1eb      	bne.n	80077ae <__gethex+0x2ee>
 80077d6:	e7d8      	b.n	800778a <__gethex+0x2ca>
 80077d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1d5      	bne.n	800778a <__gethex+0x2ca>
 80077de:	e7e6      	b.n	80077ae <__gethex+0x2ee>
 80077e0:	1e6f      	subs	r7, r5, #1
 80077e2:	f1ba 0f00 	cmp.w	sl, #0
 80077e6:	d131      	bne.n	800784c <__gethex+0x38c>
 80077e8:	b127      	cbz	r7, 80077f4 <__gethex+0x334>
 80077ea:	4639      	mov	r1, r7
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fe2d 	bl	800844c <__any_on>
 80077f2:	4682      	mov	sl, r0
 80077f4:	117b      	asrs	r3, r7, #5
 80077f6:	2101      	movs	r1, #1
 80077f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80077fc:	f007 071f 	and.w	r7, r7, #31
 8007800:	fa01 f707 	lsl.w	r7, r1, r7
 8007804:	421f      	tst	r7, r3
 8007806:	4629      	mov	r1, r5
 8007808:	4620      	mov	r0, r4
 800780a:	bf18      	it	ne
 800780c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007810:	1b76      	subs	r6, r6, r5
 8007812:	f7ff fded 	bl	80073f0 <rshift>
 8007816:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800781a:	2702      	movs	r7, #2
 800781c:	f1ba 0f00 	cmp.w	sl, #0
 8007820:	d048      	beq.n	80078b4 <__gethex+0x3f4>
 8007822:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d015      	beq.n	8007856 <__gethex+0x396>
 800782a:	2b03      	cmp	r3, #3
 800782c:	d017      	beq.n	800785e <__gethex+0x39e>
 800782e:	2b01      	cmp	r3, #1
 8007830:	d109      	bne.n	8007846 <__gethex+0x386>
 8007832:	f01a 0f02 	tst.w	sl, #2
 8007836:	d006      	beq.n	8007846 <__gethex+0x386>
 8007838:	f8d9 0000 	ldr.w	r0, [r9]
 800783c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007840:	f01a 0f01 	tst.w	sl, #1
 8007844:	d10e      	bne.n	8007864 <__gethex+0x3a4>
 8007846:	f047 0710 	orr.w	r7, r7, #16
 800784a:	e033      	b.n	80078b4 <__gethex+0x3f4>
 800784c:	f04f 0a01 	mov.w	sl, #1
 8007850:	e7d0      	b.n	80077f4 <__gethex+0x334>
 8007852:	2701      	movs	r7, #1
 8007854:	e7e2      	b.n	800781c <__gethex+0x35c>
 8007856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007858:	f1c3 0301 	rsb	r3, r3, #1
 800785c:	9315      	str	r3, [sp, #84]	; 0x54
 800785e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <__gethex+0x386>
 8007864:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007868:	f104 0314 	add.w	r3, r4, #20
 800786c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007870:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007874:	f04f 0c00 	mov.w	ip, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f853 2b04 	ldr.w	r2, [r3], #4
 800787e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007882:	d01c      	beq.n	80078be <__gethex+0x3fe>
 8007884:	3201      	adds	r2, #1
 8007886:	6002      	str	r2, [r0, #0]
 8007888:	2f02      	cmp	r7, #2
 800788a:	f104 0314 	add.w	r3, r4, #20
 800788e:	d13f      	bne.n	8007910 <__gethex+0x450>
 8007890:	f8d8 2000 	ldr.w	r2, [r8]
 8007894:	3a01      	subs	r2, #1
 8007896:	42b2      	cmp	r2, r6
 8007898:	d10a      	bne.n	80078b0 <__gethex+0x3f0>
 800789a:	1171      	asrs	r1, r6, #5
 800789c:	2201      	movs	r2, #1
 800789e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078a2:	f006 061f 	and.w	r6, r6, #31
 80078a6:	fa02 f606 	lsl.w	r6, r2, r6
 80078aa:	421e      	tst	r6, r3
 80078ac:	bf18      	it	ne
 80078ae:	4617      	movne	r7, r2
 80078b0:	f047 0720 	orr.w	r7, r7, #32
 80078b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078b6:	601c      	str	r4, [r3, #0]
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	601d      	str	r5, [r3, #0]
 80078bc:	e695      	b.n	80075ea <__gethex+0x12a>
 80078be:	4299      	cmp	r1, r3
 80078c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078c4:	d8d8      	bhi.n	8007878 <__gethex+0x3b8>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	459b      	cmp	fp, r3
 80078ca:	db19      	blt.n	8007900 <__gethex+0x440>
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	ee18 0a10 	vmov	r0, s16
 80078d2:	3101      	adds	r1, #1
 80078d4:	f000 f920 	bl	8007b18 <_Balloc>
 80078d8:	4681      	mov	r9, r0
 80078da:	b918      	cbnz	r0, 80078e4 <__gethex+0x424>
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <__gethex+0x488>)
 80078de:	4602      	mov	r2, r0
 80078e0:	2184      	movs	r1, #132	; 0x84
 80078e2:	e6a8      	b.n	8007636 <__gethex+0x176>
 80078e4:	6922      	ldr	r2, [r4, #16]
 80078e6:	3202      	adds	r2, #2
 80078e8:	f104 010c 	add.w	r1, r4, #12
 80078ec:	0092      	lsls	r2, r2, #2
 80078ee:	300c      	adds	r0, #12
 80078f0:	f7fe fbec 	bl	80060cc <memcpy>
 80078f4:	4621      	mov	r1, r4
 80078f6:	ee18 0a10 	vmov	r0, s16
 80078fa:	f000 f94d 	bl	8007b98 <_Bfree>
 80078fe:	464c      	mov	r4, r9
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007908:	6122      	str	r2, [r4, #16]
 800790a:	2201      	movs	r2, #1
 800790c:	615a      	str	r2, [r3, #20]
 800790e:	e7bb      	b.n	8007888 <__gethex+0x3c8>
 8007910:	6922      	ldr	r2, [r4, #16]
 8007912:	455a      	cmp	r2, fp
 8007914:	dd0b      	ble.n	800792e <__gethex+0x46e>
 8007916:	2101      	movs	r1, #1
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff fd69 	bl	80073f0 <rshift>
 800791e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007922:	3501      	adds	r5, #1
 8007924:	42ab      	cmp	r3, r5
 8007926:	f6ff aed0 	blt.w	80076ca <__gethex+0x20a>
 800792a:	2701      	movs	r7, #1
 800792c:	e7c0      	b.n	80078b0 <__gethex+0x3f0>
 800792e:	f016 061f 	ands.w	r6, r6, #31
 8007932:	d0fa      	beq.n	800792a <__gethex+0x46a>
 8007934:	449a      	add	sl, r3
 8007936:	f1c6 0620 	rsb	r6, r6, #32
 800793a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800793e:	f000 f9e1 	bl	8007d04 <__hi0bits>
 8007942:	42b0      	cmp	r0, r6
 8007944:	dbe7      	blt.n	8007916 <__gethex+0x456>
 8007946:	e7f0      	b.n	800792a <__gethex+0x46a>
 8007948:	0800add9 	.word	0x0800add9

0800794c <L_shift>:
 800794c:	f1c2 0208 	rsb	r2, r2, #8
 8007950:	0092      	lsls	r2, r2, #2
 8007952:	b570      	push	{r4, r5, r6, lr}
 8007954:	f1c2 0620 	rsb	r6, r2, #32
 8007958:	6843      	ldr	r3, [r0, #4]
 800795a:	6804      	ldr	r4, [r0, #0]
 800795c:	fa03 f506 	lsl.w	r5, r3, r6
 8007960:	432c      	orrs	r4, r5
 8007962:	40d3      	lsrs	r3, r2
 8007964:	6004      	str	r4, [r0, #0]
 8007966:	f840 3f04 	str.w	r3, [r0, #4]!
 800796a:	4288      	cmp	r0, r1
 800796c:	d3f4      	bcc.n	8007958 <L_shift+0xc>
 800796e:	bd70      	pop	{r4, r5, r6, pc}

08007970 <__match>:
 8007970:	b530      	push	{r4, r5, lr}
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797a:	b914      	cbnz	r4, 8007982 <__match+0x12>
 800797c:	6003      	str	r3, [r0, #0]
 800797e:	2001      	movs	r0, #1
 8007980:	bd30      	pop	{r4, r5, pc}
 8007982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007986:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800798a:	2d19      	cmp	r5, #25
 800798c:	bf98      	it	ls
 800798e:	3220      	addls	r2, #32
 8007990:	42a2      	cmp	r2, r4
 8007992:	d0f0      	beq.n	8007976 <__match+0x6>
 8007994:	2000      	movs	r0, #0
 8007996:	e7f3      	b.n	8007980 <__match+0x10>

08007998 <__hexnan>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	680b      	ldr	r3, [r1, #0]
 800799e:	6801      	ldr	r1, [r0, #0]
 80079a0:	115e      	asrs	r6, r3, #5
 80079a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079a6:	f013 031f 	ands.w	r3, r3, #31
 80079aa:	b087      	sub	sp, #28
 80079ac:	bf18      	it	ne
 80079ae:	3604      	addne	r6, #4
 80079b0:	2500      	movs	r5, #0
 80079b2:	1f37      	subs	r7, r6, #4
 80079b4:	4682      	mov	sl, r0
 80079b6:	4690      	mov	r8, r2
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80079be:	46b9      	mov	r9, r7
 80079c0:	463c      	mov	r4, r7
 80079c2:	9502      	str	r5, [sp, #8]
 80079c4:	46ab      	mov	fp, r5
 80079c6:	784a      	ldrb	r2, [r1, #1]
 80079c8:	1c4b      	adds	r3, r1, #1
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	b342      	cbz	r2, 8007a20 <__hexnan+0x88>
 80079ce:	4610      	mov	r0, r2
 80079d0:	9105      	str	r1, [sp, #20]
 80079d2:	9204      	str	r2, [sp, #16]
 80079d4:	f7ff fd5e 	bl	8007494 <__hexdig_fun>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d14f      	bne.n	8007a7c <__hexnan+0xe4>
 80079dc:	9a04      	ldr	r2, [sp, #16]
 80079de:	9905      	ldr	r1, [sp, #20]
 80079e0:	2a20      	cmp	r2, #32
 80079e2:	d818      	bhi.n	8007a16 <__hexnan+0x7e>
 80079e4:	9b02      	ldr	r3, [sp, #8]
 80079e6:	459b      	cmp	fp, r3
 80079e8:	dd13      	ble.n	8007a12 <__hexnan+0x7a>
 80079ea:	454c      	cmp	r4, r9
 80079ec:	d206      	bcs.n	80079fc <__hexnan+0x64>
 80079ee:	2d07      	cmp	r5, #7
 80079f0:	dc04      	bgt.n	80079fc <__hexnan+0x64>
 80079f2:	462a      	mov	r2, r5
 80079f4:	4649      	mov	r1, r9
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff ffa8 	bl	800794c <L_shift>
 80079fc:	4544      	cmp	r4, r8
 80079fe:	d950      	bls.n	8007aa2 <__hexnan+0x10a>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f1a4 0904 	sub.w	r9, r4, #4
 8007a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a0a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a0e:	464c      	mov	r4, r9
 8007a10:	461d      	mov	r5, r3
 8007a12:	9903      	ldr	r1, [sp, #12]
 8007a14:	e7d7      	b.n	80079c6 <__hexnan+0x2e>
 8007a16:	2a29      	cmp	r2, #41	; 0x29
 8007a18:	d156      	bne.n	8007ac8 <__hexnan+0x130>
 8007a1a:	3102      	adds	r1, #2
 8007a1c:	f8ca 1000 	str.w	r1, [sl]
 8007a20:	f1bb 0f00 	cmp.w	fp, #0
 8007a24:	d050      	beq.n	8007ac8 <__hexnan+0x130>
 8007a26:	454c      	cmp	r4, r9
 8007a28:	d206      	bcs.n	8007a38 <__hexnan+0xa0>
 8007a2a:	2d07      	cmp	r5, #7
 8007a2c:	dc04      	bgt.n	8007a38 <__hexnan+0xa0>
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4649      	mov	r1, r9
 8007a32:	4620      	mov	r0, r4
 8007a34:	f7ff ff8a 	bl	800794c <L_shift>
 8007a38:	4544      	cmp	r4, r8
 8007a3a:	d934      	bls.n	8007aa6 <__hexnan+0x10e>
 8007a3c:	f1a8 0204 	sub.w	r2, r8, #4
 8007a40:	4623      	mov	r3, r4
 8007a42:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a46:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a4a:	429f      	cmp	r7, r3
 8007a4c:	d2f9      	bcs.n	8007a42 <__hexnan+0xaa>
 8007a4e:	1b3b      	subs	r3, r7, r4
 8007a50:	f023 0303 	bic.w	r3, r3, #3
 8007a54:	3304      	adds	r3, #4
 8007a56:	3401      	adds	r4, #1
 8007a58:	3e03      	subs	r6, #3
 8007a5a:	42b4      	cmp	r4, r6
 8007a5c:	bf88      	it	hi
 8007a5e:	2304      	movhi	r3, #4
 8007a60:	4443      	add	r3, r8
 8007a62:	2200      	movs	r2, #0
 8007a64:	f843 2b04 	str.w	r2, [r3], #4
 8007a68:	429f      	cmp	r7, r3
 8007a6a:	d2fb      	bcs.n	8007a64 <__hexnan+0xcc>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	b91b      	cbnz	r3, 8007a78 <__hexnan+0xe0>
 8007a70:	4547      	cmp	r7, r8
 8007a72:	d127      	bne.n	8007ac4 <__hexnan+0x12c>
 8007a74:	2301      	movs	r3, #1
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	2005      	movs	r0, #5
 8007a7a:	e026      	b.n	8007aca <__hexnan+0x132>
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	2d08      	cmp	r5, #8
 8007a80:	f10b 0b01 	add.w	fp, fp, #1
 8007a84:	dd06      	ble.n	8007a94 <__hexnan+0xfc>
 8007a86:	4544      	cmp	r4, r8
 8007a88:	d9c3      	bls.n	8007a12 <__hexnan+0x7a>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a90:	2501      	movs	r5, #1
 8007a92:	3c04      	subs	r4, #4
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	f000 000f 	and.w	r0, r0, #15
 8007a9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	e7b7      	b.n	8007a12 <__hexnan+0x7a>
 8007aa2:	2508      	movs	r5, #8
 8007aa4:	e7b5      	b.n	8007a12 <__hexnan+0x7a>
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0df      	beq.n	8007a6c <__hexnan+0xd4>
 8007aac:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab0:	f1c3 0320 	rsb	r3, r3, #32
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007abc:	401a      	ands	r2, r3
 8007abe:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ac2:	e7d3      	b.n	8007a6c <__hexnan+0xd4>
 8007ac4:	3f04      	subs	r7, #4
 8007ac6:	e7d1      	b.n	8007a6c <__hexnan+0xd4>
 8007ac8:	2004      	movs	r0, #4
 8007aca:	b007      	add	sp, #28
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ad0 <_lseek_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d07      	ldr	r5, [pc, #28]	; (8007af0 <_lseek_r+0x20>)
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	4611      	mov	r1, r2
 8007ada:	2200      	movs	r2, #0
 8007adc:	602a      	str	r2, [r5, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f7fa fc15 	bl	800230e <_lseek>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_lseek_r+0x1e>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_lseek_r+0x1e>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000450 	.word	0x20000450

08007af4 <__ascii_mbtowc>:
 8007af4:	b082      	sub	sp, #8
 8007af6:	b901      	cbnz	r1, 8007afa <__ascii_mbtowc+0x6>
 8007af8:	a901      	add	r1, sp, #4
 8007afa:	b142      	cbz	r2, 8007b0e <__ascii_mbtowc+0x1a>
 8007afc:	b14b      	cbz	r3, 8007b12 <__ascii_mbtowc+0x1e>
 8007afe:	7813      	ldrb	r3, [r2, #0]
 8007b00:	600b      	str	r3, [r1, #0]
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	1e10      	subs	r0, r2, #0
 8007b06:	bf18      	it	ne
 8007b08:	2001      	movne	r0, #1
 8007b0a:	b002      	add	sp, #8
 8007b0c:	4770      	bx	lr
 8007b0e:	4610      	mov	r0, r2
 8007b10:	e7fb      	b.n	8007b0a <__ascii_mbtowc+0x16>
 8007b12:	f06f 0001 	mvn.w	r0, #1
 8007b16:	e7f8      	b.n	8007b0a <__ascii_mbtowc+0x16>

08007b18 <_Balloc>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	b976      	cbnz	r6, 8007b40 <_Balloc+0x28>
 8007b22:	2010      	movs	r0, #16
 8007b24:	f001 fe50 	bl	80097c8 <malloc>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b2c:	b920      	cbnz	r0, 8007b38 <_Balloc+0x20>
 8007b2e:	4b18      	ldr	r3, [pc, #96]	; (8007b90 <_Balloc+0x78>)
 8007b30:	4818      	ldr	r0, [pc, #96]	; (8007b94 <_Balloc+0x7c>)
 8007b32:	2166      	movs	r1, #102	; 0x66
 8007b34:	f001 fc5e 	bl	80093f4 <__assert_func>
 8007b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b3c:	6006      	str	r6, [r0, #0]
 8007b3e:	60c6      	str	r6, [r0, #12]
 8007b40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b42:	68f3      	ldr	r3, [r6, #12]
 8007b44:	b183      	cbz	r3, 8007b68 <_Balloc+0x50>
 8007b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b4e:	b9b8      	cbnz	r0, 8007b80 <_Balloc+0x68>
 8007b50:	2101      	movs	r1, #1
 8007b52:	fa01 f605 	lsl.w	r6, r1, r5
 8007b56:	1d72      	adds	r2, r6, #5
 8007b58:	0092      	lsls	r2, r2, #2
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fc97 	bl	800848e <_calloc_r>
 8007b60:	b160      	cbz	r0, 8007b7c <_Balloc+0x64>
 8007b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b66:	e00e      	b.n	8007b86 <_Balloc+0x6e>
 8007b68:	2221      	movs	r2, #33	; 0x21
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fc8e 	bl	800848e <_calloc_r>
 8007b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b74:	60f0      	str	r0, [r6, #12]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e4      	bne.n	8007b46 <_Balloc+0x2e>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	6802      	ldr	r2, [r0, #0]
 8007b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b86:	2300      	movs	r3, #0
 8007b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b8c:	e7f7      	b.n	8007b7e <_Balloc+0x66>
 8007b8e:	bf00      	nop
 8007b90:	0800ae68 	.word	0x0800ae68
 8007b94:	0800ae7f 	.word	0x0800ae7f

08007b98 <_Bfree>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	b976      	cbnz	r6, 8007bc0 <_Bfree+0x28>
 8007ba2:	2010      	movs	r0, #16
 8007ba4:	f001 fe10 	bl	80097c8 <malloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6268      	str	r0, [r5, #36]	; 0x24
 8007bac:	b920      	cbnz	r0, 8007bb8 <_Bfree+0x20>
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <_Bfree+0x3c>)
 8007bb0:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <_Bfree+0x40>)
 8007bb2:	218a      	movs	r1, #138	; 0x8a
 8007bb4:	f001 fc1e 	bl	80093f4 <__assert_func>
 8007bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bbc:	6006      	str	r6, [r0, #0]
 8007bbe:	60c6      	str	r6, [r0, #12]
 8007bc0:	b13c      	cbz	r4, 8007bd2 <_Bfree+0x3a>
 8007bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bcc:	6021      	str	r1, [r4, #0]
 8007bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	0800ae68 	.word	0x0800ae68
 8007bd8:	0800ae7f 	.word	0x0800ae7f

08007bdc <__multadd>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	690e      	ldr	r6, [r1, #16]
 8007be2:	4607      	mov	r7, r0
 8007be4:	4698      	mov	r8, r3
 8007be6:	460c      	mov	r4, r1
 8007be8:	f101 0014 	add.w	r0, r1, #20
 8007bec:	2300      	movs	r3, #0
 8007bee:	6805      	ldr	r5, [r0, #0]
 8007bf0:	b2a9      	uxth	r1, r5
 8007bf2:	fb02 8101 	mla	r1, r2, r1, r8
 8007bf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007bfa:	0c2d      	lsrs	r5, r5, #16
 8007bfc:	fb02 c505 	mla	r5, r2, r5, ip
 8007c00:	b289      	uxth	r1, r1
 8007c02:	3301      	adds	r3, #1
 8007c04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c08:	429e      	cmp	r6, r3
 8007c0a:	f840 1b04 	str.w	r1, [r0], #4
 8007c0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c12:	dcec      	bgt.n	8007bee <__multadd+0x12>
 8007c14:	f1b8 0f00 	cmp.w	r8, #0
 8007c18:	d022      	beq.n	8007c60 <__multadd+0x84>
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	42b3      	cmp	r3, r6
 8007c1e:	dc19      	bgt.n	8007c54 <__multadd+0x78>
 8007c20:	6861      	ldr	r1, [r4, #4]
 8007c22:	4638      	mov	r0, r7
 8007c24:	3101      	adds	r1, #1
 8007c26:	f7ff ff77 	bl	8007b18 <_Balloc>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b928      	cbnz	r0, 8007c3a <__multadd+0x5e>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <__multadd+0x8c>)
 8007c32:	480e      	ldr	r0, [pc, #56]	; (8007c6c <__multadd+0x90>)
 8007c34:	21b5      	movs	r1, #181	; 0xb5
 8007c36:	f001 fbdd 	bl	80093f4 <__assert_func>
 8007c3a:	6922      	ldr	r2, [r4, #16]
 8007c3c:	3202      	adds	r2, #2
 8007c3e:	f104 010c 	add.w	r1, r4, #12
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	300c      	adds	r0, #12
 8007c46:	f7fe fa41 	bl	80060cc <memcpy>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff ffa3 	bl	8007b98 <_Bfree>
 8007c52:	462c      	mov	r4, r5
 8007c54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c58:	3601      	adds	r6, #1
 8007c5a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007c5e:	6126      	str	r6, [r4, #16]
 8007c60:	4620      	mov	r0, r4
 8007c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c66:	bf00      	nop
 8007c68:	0800add9 	.word	0x0800add9
 8007c6c:	0800ae7f 	.word	0x0800ae7f

08007c70 <__s2b>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	460c      	mov	r4, r1
 8007c76:	4615      	mov	r5, r2
 8007c78:	461f      	mov	r7, r3
 8007c7a:	2209      	movs	r2, #9
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	4606      	mov	r6, r0
 8007c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c84:	2100      	movs	r1, #0
 8007c86:	2201      	movs	r2, #1
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	db09      	blt.n	8007ca0 <__s2b+0x30>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ff43 	bl	8007b18 <_Balloc>
 8007c92:	b940      	cbnz	r0, 8007ca6 <__s2b+0x36>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <__s2b+0x8c>)
 8007c98:	4819      	ldr	r0, [pc, #100]	; (8007d00 <__s2b+0x90>)
 8007c9a:	21ce      	movs	r1, #206	; 0xce
 8007c9c:	f001 fbaa 	bl	80093f4 <__assert_func>
 8007ca0:	0052      	lsls	r2, r2, #1
 8007ca2:	3101      	adds	r1, #1
 8007ca4:	e7f0      	b.n	8007c88 <__s2b+0x18>
 8007ca6:	9b08      	ldr	r3, [sp, #32]
 8007ca8:	6143      	str	r3, [r0, #20]
 8007caa:	2d09      	cmp	r5, #9
 8007cac:	f04f 0301 	mov.w	r3, #1
 8007cb0:	6103      	str	r3, [r0, #16]
 8007cb2:	dd16      	ble.n	8007ce2 <__s2b+0x72>
 8007cb4:	f104 0909 	add.w	r9, r4, #9
 8007cb8:	46c8      	mov	r8, r9
 8007cba:	442c      	add	r4, r5
 8007cbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	3b30      	subs	r3, #48	; 0x30
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ff88 	bl	8007bdc <__multadd>
 8007ccc:	45a0      	cmp	r8, r4
 8007cce:	d1f5      	bne.n	8007cbc <__s2b+0x4c>
 8007cd0:	f1a5 0408 	sub.w	r4, r5, #8
 8007cd4:	444c      	add	r4, r9
 8007cd6:	1b2d      	subs	r5, r5, r4
 8007cd8:	1963      	adds	r3, r4, r5
 8007cda:	42bb      	cmp	r3, r7
 8007cdc:	db04      	blt.n	8007ce8 <__s2b+0x78>
 8007cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	340a      	adds	r4, #10
 8007ce4:	2509      	movs	r5, #9
 8007ce6:	e7f6      	b.n	8007cd6 <__s2b+0x66>
 8007ce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cec:	4601      	mov	r1, r0
 8007cee:	3b30      	subs	r3, #48	; 0x30
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7ff ff72 	bl	8007bdc <__multadd>
 8007cf8:	e7ee      	b.n	8007cd8 <__s2b+0x68>
 8007cfa:	bf00      	nop
 8007cfc:	0800add9 	.word	0x0800add9
 8007d00:	0800ae7f 	.word	0x0800ae7f

08007d04 <__hi0bits>:
 8007d04:	0c03      	lsrs	r3, r0, #16
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	b9d3      	cbnz	r3, 8007d40 <__hi0bits+0x3c>
 8007d0a:	0400      	lsls	r0, r0, #16
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d12:	bf04      	itt	eq
 8007d14:	0200      	lsleq	r0, r0, #8
 8007d16:	3308      	addeq	r3, #8
 8007d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d1c:	bf04      	itt	eq
 8007d1e:	0100      	lsleq	r0, r0, #4
 8007d20:	3304      	addeq	r3, #4
 8007d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d26:	bf04      	itt	eq
 8007d28:	0080      	lsleq	r0, r0, #2
 8007d2a:	3302      	addeq	r3, #2
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	db05      	blt.n	8007d3c <__hi0bits+0x38>
 8007d30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d34:	f103 0301 	add.w	r3, r3, #1
 8007d38:	bf08      	it	eq
 8007d3a:	2320      	moveq	r3, #32
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	4770      	bx	lr
 8007d40:	2300      	movs	r3, #0
 8007d42:	e7e4      	b.n	8007d0e <__hi0bits+0xa>

08007d44 <__lo0bits>:
 8007d44:	6803      	ldr	r3, [r0, #0]
 8007d46:	f013 0207 	ands.w	r2, r3, #7
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	d00b      	beq.n	8007d66 <__lo0bits+0x22>
 8007d4e:	07da      	lsls	r2, r3, #31
 8007d50:	d424      	bmi.n	8007d9c <__lo0bits+0x58>
 8007d52:	0798      	lsls	r0, r3, #30
 8007d54:	bf49      	itett	mi
 8007d56:	085b      	lsrmi	r3, r3, #1
 8007d58:	089b      	lsrpl	r3, r3, #2
 8007d5a:	2001      	movmi	r0, #1
 8007d5c:	600b      	strmi	r3, [r1, #0]
 8007d5e:	bf5c      	itt	pl
 8007d60:	600b      	strpl	r3, [r1, #0]
 8007d62:	2002      	movpl	r0, #2
 8007d64:	4770      	bx	lr
 8007d66:	b298      	uxth	r0, r3
 8007d68:	b9b0      	cbnz	r0, 8007d98 <__lo0bits+0x54>
 8007d6a:	0c1b      	lsrs	r3, r3, #16
 8007d6c:	2010      	movs	r0, #16
 8007d6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d72:	bf04      	itt	eq
 8007d74:	0a1b      	lsreq	r3, r3, #8
 8007d76:	3008      	addeq	r0, #8
 8007d78:	071a      	lsls	r2, r3, #28
 8007d7a:	bf04      	itt	eq
 8007d7c:	091b      	lsreq	r3, r3, #4
 8007d7e:	3004      	addeq	r0, #4
 8007d80:	079a      	lsls	r2, r3, #30
 8007d82:	bf04      	itt	eq
 8007d84:	089b      	lsreq	r3, r3, #2
 8007d86:	3002      	addeq	r0, #2
 8007d88:	07da      	lsls	r2, r3, #31
 8007d8a:	d403      	bmi.n	8007d94 <__lo0bits+0x50>
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	f100 0001 	add.w	r0, r0, #1
 8007d92:	d005      	beq.n	8007da0 <__lo0bits+0x5c>
 8007d94:	600b      	str	r3, [r1, #0]
 8007d96:	4770      	bx	lr
 8007d98:	4610      	mov	r0, r2
 8007d9a:	e7e8      	b.n	8007d6e <__lo0bits+0x2a>
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4770      	bx	lr
 8007da0:	2020      	movs	r0, #32
 8007da2:	4770      	bx	lr

08007da4 <__i2b>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	2101      	movs	r1, #1
 8007daa:	f7ff feb5 	bl	8007b18 <_Balloc>
 8007dae:	4602      	mov	r2, r0
 8007db0:	b928      	cbnz	r0, 8007dbe <__i2b+0x1a>
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <__i2b+0x24>)
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <__i2b+0x28>)
 8007db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dba:	f001 fb1b 	bl	80093f4 <__assert_func>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6144      	str	r4, [r0, #20]
 8007dc2:	6103      	str	r3, [r0, #16]
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop
 8007dc8:	0800add9 	.word	0x0800add9
 8007dcc:	0800ae7f 	.word	0x0800ae7f

08007dd0 <__multiply>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	690a      	ldr	r2, [r1, #16]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	bfb8      	it	lt
 8007dde:	460b      	movlt	r3, r1
 8007de0:	460d      	mov	r5, r1
 8007de2:	bfbc      	itt	lt
 8007de4:	4625      	movlt	r5, r4
 8007de6:	461c      	movlt	r4, r3
 8007de8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007dec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007df0:	68ab      	ldr	r3, [r5, #8]
 8007df2:	6869      	ldr	r1, [r5, #4]
 8007df4:	eb0a 0709 	add.w	r7, sl, r9
 8007df8:	42bb      	cmp	r3, r7
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	bfb8      	it	lt
 8007dfe:	3101      	addlt	r1, #1
 8007e00:	f7ff fe8a 	bl	8007b18 <_Balloc>
 8007e04:	b930      	cbnz	r0, 8007e14 <__multiply+0x44>
 8007e06:	4602      	mov	r2, r0
 8007e08:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <__multiply+0x144>)
 8007e0a:	4843      	ldr	r0, [pc, #268]	; (8007f18 <__multiply+0x148>)
 8007e0c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e10:	f001 faf0 	bl	80093f4 <__assert_func>
 8007e14:	f100 0614 	add.w	r6, r0, #20
 8007e18:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e1c:	4633      	mov	r3, r6
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4543      	cmp	r3, r8
 8007e22:	d31e      	bcc.n	8007e62 <__multiply+0x92>
 8007e24:	f105 0c14 	add.w	ip, r5, #20
 8007e28:	f104 0314 	add.w	r3, r4, #20
 8007e2c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e30:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e34:	9202      	str	r2, [sp, #8]
 8007e36:	ebac 0205 	sub.w	r2, ip, r5
 8007e3a:	3a15      	subs	r2, #21
 8007e3c:	f022 0203 	bic.w	r2, r2, #3
 8007e40:	3204      	adds	r2, #4
 8007e42:	f105 0115 	add.w	r1, r5, #21
 8007e46:	458c      	cmp	ip, r1
 8007e48:	bf38      	it	cc
 8007e4a:	2204      	movcc	r2, #4
 8007e4c:	9201      	str	r2, [sp, #4]
 8007e4e:	9a02      	ldr	r2, [sp, #8]
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d808      	bhi.n	8007e68 <__multiply+0x98>
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	dc55      	bgt.n	8007f06 <__multiply+0x136>
 8007e5a:	6107      	str	r7, [r0, #16]
 8007e5c:	b005      	add	sp, #20
 8007e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e62:	f843 2b04 	str.w	r2, [r3], #4
 8007e66:	e7db      	b.n	8007e20 <__multiply+0x50>
 8007e68:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e6c:	f1ba 0f00 	cmp.w	sl, #0
 8007e70:	d020      	beq.n	8007eb4 <__multiply+0xe4>
 8007e72:	f105 0e14 	add.w	lr, r5, #20
 8007e76:	46b1      	mov	r9, r6
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e7e:	f8d9 b000 	ldr.w	fp, [r9]
 8007e82:	b2a1      	uxth	r1, r4
 8007e84:	fa1f fb8b 	uxth.w	fp, fp
 8007e88:	fb0a b101 	mla	r1, sl, r1, fp
 8007e8c:	4411      	add	r1, r2
 8007e8e:	f8d9 2000 	ldr.w	r2, [r9]
 8007e92:	0c24      	lsrs	r4, r4, #16
 8007e94:	0c12      	lsrs	r2, r2, #16
 8007e96:	fb0a 2404 	mla	r4, sl, r4, r2
 8007e9a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007e9e:	b289      	uxth	r1, r1
 8007ea0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ea4:	45f4      	cmp	ip, lr
 8007ea6:	f849 1b04 	str.w	r1, [r9], #4
 8007eaa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007eae:	d8e4      	bhi.n	8007e7a <__multiply+0xaa>
 8007eb0:	9901      	ldr	r1, [sp, #4]
 8007eb2:	5072      	str	r2, [r6, r1]
 8007eb4:	9a03      	ldr	r2, [sp, #12]
 8007eb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	f1b9 0f00 	cmp.w	r9, #0
 8007ec0:	d01f      	beq.n	8007f02 <__multiply+0x132>
 8007ec2:	6834      	ldr	r4, [r6, #0]
 8007ec4:	f105 0114 	add.w	r1, r5, #20
 8007ec8:	46b6      	mov	lr, r6
 8007eca:	f04f 0a00 	mov.w	sl, #0
 8007ece:	880a      	ldrh	r2, [r1, #0]
 8007ed0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ed4:	fb09 b202 	mla	r2, r9, r2, fp
 8007ed8:	4492      	add	sl, r2
 8007eda:	b2a4      	uxth	r4, r4
 8007edc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ee0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ee4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007ee8:	f8be 2000 	ldrh.w	r2, [lr]
 8007eec:	0c24      	lsrs	r4, r4, #16
 8007eee:	fb09 2404 	mla	r4, r9, r4, r2
 8007ef2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007ef6:	458c      	cmp	ip, r1
 8007ef8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007efc:	d8e7      	bhi.n	8007ece <__multiply+0xfe>
 8007efe:	9a01      	ldr	r2, [sp, #4]
 8007f00:	50b4      	str	r4, [r6, r2]
 8007f02:	3604      	adds	r6, #4
 8007f04:	e7a3      	b.n	8007e4e <__multiply+0x7e>
 8007f06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1a5      	bne.n	8007e5a <__multiply+0x8a>
 8007f0e:	3f01      	subs	r7, #1
 8007f10:	e7a1      	b.n	8007e56 <__multiply+0x86>
 8007f12:	bf00      	nop
 8007f14:	0800add9 	.word	0x0800add9
 8007f18:	0800ae7f 	.word	0x0800ae7f

08007f1c <__pow5mult>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4615      	mov	r5, r2
 8007f22:	f012 0203 	ands.w	r2, r2, #3
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	d007      	beq.n	8007f3c <__pow5mult+0x20>
 8007f2c:	4c25      	ldr	r4, [pc, #148]	; (8007fc4 <__pow5mult+0xa8>)
 8007f2e:	3a01      	subs	r2, #1
 8007f30:	2300      	movs	r3, #0
 8007f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f36:	f7ff fe51 	bl	8007bdc <__multadd>
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	10ad      	asrs	r5, r5, #2
 8007f3e:	d03d      	beq.n	8007fbc <__pow5mult+0xa0>
 8007f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f42:	b97c      	cbnz	r4, 8007f64 <__pow5mult+0x48>
 8007f44:	2010      	movs	r0, #16
 8007f46:	f001 fc3f 	bl	80097c8 <malloc>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f4e:	b928      	cbnz	r0, 8007f5c <__pow5mult+0x40>
 8007f50:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <__pow5mult+0xac>)
 8007f52:	481e      	ldr	r0, [pc, #120]	; (8007fcc <__pow5mult+0xb0>)
 8007f54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f58:	f001 fa4c 	bl	80093f4 <__assert_func>
 8007f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f60:	6004      	str	r4, [r0, #0]
 8007f62:	60c4      	str	r4, [r0, #12]
 8007f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f6c:	b94c      	cbnz	r4, 8007f82 <__pow5mult+0x66>
 8007f6e:	f240 2171 	movw	r1, #625	; 0x271
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ff16 	bl	8007da4 <__i2b>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f7e:	4604      	mov	r4, r0
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	f04f 0900 	mov.w	r9, #0
 8007f86:	07eb      	lsls	r3, r5, #31
 8007f88:	d50a      	bpl.n	8007fa0 <__pow5mult+0x84>
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ff1e 	bl	8007dd0 <__multiply>
 8007f94:	4639      	mov	r1, r7
 8007f96:	4680      	mov	r8, r0
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff fdfd 	bl	8007b98 <_Bfree>
 8007f9e:	4647      	mov	r7, r8
 8007fa0:	106d      	asrs	r5, r5, #1
 8007fa2:	d00b      	beq.n	8007fbc <__pow5mult+0xa0>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	b938      	cbnz	r0, 8007fb8 <__pow5mult+0x9c>
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4621      	mov	r1, r4
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ff0f 	bl	8007dd0 <__multiply>
 8007fb2:	6020      	str	r0, [r4, #0]
 8007fb4:	f8c0 9000 	str.w	r9, [r0]
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e7e4      	b.n	8007f86 <__pow5mult+0x6a>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc2:	bf00      	nop
 8007fc4:	0800afd0 	.word	0x0800afd0
 8007fc8:	0800ae68 	.word	0x0800ae68
 8007fcc:	0800ae7f 	.word	0x0800ae7f

08007fd0 <__lshift>:
 8007fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	6849      	ldr	r1, [r1, #4]
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4691      	mov	r9, r2
 8007fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fe8:	f108 0601 	add.w	r6, r8, #1
 8007fec:	42b3      	cmp	r3, r6
 8007fee:	db0b      	blt.n	8008008 <__lshift+0x38>
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff fd91 	bl	8007b18 <_Balloc>
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	b948      	cbnz	r0, 800800e <__lshift+0x3e>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <__lshift+0xd0>)
 8007ffe:	4829      	ldr	r0, [pc, #164]	; (80080a4 <__lshift+0xd4>)
 8008000:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008004:	f001 f9f6 	bl	80093f4 <__assert_func>
 8008008:	3101      	adds	r1, #1
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	e7ee      	b.n	8007fec <__lshift+0x1c>
 800800e:	2300      	movs	r3, #0
 8008010:	f100 0114 	add.w	r1, r0, #20
 8008014:	f100 0210 	add.w	r2, r0, #16
 8008018:	4618      	mov	r0, r3
 800801a:	4553      	cmp	r3, sl
 800801c:	db33      	blt.n	8008086 <__lshift+0xb6>
 800801e:	6920      	ldr	r0, [r4, #16]
 8008020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008024:	f104 0314 	add.w	r3, r4, #20
 8008028:	f019 091f 	ands.w	r9, r9, #31
 800802c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008034:	d02b      	beq.n	800808e <__lshift+0xbe>
 8008036:	f1c9 0e20 	rsb	lr, r9, #32
 800803a:	468a      	mov	sl, r1
 800803c:	2200      	movs	r2, #0
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	fa00 f009 	lsl.w	r0, r0, r9
 8008044:	4302      	orrs	r2, r0
 8008046:	f84a 2b04 	str.w	r2, [sl], #4
 800804a:	f853 2b04 	ldr.w	r2, [r3], #4
 800804e:	459c      	cmp	ip, r3
 8008050:	fa22 f20e 	lsr.w	r2, r2, lr
 8008054:	d8f3      	bhi.n	800803e <__lshift+0x6e>
 8008056:	ebac 0304 	sub.w	r3, ip, r4
 800805a:	3b15      	subs	r3, #21
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	3304      	adds	r3, #4
 8008062:	f104 0015 	add.w	r0, r4, #21
 8008066:	4584      	cmp	ip, r0
 8008068:	bf38      	it	cc
 800806a:	2304      	movcc	r3, #4
 800806c:	50ca      	str	r2, [r1, r3]
 800806e:	b10a      	cbz	r2, 8008074 <__lshift+0xa4>
 8008070:	f108 0602 	add.w	r6, r8, #2
 8008074:	3e01      	subs	r6, #1
 8008076:	4638      	mov	r0, r7
 8008078:	612e      	str	r6, [r5, #16]
 800807a:	4621      	mov	r1, r4
 800807c:	f7ff fd8c 	bl	8007b98 <_Bfree>
 8008080:	4628      	mov	r0, r5
 8008082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008086:	f842 0f04 	str.w	r0, [r2, #4]!
 800808a:	3301      	adds	r3, #1
 800808c:	e7c5      	b.n	800801a <__lshift+0x4a>
 800808e:	3904      	subs	r1, #4
 8008090:	f853 2b04 	ldr.w	r2, [r3], #4
 8008094:	f841 2f04 	str.w	r2, [r1, #4]!
 8008098:	459c      	cmp	ip, r3
 800809a:	d8f9      	bhi.n	8008090 <__lshift+0xc0>
 800809c:	e7ea      	b.n	8008074 <__lshift+0xa4>
 800809e:	bf00      	nop
 80080a0:	0800add9 	.word	0x0800add9
 80080a4:	0800ae7f 	.word	0x0800ae7f

080080a8 <__mcmp>:
 80080a8:	b530      	push	{r4, r5, lr}
 80080aa:	6902      	ldr	r2, [r0, #16]
 80080ac:	690c      	ldr	r4, [r1, #16]
 80080ae:	1b12      	subs	r2, r2, r4
 80080b0:	d10e      	bne.n	80080d0 <__mcmp+0x28>
 80080b2:	f100 0314 	add.w	r3, r0, #20
 80080b6:	3114      	adds	r1, #20
 80080b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080c8:	42a5      	cmp	r5, r4
 80080ca:	d003      	beq.n	80080d4 <__mcmp+0x2c>
 80080cc:	d305      	bcc.n	80080da <__mcmp+0x32>
 80080ce:	2201      	movs	r2, #1
 80080d0:	4610      	mov	r0, r2
 80080d2:	bd30      	pop	{r4, r5, pc}
 80080d4:	4283      	cmp	r3, r0
 80080d6:	d3f3      	bcc.n	80080c0 <__mcmp+0x18>
 80080d8:	e7fa      	b.n	80080d0 <__mcmp+0x28>
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	e7f7      	b.n	80080d0 <__mcmp+0x28>

080080e0 <__mdiff>:
 80080e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	460c      	mov	r4, r1
 80080e6:	4606      	mov	r6, r0
 80080e8:	4611      	mov	r1, r2
 80080ea:	4620      	mov	r0, r4
 80080ec:	4617      	mov	r7, r2
 80080ee:	f7ff ffdb 	bl	80080a8 <__mcmp>
 80080f2:	1e05      	subs	r5, r0, #0
 80080f4:	d110      	bne.n	8008118 <__mdiff+0x38>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fd0d 	bl	8007b18 <_Balloc>
 80080fe:	b930      	cbnz	r0, 800810e <__mdiff+0x2e>
 8008100:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <__mdiff+0x108>)
 8008102:	4602      	mov	r2, r0
 8008104:	f240 2132 	movw	r1, #562	; 0x232
 8008108:	4838      	ldr	r0, [pc, #224]	; (80081ec <__mdiff+0x10c>)
 800810a:	f001 f973 	bl	80093f4 <__assert_func>
 800810e:	2301      	movs	r3, #1
 8008110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	bfa4      	itt	ge
 800811a:	463b      	movge	r3, r7
 800811c:	4627      	movge	r7, r4
 800811e:	4630      	mov	r0, r6
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	bfa6      	itte	ge
 8008124:	461c      	movge	r4, r3
 8008126:	2500      	movge	r5, #0
 8008128:	2501      	movlt	r5, #1
 800812a:	f7ff fcf5 	bl	8007b18 <_Balloc>
 800812e:	b920      	cbnz	r0, 800813a <__mdiff+0x5a>
 8008130:	4b2d      	ldr	r3, [pc, #180]	; (80081e8 <__mdiff+0x108>)
 8008132:	4602      	mov	r2, r0
 8008134:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008138:	e7e6      	b.n	8008108 <__mdiff+0x28>
 800813a:	693e      	ldr	r6, [r7, #16]
 800813c:	60c5      	str	r5, [r0, #12]
 800813e:	6925      	ldr	r5, [r4, #16]
 8008140:	f107 0114 	add.w	r1, r7, #20
 8008144:	f104 0914 	add.w	r9, r4, #20
 8008148:	f100 0e14 	add.w	lr, r0, #20
 800814c:	f107 0210 	add.w	r2, r7, #16
 8008150:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008154:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008158:	46f2      	mov	sl, lr
 800815a:	2700      	movs	r7, #0
 800815c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008164:	fa1f f883 	uxth.w	r8, r3
 8008168:	fa17 f78b 	uxtah	r7, r7, fp
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	eba7 0808 	sub.w	r8, r7, r8
 8008172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800817a:	fa1f f888 	uxth.w	r8, r8
 800817e:	141f      	asrs	r7, r3, #16
 8008180:	454d      	cmp	r5, r9
 8008182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008186:	f84a 3b04 	str.w	r3, [sl], #4
 800818a:	d8e7      	bhi.n	800815c <__mdiff+0x7c>
 800818c:	1b2b      	subs	r3, r5, r4
 800818e:	3b15      	subs	r3, #21
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	3304      	adds	r3, #4
 8008196:	3415      	adds	r4, #21
 8008198:	42a5      	cmp	r5, r4
 800819a:	bf38      	it	cc
 800819c:	2304      	movcc	r3, #4
 800819e:	4419      	add	r1, r3
 80081a0:	4473      	add	r3, lr
 80081a2:	469e      	mov	lr, r3
 80081a4:	460d      	mov	r5, r1
 80081a6:	4565      	cmp	r5, ip
 80081a8:	d30e      	bcc.n	80081c8 <__mdiff+0xe8>
 80081aa:	f10c 0203 	add.w	r2, ip, #3
 80081ae:	1a52      	subs	r2, r2, r1
 80081b0:	f022 0203 	bic.w	r2, r2, #3
 80081b4:	3903      	subs	r1, #3
 80081b6:	458c      	cmp	ip, r1
 80081b8:	bf38      	it	cc
 80081ba:	2200      	movcc	r2, #0
 80081bc:	441a      	add	r2, r3
 80081be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081c2:	b17b      	cbz	r3, 80081e4 <__mdiff+0x104>
 80081c4:	6106      	str	r6, [r0, #16]
 80081c6:	e7a5      	b.n	8008114 <__mdiff+0x34>
 80081c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80081cc:	fa17 f488 	uxtah	r4, r7, r8
 80081d0:	1422      	asrs	r2, r4, #16
 80081d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80081d6:	b2a4      	uxth	r4, r4
 80081d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081dc:	f84e 4b04 	str.w	r4, [lr], #4
 80081e0:	1417      	asrs	r7, r2, #16
 80081e2:	e7e0      	b.n	80081a6 <__mdiff+0xc6>
 80081e4:	3e01      	subs	r6, #1
 80081e6:	e7ea      	b.n	80081be <__mdiff+0xde>
 80081e8:	0800add9 	.word	0x0800add9
 80081ec:	0800ae7f 	.word	0x0800ae7f

080081f0 <__ulp>:
 80081f0:	b082      	sub	sp, #8
 80081f2:	ed8d 0b00 	vstr	d0, [sp]
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	4912      	ldr	r1, [pc, #72]	; (8008244 <__ulp+0x54>)
 80081fa:	4019      	ands	r1, r3
 80081fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008200:	2900      	cmp	r1, #0
 8008202:	dd05      	ble.n	8008210 <__ulp+0x20>
 8008204:	2200      	movs	r2, #0
 8008206:	460b      	mov	r3, r1
 8008208:	ec43 2b10 	vmov	d0, r2, r3
 800820c:	b002      	add	sp, #8
 800820e:	4770      	bx	lr
 8008210:	4249      	negs	r1, r1
 8008212:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008216:	ea4f 5021 	mov.w	r0, r1, asr #20
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	da04      	bge.n	800822e <__ulp+0x3e>
 8008224:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008228:	fa41 f300 	asr.w	r3, r1, r0
 800822c:	e7ec      	b.n	8008208 <__ulp+0x18>
 800822e:	f1a0 0114 	sub.w	r1, r0, #20
 8008232:	291e      	cmp	r1, #30
 8008234:	bfda      	itte	le
 8008236:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800823a:	fa20 f101 	lsrle.w	r1, r0, r1
 800823e:	2101      	movgt	r1, #1
 8008240:	460a      	mov	r2, r1
 8008242:	e7e1      	b.n	8008208 <__ulp+0x18>
 8008244:	7ff00000 	.word	0x7ff00000

08008248 <__b2d>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	6905      	ldr	r5, [r0, #16]
 800824c:	f100 0714 	add.w	r7, r0, #20
 8008250:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008254:	1f2e      	subs	r6, r5, #4
 8008256:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff fd52 	bl	8007d04 <__hi0bits>
 8008260:	f1c0 0320 	rsb	r3, r0, #32
 8008264:	280a      	cmp	r0, #10
 8008266:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80082e4 <__b2d+0x9c>
 800826a:	600b      	str	r3, [r1, #0]
 800826c:	dc14      	bgt.n	8008298 <__b2d+0x50>
 800826e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008272:	fa24 f10e 	lsr.w	r1, r4, lr
 8008276:	42b7      	cmp	r7, r6
 8008278:	ea41 030c 	orr.w	r3, r1, ip
 800827c:	bf34      	ite	cc
 800827e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008282:	2100      	movcs	r1, #0
 8008284:	3015      	adds	r0, #21
 8008286:	fa04 f000 	lsl.w	r0, r4, r0
 800828a:	fa21 f10e 	lsr.w	r1, r1, lr
 800828e:	ea40 0201 	orr.w	r2, r0, r1
 8008292:	ec43 2b10 	vmov	d0, r2, r3
 8008296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008298:	42b7      	cmp	r7, r6
 800829a:	bf3a      	itte	cc
 800829c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80082a4:	2100      	movcs	r1, #0
 80082a6:	380b      	subs	r0, #11
 80082a8:	d017      	beq.n	80082da <__b2d+0x92>
 80082aa:	f1c0 0c20 	rsb	ip, r0, #32
 80082ae:	fa04 f500 	lsl.w	r5, r4, r0
 80082b2:	42be      	cmp	r6, r7
 80082b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80082b8:	ea45 0504 	orr.w	r5, r5, r4
 80082bc:	bf8c      	ite	hi
 80082be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80082c2:	2400      	movls	r4, #0
 80082c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80082c8:	fa01 f000 	lsl.w	r0, r1, r0
 80082cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80082d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082d4:	ea40 0204 	orr.w	r2, r0, r4
 80082d8:	e7db      	b.n	8008292 <__b2d+0x4a>
 80082da:	ea44 030c 	orr.w	r3, r4, ip
 80082de:	460a      	mov	r2, r1
 80082e0:	e7d7      	b.n	8008292 <__b2d+0x4a>
 80082e2:	bf00      	nop
 80082e4:	3ff00000 	.word	0x3ff00000

080082e8 <__d2b>:
 80082e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4689      	mov	r9, r1
 80082ee:	2101      	movs	r1, #1
 80082f0:	ec57 6b10 	vmov	r6, r7, d0
 80082f4:	4690      	mov	r8, r2
 80082f6:	f7ff fc0f 	bl	8007b18 <_Balloc>
 80082fa:	4604      	mov	r4, r0
 80082fc:	b930      	cbnz	r0, 800830c <__d2b+0x24>
 80082fe:	4602      	mov	r2, r0
 8008300:	4b25      	ldr	r3, [pc, #148]	; (8008398 <__d2b+0xb0>)
 8008302:	4826      	ldr	r0, [pc, #152]	; (800839c <__d2b+0xb4>)
 8008304:	f240 310a 	movw	r1, #778	; 0x30a
 8008308:	f001 f874 	bl	80093f4 <__assert_func>
 800830c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008314:	bb35      	cbnz	r5, 8008364 <__d2b+0x7c>
 8008316:	2e00      	cmp	r6, #0
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	d028      	beq.n	800836e <__d2b+0x86>
 800831c:	4668      	mov	r0, sp
 800831e:	9600      	str	r6, [sp, #0]
 8008320:	f7ff fd10 	bl	8007d44 <__lo0bits>
 8008324:	9900      	ldr	r1, [sp, #0]
 8008326:	b300      	cbz	r0, 800836a <__d2b+0x82>
 8008328:	9a01      	ldr	r2, [sp, #4]
 800832a:	f1c0 0320 	rsb	r3, r0, #32
 800832e:	fa02 f303 	lsl.w	r3, r2, r3
 8008332:	430b      	orrs	r3, r1
 8008334:	40c2      	lsrs	r2, r0
 8008336:	6163      	str	r3, [r4, #20]
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	9b01      	ldr	r3, [sp, #4]
 800833c:	61a3      	str	r3, [r4, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf14      	ite	ne
 8008342:	2202      	movne	r2, #2
 8008344:	2201      	moveq	r2, #1
 8008346:	6122      	str	r2, [r4, #16]
 8008348:	b1d5      	cbz	r5, 8008380 <__d2b+0x98>
 800834a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800834e:	4405      	add	r5, r0
 8008350:	f8c9 5000 	str.w	r5, [r9]
 8008354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008358:	f8c8 0000 	str.w	r0, [r8]
 800835c:	4620      	mov	r0, r4
 800835e:	b003      	add	sp, #12
 8008360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008368:	e7d5      	b.n	8008316 <__d2b+0x2e>
 800836a:	6161      	str	r1, [r4, #20]
 800836c:	e7e5      	b.n	800833a <__d2b+0x52>
 800836e:	a801      	add	r0, sp, #4
 8008370:	f7ff fce8 	bl	8007d44 <__lo0bits>
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	6163      	str	r3, [r4, #20]
 8008378:	2201      	movs	r2, #1
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	3020      	adds	r0, #32
 800837e:	e7e3      	b.n	8008348 <__d2b+0x60>
 8008380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008388:	f8c9 0000 	str.w	r0, [r9]
 800838c:	6918      	ldr	r0, [r3, #16]
 800838e:	f7ff fcb9 	bl	8007d04 <__hi0bits>
 8008392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008396:	e7df      	b.n	8008358 <__d2b+0x70>
 8008398:	0800add9 	.word	0x0800add9
 800839c:	0800ae7f 	.word	0x0800ae7f

080083a0 <__ratio>:
 80083a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4688      	mov	r8, r1
 80083a6:	4669      	mov	r1, sp
 80083a8:	4681      	mov	r9, r0
 80083aa:	f7ff ff4d 	bl	8008248 <__b2d>
 80083ae:	a901      	add	r1, sp, #4
 80083b0:	4640      	mov	r0, r8
 80083b2:	ec55 4b10 	vmov	r4, r5, d0
 80083b6:	f7ff ff47 	bl	8008248 <__b2d>
 80083ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083c2:	eba3 0c02 	sub.w	ip, r3, r2
 80083c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80083d0:	ec51 0b10 	vmov	r0, r1, d0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfd6      	itet	le
 80083d8:	460a      	movle	r2, r1
 80083da:	462a      	movgt	r2, r5
 80083dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083e0:	468b      	mov	fp, r1
 80083e2:	462f      	mov	r7, r5
 80083e4:	bfd4      	ite	le
 80083e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80083ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80083ee:	4620      	mov	r0, r4
 80083f0:	ee10 2a10 	vmov	r2, s0
 80083f4:	465b      	mov	r3, fp
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fa40 	bl	800087c <__aeabi_ddiv>
 80083fc:	ec41 0b10 	vmov	d0, r0, r1
 8008400:	b003      	add	sp, #12
 8008402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008406 <__copybits>:
 8008406:	3901      	subs	r1, #1
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	1149      	asrs	r1, r1, #5
 800840c:	6914      	ldr	r4, [r2, #16]
 800840e:	3101      	adds	r1, #1
 8008410:	f102 0314 	add.w	r3, r2, #20
 8008414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800841c:	1f05      	subs	r5, r0, #4
 800841e:	42a3      	cmp	r3, r4
 8008420:	d30c      	bcc.n	800843c <__copybits+0x36>
 8008422:	1aa3      	subs	r3, r4, r2
 8008424:	3b11      	subs	r3, #17
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	3211      	adds	r2, #17
 800842c:	42a2      	cmp	r2, r4
 800842e:	bf88      	it	hi
 8008430:	2300      	movhi	r3, #0
 8008432:	4418      	add	r0, r3
 8008434:	2300      	movs	r3, #0
 8008436:	4288      	cmp	r0, r1
 8008438:	d305      	bcc.n	8008446 <__copybits+0x40>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008440:	f845 6f04 	str.w	r6, [r5, #4]!
 8008444:	e7eb      	b.n	800841e <__copybits+0x18>
 8008446:	f840 3b04 	str.w	r3, [r0], #4
 800844a:	e7f4      	b.n	8008436 <__copybits+0x30>

0800844c <__any_on>:
 800844c:	f100 0214 	add.w	r2, r0, #20
 8008450:	6900      	ldr	r0, [r0, #16]
 8008452:	114b      	asrs	r3, r1, #5
 8008454:	4298      	cmp	r0, r3
 8008456:	b510      	push	{r4, lr}
 8008458:	db11      	blt.n	800847e <__any_on+0x32>
 800845a:	dd0a      	ble.n	8008472 <__any_on+0x26>
 800845c:	f011 011f 	ands.w	r1, r1, #31
 8008460:	d007      	beq.n	8008472 <__any_on+0x26>
 8008462:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008466:	fa24 f001 	lsr.w	r0, r4, r1
 800846a:	fa00 f101 	lsl.w	r1, r0, r1
 800846e:	428c      	cmp	r4, r1
 8008470:	d10b      	bne.n	800848a <__any_on+0x3e>
 8008472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008476:	4293      	cmp	r3, r2
 8008478:	d803      	bhi.n	8008482 <__any_on+0x36>
 800847a:	2000      	movs	r0, #0
 800847c:	bd10      	pop	{r4, pc}
 800847e:	4603      	mov	r3, r0
 8008480:	e7f7      	b.n	8008472 <__any_on+0x26>
 8008482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008486:	2900      	cmp	r1, #0
 8008488:	d0f5      	beq.n	8008476 <__any_on+0x2a>
 800848a:	2001      	movs	r0, #1
 800848c:	e7f6      	b.n	800847c <__any_on+0x30>

0800848e <_calloc_r>:
 800848e:	b513      	push	{r0, r1, r4, lr}
 8008490:	434a      	muls	r2, r1
 8008492:	4611      	mov	r1, r2
 8008494:	9201      	str	r2, [sp, #4]
 8008496:	f000 f809 	bl	80084ac <_malloc_r>
 800849a:	4604      	mov	r4, r0
 800849c:	b118      	cbz	r0, 80084a6 <_calloc_r+0x18>
 800849e:	9a01      	ldr	r2, [sp, #4]
 80084a0:	2100      	movs	r1, #0
 80084a2:	f7fd fe21 	bl	80060e8 <memset>
 80084a6:	4620      	mov	r0, r4
 80084a8:	b002      	add	sp, #8
 80084aa:	bd10      	pop	{r4, pc}

080084ac <_malloc_r>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	1ccd      	adds	r5, r1, #3
 80084b0:	f025 0503 	bic.w	r5, r5, #3
 80084b4:	3508      	adds	r5, #8
 80084b6:	2d0c      	cmp	r5, #12
 80084b8:	bf38      	it	cc
 80084ba:	250c      	movcc	r5, #12
 80084bc:	2d00      	cmp	r5, #0
 80084be:	4606      	mov	r6, r0
 80084c0:	db01      	blt.n	80084c6 <_malloc_r+0x1a>
 80084c2:	42a9      	cmp	r1, r5
 80084c4:	d903      	bls.n	80084ce <_malloc_r+0x22>
 80084c6:	230c      	movs	r3, #12
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	2000      	movs	r0, #0
 80084cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ce:	f001 f99d 	bl	800980c <__malloc_lock>
 80084d2:	4921      	ldr	r1, [pc, #132]	; (8008558 <_malloc_r+0xac>)
 80084d4:	680a      	ldr	r2, [r1, #0]
 80084d6:	4614      	mov	r4, r2
 80084d8:	b99c      	cbnz	r4, 8008502 <_malloc_r+0x56>
 80084da:	4f20      	ldr	r7, [pc, #128]	; (800855c <_malloc_r+0xb0>)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	b923      	cbnz	r3, 80084ea <_malloc_r+0x3e>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 fe64 	bl	80091b0 <_sbrk_r>
 80084e8:	6038      	str	r0, [r7, #0]
 80084ea:	4629      	mov	r1, r5
 80084ec:	4630      	mov	r0, r6
 80084ee:	f000 fe5f 	bl	80091b0 <_sbrk_r>
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	d123      	bne.n	800853e <_malloc_r+0x92>
 80084f6:	230c      	movs	r3, #12
 80084f8:	6033      	str	r3, [r6, #0]
 80084fa:	4630      	mov	r0, r6
 80084fc:	f001 f98c 	bl	8009818 <__malloc_unlock>
 8008500:	e7e3      	b.n	80084ca <_malloc_r+0x1e>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	1b5b      	subs	r3, r3, r5
 8008506:	d417      	bmi.n	8008538 <_malloc_r+0x8c>
 8008508:	2b0b      	cmp	r3, #11
 800850a:	d903      	bls.n	8008514 <_malloc_r+0x68>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	441c      	add	r4, r3
 8008510:	6025      	str	r5, [r4, #0]
 8008512:	e004      	b.n	800851e <_malloc_r+0x72>
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	42a2      	cmp	r2, r4
 8008518:	bf0c      	ite	eq
 800851a:	600b      	streq	r3, [r1, #0]
 800851c:	6053      	strne	r3, [r2, #4]
 800851e:	4630      	mov	r0, r6
 8008520:	f001 f97a 	bl	8009818 <__malloc_unlock>
 8008524:	f104 000b 	add.w	r0, r4, #11
 8008528:	1d23      	adds	r3, r4, #4
 800852a:	f020 0007 	bic.w	r0, r0, #7
 800852e:	1ac2      	subs	r2, r0, r3
 8008530:	d0cc      	beq.n	80084cc <_malloc_r+0x20>
 8008532:	1a1b      	subs	r3, r3, r0
 8008534:	50a3      	str	r3, [r4, r2]
 8008536:	e7c9      	b.n	80084cc <_malloc_r+0x20>
 8008538:	4622      	mov	r2, r4
 800853a:	6864      	ldr	r4, [r4, #4]
 800853c:	e7cc      	b.n	80084d8 <_malloc_r+0x2c>
 800853e:	1cc4      	adds	r4, r0, #3
 8008540:	f024 0403 	bic.w	r4, r4, #3
 8008544:	42a0      	cmp	r0, r4
 8008546:	d0e3      	beq.n	8008510 <_malloc_r+0x64>
 8008548:	1a21      	subs	r1, r4, r0
 800854a:	4630      	mov	r0, r6
 800854c:	f000 fe30 	bl	80091b0 <_sbrk_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d1dd      	bne.n	8008510 <_malloc_r+0x64>
 8008554:	e7cf      	b.n	80084f6 <_malloc_r+0x4a>
 8008556:	bf00      	nop
 8008558:	20000208 	.word	0x20000208
 800855c:	2000020c 	.word	0x2000020c

08008560 <__ssputs_r>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	688e      	ldr	r6, [r1, #8]
 8008566:	429e      	cmp	r6, r3
 8008568:	4682      	mov	sl, r0
 800856a:	460c      	mov	r4, r1
 800856c:	4690      	mov	r8, r2
 800856e:	461f      	mov	r7, r3
 8008570:	d838      	bhi.n	80085e4 <__ssputs_r+0x84>
 8008572:	898a      	ldrh	r2, [r1, #12]
 8008574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008578:	d032      	beq.n	80085e0 <__ssputs_r+0x80>
 800857a:	6825      	ldr	r5, [r4, #0]
 800857c:	6909      	ldr	r1, [r1, #16]
 800857e:	eba5 0901 	sub.w	r9, r5, r1
 8008582:	6965      	ldr	r5, [r4, #20]
 8008584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800858c:	3301      	adds	r3, #1
 800858e:	444b      	add	r3, r9
 8008590:	106d      	asrs	r5, r5, #1
 8008592:	429d      	cmp	r5, r3
 8008594:	bf38      	it	cc
 8008596:	461d      	movcc	r5, r3
 8008598:	0553      	lsls	r3, r2, #21
 800859a:	d531      	bpl.n	8008600 <__ssputs_r+0xa0>
 800859c:	4629      	mov	r1, r5
 800859e:	f7ff ff85 	bl	80084ac <_malloc_r>
 80085a2:	4606      	mov	r6, r0
 80085a4:	b950      	cbnz	r0, 80085bc <__ssputs_r+0x5c>
 80085a6:	230c      	movs	r3, #12
 80085a8:	f8ca 3000 	str.w	r3, [sl]
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085bc:	6921      	ldr	r1, [r4, #16]
 80085be:	464a      	mov	r2, r9
 80085c0:	f7fd fd84 	bl	80060cc <memcpy>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	6126      	str	r6, [r4, #16]
 80085d2:	6165      	str	r5, [r4, #20]
 80085d4:	444e      	add	r6, r9
 80085d6:	eba5 0509 	sub.w	r5, r5, r9
 80085da:	6026      	str	r6, [r4, #0]
 80085dc:	60a5      	str	r5, [r4, #8]
 80085de:	463e      	mov	r6, r7
 80085e0:	42be      	cmp	r6, r7
 80085e2:	d900      	bls.n	80085e6 <__ssputs_r+0x86>
 80085e4:	463e      	mov	r6, r7
 80085e6:	4632      	mov	r2, r6
 80085e8:	6820      	ldr	r0, [r4, #0]
 80085ea:	4641      	mov	r1, r8
 80085ec:	f001 f8f4 	bl	80097d8 <memmove>
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	1b9b      	subs	r3, r3, r6
 80085f6:	4432      	add	r2, r6
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	2000      	movs	r0, #0
 80085fe:	e7db      	b.n	80085b8 <__ssputs_r+0x58>
 8008600:	462a      	mov	r2, r5
 8008602:	f001 f95f 	bl	80098c4 <_realloc_r>
 8008606:	4606      	mov	r6, r0
 8008608:	2800      	cmp	r0, #0
 800860a:	d1e1      	bne.n	80085d0 <__ssputs_r+0x70>
 800860c:	6921      	ldr	r1, [r4, #16]
 800860e:	4650      	mov	r0, sl
 8008610:	f001 f908 	bl	8009824 <_free_r>
 8008614:	e7c7      	b.n	80085a6 <__ssputs_r+0x46>
	...

08008618 <_svfiprintf_r>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4698      	mov	r8, r3
 800861e:	898b      	ldrh	r3, [r1, #12]
 8008620:	061b      	lsls	r3, r3, #24
 8008622:	b09d      	sub	sp, #116	; 0x74
 8008624:	4607      	mov	r7, r0
 8008626:	460d      	mov	r5, r1
 8008628:	4614      	mov	r4, r2
 800862a:	d50e      	bpl.n	800864a <_svfiprintf_r+0x32>
 800862c:	690b      	ldr	r3, [r1, #16]
 800862e:	b963      	cbnz	r3, 800864a <_svfiprintf_r+0x32>
 8008630:	2140      	movs	r1, #64	; 0x40
 8008632:	f7ff ff3b 	bl	80084ac <_malloc_r>
 8008636:	6028      	str	r0, [r5, #0]
 8008638:	6128      	str	r0, [r5, #16]
 800863a:	b920      	cbnz	r0, 8008646 <_svfiprintf_r+0x2e>
 800863c:	230c      	movs	r3, #12
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	e0d1      	b.n	80087ea <_svfiprintf_r+0x1d2>
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	616b      	str	r3, [r5, #20]
 800864a:	2300      	movs	r3, #0
 800864c:	9309      	str	r3, [sp, #36]	; 0x24
 800864e:	2320      	movs	r3, #32
 8008650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008654:	f8cd 800c 	str.w	r8, [sp, #12]
 8008658:	2330      	movs	r3, #48	; 0x30
 800865a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008804 <_svfiprintf_r+0x1ec>
 800865e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008662:	f04f 0901 	mov.w	r9, #1
 8008666:	4623      	mov	r3, r4
 8008668:	469a      	mov	sl, r3
 800866a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866e:	b10a      	cbz	r2, 8008674 <_svfiprintf_r+0x5c>
 8008670:	2a25      	cmp	r2, #37	; 0x25
 8008672:	d1f9      	bne.n	8008668 <_svfiprintf_r+0x50>
 8008674:	ebba 0b04 	subs.w	fp, sl, r4
 8008678:	d00b      	beq.n	8008692 <_svfiprintf_r+0x7a>
 800867a:	465b      	mov	r3, fp
 800867c:	4622      	mov	r2, r4
 800867e:	4629      	mov	r1, r5
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff ff6d 	bl	8008560 <__ssputs_r>
 8008686:	3001      	adds	r0, #1
 8008688:	f000 80aa 	beq.w	80087e0 <_svfiprintf_r+0x1c8>
 800868c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868e:	445a      	add	r2, fp
 8008690:	9209      	str	r2, [sp, #36]	; 0x24
 8008692:	f89a 3000 	ldrb.w	r3, [sl]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 80a2 	beq.w	80087e0 <_svfiprintf_r+0x1c8>
 800869c:	2300      	movs	r3, #0
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a6:	f10a 0a01 	add.w	sl, sl, #1
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	9307      	str	r3, [sp, #28]
 80086ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b2:	931a      	str	r3, [sp, #104]	; 0x68
 80086b4:	4654      	mov	r4, sl
 80086b6:	2205      	movs	r2, #5
 80086b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086bc:	4851      	ldr	r0, [pc, #324]	; (8008804 <_svfiprintf_r+0x1ec>)
 80086be:	f7f7 fda7 	bl	8000210 <memchr>
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	b9d8      	cbnz	r0, 80086fe <_svfiprintf_r+0xe6>
 80086c6:	06d0      	lsls	r0, r2, #27
 80086c8:	bf44      	itt	mi
 80086ca:	2320      	movmi	r3, #32
 80086cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d0:	0711      	lsls	r1, r2, #28
 80086d2:	bf44      	itt	mi
 80086d4:	232b      	movmi	r3, #43	; 0x2b
 80086d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b2a      	cmp	r3, #42	; 0x2a
 80086e0:	d015      	beq.n	800870e <_svfiprintf_r+0xf6>
 80086e2:	9a07      	ldr	r2, [sp, #28]
 80086e4:	4654      	mov	r4, sl
 80086e6:	2000      	movs	r0, #0
 80086e8:	f04f 0c0a 	mov.w	ip, #10
 80086ec:	4621      	mov	r1, r4
 80086ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f2:	3b30      	subs	r3, #48	; 0x30
 80086f4:	2b09      	cmp	r3, #9
 80086f6:	d94e      	bls.n	8008796 <_svfiprintf_r+0x17e>
 80086f8:	b1b0      	cbz	r0, 8008728 <_svfiprintf_r+0x110>
 80086fa:	9207      	str	r2, [sp, #28]
 80086fc:	e014      	b.n	8008728 <_svfiprintf_r+0x110>
 80086fe:	eba0 0308 	sub.w	r3, r0, r8
 8008702:	fa09 f303 	lsl.w	r3, r9, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	46a2      	mov	sl, r4
 800870c:	e7d2      	b.n	80086b4 <_svfiprintf_r+0x9c>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	1d19      	adds	r1, r3, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	9103      	str	r1, [sp, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	bfbb      	ittet	lt
 800871a:	425b      	neglt	r3, r3
 800871c:	f042 0202 	orrlt.w	r2, r2, #2
 8008720:	9307      	strge	r3, [sp, #28]
 8008722:	9307      	strlt	r3, [sp, #28]
 8008724:	bfb8      	it	lt
 8008726:	9204      	strlt	r2, [sp, #16]
 8008728:	7823      	ldrb	r3, [r4, #0]
 800872a:	2b2e      	cmp	r3, #46	; 0x2e
 800872c:	d10c      	bne.n	8008748 <_svfiprintf_r+0x130>
 800872e:	7863      	ldrb	r3, [r4, #1]
 8008730:	2b2a      	cmp	r3, #42	; 0x2a
 8008732:	d135      	bne.n	80087a0 <_svfiprintf_r+0x188>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	1d1a      	adds	r2, r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	9203      	str	r2, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfb8      	it	lt
 8008740:	f04f 33ff 	movlt.w	r3, #4294967295
 8008744:	3402      	adds	r4, #2
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008814 <_svfiprintf_r+0x1fc>
 800874c:	7821      	ldrb	r1, [r4, #0]
 800874e:	2203      	movs	r2, #3
 8008750:	4650      	mov	r0, sl
 8008752:	f7f7 fd5d 	bl	8000210 <memchr>
 8008756:	b140      	cbz	r0, 800876a <_svfiprintf_r+0x152>
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	eba0 000a 	sub.w	r0, r0, sl
 800875e:	fa03 f000 	lsl.w	r0, r3, r0
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	4303      	orrs	r3, r0
 8008766:	3401      	adds	r4, #1
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876e:	4826      	ldr	r0, [pc, #152]	; (8008808 <_svfiprintf_r+0x1f0>)
 8008770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008774:	2206      	movs	r2, #6
 8008776:	f7f7 fd4b 	bl	8000210 <memchr>
 800877a:	2800      	cmp	r0, #0
 800877c:	d038      	beq.n	80087f0 <_svfiprintf_r+0x1d8>
 800877e:	4b23      	ldr	r3, [pc, #140]	; (800880c <_svfiprintf_r+0x1f4>)
 8008780:	bb1b      	cbnz	r3, 80087ca <_svfiprintf_r+0x1b2>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	3307      	adds	r3, #7
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	3308      	adds	r3, #8
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008790:	4433      	add	r3, r6
 8008792:	9309      	str	r3, [sp, #36]	; 0x24
 8008794:	e767      	b.n	8008666 <_svfiprintf_r+0x4e>
 8008796:	fb0c 3202 	mla	r2, ip, r2, r3
 800879a:	460c      	mov	r4, r1
 800879c:	2001      	movs	r0, #1
 800879e:	e7a5      	b.n	80086ec <_svfiprintf_r+0xd4>
 80087a0:	2300      	movs	r3, #0
 80087a2:	3401      	adds	r4, #1
 80087a4:	9305      	str	r3, [sp, #20]
 80087a6:	4619      	mov	r1, r3
 80087a8:	f04f 0c0a 	mov.w	ip, #10
 80087ac:	4620      	mov	r0, r4
 80087ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b2:	3a30      	subs	r2, #48	; 0x30
 80087b4:	2a09      	cmp	r2, #9
 80087b6:	d903      	bls.n	80087c0 <_svfiprintf_r+0x1a8>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0c5      	beq.n	8008748 <_svfiprintf_r+0x130>
 80087bc:	9105      	str	r1, [sp, #20]
 80087be:	e7c3      	b.n	8008748 <_svfiprintf_r+0x130>
 80087c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c4:	4604      	mov	r4, r0
 80087c6:	2301      	movs	r3, #1
 80087c8:	e7f0      	b.n	80087ac <_svfiprintf_r+0x194>
 80087ca:	ab03      	add	r3, sp, #12
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	462a      	mov	r2, r5
 80087d0:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <_svfiprintf_r+0x1f8>)
 80087d2:	a904      	add	r1, sp, #16
 80087d4:	4638      	mov	r0, r7
 80087d6:	f3af 8000 	nop.w
 80087da:	1c42      	adds	r2, r0, #1
 80087dc:	4606      	mov	r6, r0
 80087de:	d1d6      	bne.n	800878e <_svfiprintf_r+0x176>
 80087e0:	89ab      	ldrh	r3, [r5, #12]
 80087e2:	065b      	lsls	r3, r3, #25
 80087e4:	f53f af2c 	bmi.w	8008640 <_svfiprintf_r+0x28>
 80087e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ea:	b01d      	add	sp, #116	; 0x74
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	ab03      	add	r3, sp, #12
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	462a      	mov	r2, r5
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <_svfiprintf_r+0x1f8>)
 80087f8:	a904      	add	r1, sp, #16
 80087fa:	4638      	mov	r0, r7
 80087fc:	f000 fa4c 	bl	8008c98 <_printf_i>
 8008800:	e7eb      	b.n	80087da <_svfiprintf_r+0x1c2>
 8008802:	bf00      	nop
 8008804:	0800afdc 	.word	0x0800afdc
 8008808:	0800afe6 	.word	0x0800afe6
 800880c:	00000000 	.word	0x00000000
 8008810:	08008561 	.word	0x08008561
 8008814:	0800afe2 	.word	0x0800afe2

08008818 <_sungetc_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	1c4b      	adds	r3, r1, #1
 800881c:	4614      	mov	r4, r2
 800881e:	d103      	bne.n	8008828 <_sungetc_r+0x10>
 8008820:	f04f 35ff 	mov.w	r5, #4294967295
 8008824:	4628      	mov	r0, r5
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	8993      	ldrh	r3, [r2, #12]
 800882a:	f023 0320 	bic.w	r3, r3, #32
 800882e:	8193      	strh	r3, [r2, #12]
 8008830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008832:	6852      	ldr	r2, [r2, #4]
 8008834:	b2cd      	uxtb	r5, r1
 8008836:	b18b      	cbz	r3, 800885c <_sungetc_r+0x44>
 8008838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800883a:	4293      	cmp	r3, r2
 800883c:	dd08      	ble.n	8008850 <_sungetc_r+0x38>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	3301      	adds	r3, #1
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	e7e9      	b.n	8008824 <_sungetc_r+0xc>
 8008850:	4621      	mov	r1, r4
 8008852:	f000 fd87 	bl	8009364 <__submore>
 8008856:	2800      	cmp	r0, #0
 8008858:	d0f1      	beq.n	800883e <_sungetc_r+0x26>
 800885a:	e7e1      	b.n	8008820 <_sungetc_r+0x8>
 800885c:	6921      	ldr	r1, [r4, #16]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	b151      	cbz	r1, 8008878 <_sungetc_r+0x60>
 8008862:	4299      	cmp	r1, r3
 8008864:	d208      	bcs.n	8008878 <_sungetc_r+0x60>
 8008866:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800886a:	42a9      	cmp	r1, r5
 800886c:	d104      	bne.n	8008878 <_sungetc_r+0x60>
 800886e:	3b01      	subs	r3, #1
 8008870:	3201      	adds	r2, #1
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	e7d5      	b.n	8008824 <_sungetc_r+0xc>
 8008878:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800887c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008880:	6363      	str	r3, [r4, #52]	; 0x34
 8008882:	2303      	movs	r3, #3
 8008884:	63a3      	str	r3, [r4, #56]	; 0x38
 8008886:	4623      	mov	r3, r4
 8008888:	f803 5f46 	strb.w	r5, [r3, #70]!
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	2301      	movs	r3, #1
 8008890:	e7dc      	b.n	800884c <_sungetc_r+0x34>

08008892 <__ssrefill_r>:
 8008892:	b510      	push	{r4, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008898:	b169      	cbz	r1, 80088b6 <__ssrefill_r+0x24>
 800889a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800889e:	4299      	cmp	r1, r3
 80088a0:	d001      	beq.n	80088a6 <__ssrefill_r+0x14>
 80088a2:	f000 ffbf 	bl	8009824 <_free_r>
 80088a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	2000      	movs	r0, #0
 80088ac:	6360      	str	r0, [r4, #52]	; 0x34
 80088ae:	b113      	cbz	r3, 80088b6 <__ssrefill_r+0x24>
 80088b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd10      	pop	{r4, pc}
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0320 	orr.w	r3, r3, #32
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	e7f3      	b.n	80088b4 <__ssrefill_r+0x22>

080088cc <__ssvfiscanf_r>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	460c      	mov	r4, r1
 80088d2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80088d6:	2100      	movs	r1, #0
 80088d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80088dc:	49b2      	ldr	r1, [pc, #712]	; (8008ba8 <__ssvfiscanf_r+0x2dc>)
 80088de:	91a0      	str	r1, [sp, #640]	; 0x280
 80088e0:	f10d 0804 	add.w	r8, sp, #4
 80088e4:	49b1      	ldr	r1, [pc, #708]	; (8008bac <__ssvfiscanf_r+0x2e0>)
 80088e6:	4fb2      	ldr	r7, [pc, #712]	; (8008bb0 <__ssvfiscanf_r+0x2e4>)
 80088e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008bb4 <__ssvfiscanf_r+0x2e8>
 80088ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80088f0:	4606      	mov	r6, r0
 80088f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	f892 a000 	ldrb.w	sl, [r2]
 80088fa:	f1ba 0f00 	cmp.w	sl, #0
 80088fe:	f000 8151 	beq.w	8008ba4 <__ssvfiscanf_r+0x2d8>
 8008902:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008906:	f013 0308 	ands.w	r3, r3, #8
 800890a:	f102 0501 	add.w	r5, r2, #1
 800890e:	d019      	beq.n	8008944 <__ssvfiscanf_r+0x78>
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd0f      	ble.n	8008936 <__ssvfiscanf_r+0x6a>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	5cba      	ldrb	r2, [r7, r2]
 800891c:	0712      	lsls	r2, r2, #28
 800891e:	d401      	bmi.n	8008924 <__ssvfiscanf_r+0x58>
 8008920:	462a      	mov	r2, r5
 8008922:	e7e8      	b.n	80088f6 <__ssvfiscanf_r+0x2a>
 8008924:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008926:	3201      	adds	r2, #1
 8008928:	9245      	str	r2, [sp, #276]	; 0x114
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	3301      	adds	r3, #1
 800892e:	3a01      	subs	r2, #1
 8008930:	6062      	str	r2, [r4, #4]
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	e7ec      	b.n	8008910 <__ssvfiscanf_r+0x44>
 8008936:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008938:	4621      	mov	r1, r4
 800893a:	4630      	mov	r0, r6
 800893c:	4798      	blx	r3
 800893e:	2800      	cmp	r0, #0
 8008940:	d0e9      	beq.n	8008916 <__ssvfiscanf_r+0x4a>
 8008942:	e7ed      	b.n	8008920 <__ssvfiscanf_r+0x54>
 8008944:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008948:	f040 8083 	bne.w	8008a52 <__ssvfiscanf_r+0x186>
 800894c:	9341      	str	r3, [sp, #260]	; 0x104
 800894e:	9343      	str	r3, [sp, #268]	; 0x10c
 8008950:	7853      	ldrb	r3, [r2, #1]
 8008952:	2b2a      	cmp	r3, #42	; 0x2a
 8008954:	bf02      	ittt	eq
 8008956:	2310      	moveq	r3, #16
 8008958:	1c95      	addeq	r5, r2, #2
 800895a:	9341      	streq	r3, [sp, #260]	; 0x104
 800895c:	220a      	movs	r2, #10
 800895e:	46ab      	mov	fp, r5
 8008960:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008964:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008968:	2b09      	cmp	r3, #9
 800896a:	d91d      	bls.n	80089a8 <__ssvfiscanf_r+0xdc>
 800896c:	4891      	ldr	r0, [pc, #580]	; (8008bb4 <__ssvfiscanf_r+0x2e8>)
 800896e:	2203      	movs	r2, #3
 8008970:	f7f7 fc4e 	bl	8000210 <memchr>
 8008974:	b140      	cbz	r0, 8008988 <__ssvfiscanf_r+0xbc>
 8008976:	2301      	movs	r3, #1
 8008978:	eba0 0009 	sub.w	r0, r0, r9
 800897c:	fa03 f000 	lsl.w	r0, r3, r0
 8008980:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008982:	4318      	orrs	r0, r3
 8008984:	9041      	str	r0, [sp, #260]	; 0x104
 8008986:	465d      	mov	r5, fp
 8008988:	f815 3b01 	ldrb.w	r3, [r5], #1
 800898c:	2b78      	cmp	r3, #120	; 0x78
 800898e:	d806      	bhi.n	800899e <__ssvfiscanf_r+0xd2>
 8008990:	2b57      	cmp	r3, #87	; 0x57
 8008992:	d810      	bhi.n	80089b6 <__ssvfiscanf_r+0xea>
 8008994:	2b25      	cmp	r3, #37	; 0x25
 8008996:	d05c      	beq.n	8008a52 <__ssvfiscanf_r+0x186>
 8008998:	d856      	bhi.n	8008a48 <__ssvfiscanf_r+0x17c>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d074      	beq.n	8008a88 <__ssvfiscanf_r+0x1bc>
 800899e:	2303      	movs	r3, #3
 80089a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80089a2:	230a      	movs	r3, #10
 80089a4:	9342      	str	r3, [sp, #264]	; 0x108
 80089a6:	e081      	b.n	8008aac <__ssvfiscanf_r+0x1e0>
 80089a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80089aa:	fb02 1303 	mla	r3, r2, r3, r1
 80089ae:	3b30      	subs	r3, #48	; 0x30
 80089b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80089b2:	465d      	mov	r5, fp
 80089b4:	e7d3      	b.n	800895e <__ssvfiscanf_r+0x92>
 80089b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80089ba:	2a20      	cmp	r2, #32
 80089bc:	d8ef      	bhi.n	800899e <__ssvfiscanf_r+0xd2>
 80089be:	a101      	add	r1, pc, #4	; (adr r1, 80089c4 <__ssvfiscanf_r+0xf8>)
 80089c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089c4:	08008a97 	.word	0x08008a97
 80089c8:	0800899f 	.word	0x0800899f
 80089cc:	0800899f 	.word	0x0800899f
 80089d0:	08008af5 	.word	0x08008af5
 80089d4:	0800899f 	.word	0x0800899f
 80089d8:	0800899f 	.word	0x0800899f
 80089dc:	0800899f 	.word	0x0800899f
 80089e0:	0800899f 	.word	0x0800899f
 80089e4:	0800899f 	.word	0x0800899f
 80089e8:	0800899f 	.word	0x0800899f
 80089ec:	0800899f 	.word	0x0800899f
 80089f0:	08008b0b 	.word	0x08008b0b
 80089f4:	08008ae1 	.word	0x08008ae1
 80089f8:	08008a4f 	.word	0x08008a4f
 80089fc:	08008a4f 	.word	0x08008a4f
 8008a00:	08008a4f 	.word	0x08008a4f
 8008a04:	0800899f 	.word	0x0800899f
 8008a08:	08008ae5 	.word	0x08008ae5
 8008a0c:	0800899f 	.word	0x0800899f
 8008a10:	0800899f 	.word	0x0800899f
 8008a14:	0800899f 	.word	0x0800899f
 8008a18:	0800899f 	.word	0x0800899f
 8008a1c:	08008b1b 	.word	0x08008b1b
 8008a20:	08008aed 	.word	0x08008aed
 8008a24:	08008a8f 	.word	0x08008a8f
 8008a28:	0800899f 	.word	0x0800899f
 8008a2c:	0800899f 	.word	0x0800899f
 8008a30:	08008b17 	.word	0x08008b17
 8008a34:	0800899f 	.word	0x0800899f
 8008a38:	08008ae1 	.word	0x08008ae1
 8008a3c:	0800899f 	.word	0x0800899f
 8008a40:	0800899f 	.word	0x0800899f
 8008a44:	08008a97 	.word	0x08008a97
 8008a48:	3b45      	subs	r3, #69	; 0x45
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d8a7      	bhi.n	800899e <__ssvfiscanf_r+0xd2>
 8008a4e:	2305      	movs	r3, #5
 8008a50:	e02b      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd0d      	ble.n	8008a74 <__ssvfiscanf_r+0x1a8>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	4552      	cmp	r2, sl
 8008a5e:	f040 80a1 	bne.w	8008ba4 <__ssvfiscanf_r+0x2d8>
 8008a62:	3301      	adds	r3, #1
 8008a64:	6862      	ldr	r2, [r4, #4]
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	6062      	str	r2, [r4, #4]
 8008a70:	9345      	str	r3, [sp, #276]	; 0x114
 8008a72:	e755      	b.n	8008920 <__ssvfiscanf_r+0x54>
 8008a74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a76:	4621      	mov	r1, r4
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4798      	blx	r3
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d0eb      	beq.n	8008a58 <__ssvfiscanf_r+0x18c>
 8008a80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f040 8084 	bne.w	8008b90 <__ssvfiscanf_r+0x2c4>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e086      	b.n	8008b9c <__ssvfiscanf_r+0x2d0>
 8008a8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a90:	f042 0220 	orr.w	r2, r2, #32
 8008a94:	9241      	str	r2, [sp, #260]	; 0x104
 8008a96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a9c:	9241      	str	r2, [sp, #260]	; 0x104
 8008a9e:	2210      	movs	r2, #16
 8008aa0:	2b6f      	cmp	r3, #111	; 0x6f
 8008aa2:	9242      	str	r2, [sp, #264]	; 0x108
 8008aa4:	bf34      	ite	cc
 8008aa6:	2303      	movcc	r3, #3
 8008aa8:	2304      	movcs	r3, #4
 8008aaa:	9347      	str	r3, [sp, #284]	; 0x11c
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd41      	ble.n	8008b36 <__ssvfiscanf_r+0x26a>
 8008ab2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ab4:	0659      	lsls	r1, r3, #25
 8008ab6:	d404      	bmi.n	8008ac2 <__ssvfiscanf_r+0x1f6>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	5cba      	ldrb	r2, [r7, r2]
 8008abe:	0712      	lsls	r2, r2, #28
 8008ac0:	d440      	bmi.n	8008b44 <__ssvfiscanf_r+0x278>
 8008ac2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	dc4f      	bgt.n	8008b68 <__ssvfiscanf_r+0x29c>
 8008ac8:	466b      	mov	r3, sp
 8008aca:	4622      	mov	r2, r4
 8008acc:	a941      	add	r1, sp, #260	; 0x104
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 fa08 	bl	8008ee4 <_scanf_chars>
 8008ad4:	2801      	cmp	r0, #1
 8008ad6:	d065      	beq.n	8008ba4 <__ssvfiscanf_r+0x2d8>
 8008ad8:	2802      	cmp	r0, #2
 8008ada:	f47f af21 	bne.w	8008920 <__ssvfiscanf_r+0x54>
 8008ade:	e7cf      	b.n	8008a80 <__ssvfiscanf_r+0x1b4>
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	e7dd      	b.n	8008aa0 <__ssvfiscanf_r+0x1d4>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9342      	str	r3, [sp, #264]	; 0x108
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e7de      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008aec:	2308      	movs	r3, #8
 8008aee:	9342      	str	r3, [sp, #264]	; 0x108
 8008af0:	2304      	movs	r3, #4
 8008af2:	e7da      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008af4:	4629      	mov	r1, r5
 8008af6:	4640      	mov	r0, r8
 8008af8:	f000 fb6a 	bl	80091d0 <__sccl>
 8008afc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b02:	9341      	str	r3, [sp, #260]	; 0x104
 8008b04:	4605      	mov	r5, r0
 8008b06:	2301      	movs	r3, #1
 8008b08:	e7cf      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008b0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b10:	9341      	str	r3, [sp, #260]	; 0x104
 8008b12:	2300      	movs	r3, #0
 8008b14:	e7c9      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e7c7      	b.n	8008aaa <__ssvfiscanf_r+0x1de>
 8008b1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008b1c:	06c3      	lsls	r3, r0, #27
 8008b1e:	f53f aeff 	bmi.w	8008920 <__ssvfiscanf_r+0x54>
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b26:	1d19      	adds	r1, r3, #4
 8008b28:	9100      	str	r1, [sp, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	07c0      	lsls	r0, r0, #31
 8008b2e:	bf4c      	ite	mi
 8008b30:	801a      	strhmi	r2, [r3, #0]
 8008b32:	601a      	strpl	r2, [r3, #0]
 8008b34:	e6f4      	b.n	8008920 <__ssvfiscanf_r+0x54>
 8008b36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4798      	blx	r3
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0b7      	beq.n	8008ab2 <__ssvfiscanf_r+0x1e6>
 8008b42:	e79d      	b.n	8008a80 <__ssvfiscanf_r+0x1b4>
 8008b44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b46:	3201      	adds	r2, #1
 8008b48:	9245      	str	r2, [sp, #276]	; 0x114
 8008b4a:	6862      	ldr	r2, [r4, #4]
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	6062      	str	r2, [r4, #4]
 8008b52:	dd02      	ble.n	8008b5a <__ssvfiscanf_r+0x28e>
 8008b54:	3301      	adds	r3, #1
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	e7ae      	b.n	8008ab8 <__ssvfiscanf_r+0x1ec>
 8008b5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4798      	blx	r3
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d0a8      	beq.n	8008ab8 <__ssvfiscanf_r+0x1ec>
 8008b66:	e78b      	b.n	8008a80 <__ssvfiscanf_r+0x1b4>
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	dc06      	bgt.n	8008b7a <__ssvfiscanf_r+0x2ae>
 8008b6c:	466b      	mov	r3, sp
 8008b6e:	4622      	mov	r2, r4
 8008b70:	a941      	add	r1, sp, #260	; 0x104
 8008b72:	4630      	mov	r0, r6
 8008b74:	f000 fa0e 	bl	8008f94 <_scanf_i>
 8008b78:	e7ac      	b.n	8008ad4 <__ssvfiscanf_r+0x208>
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <__ssvfiscanf_r+0x2ec>)
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f43f aecf 	beq.w	8008920 <__ssvfiscanf_r+0x54>
 8008b82:	466b      	mov	r3, sp
 8008b84:	4622      	mov	r2, r4
 8008b86:	a941      	add	r1, sp, #260	; 0x104
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7fd fab5 	bl	80060f8 <_scanf_float>
 8008b8e:	e7a1      	b.n	8008ad4 <__ssvfiscanf_r+0x208>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b96:	bf18      	it	ne
 8008b98:	f04f 30ff 	movne.w	r0, #4294967295
 8008b9c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ba6:	e7f9      	b.n	8008b9c <__ssvfiscanf_r+0x2d0>
 8008ba8:	08008819 	.word	0x08008819
 8008bac:	08008893 	.word	0x08008893
 8008bb0:	0800acd9 	.word	0x0800acd9
 8008bb4:	0800afe2 	.word	0x0800afe2
 8008bb8:	080060f9 	.word	0x080060f9

08008bbc <_printf_common>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	4699      	mov	r9, r3
 8008bc4:	688a      	ldr	r2, [r1, #8]
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bfb8      	it	lt
 8008bd0:	4613      	movlt	r3, r2
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd8:	4607      	mov	r7, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_printf_common+0x26>
 8008bde:	3301      	adds	r3, #1
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	0699      	lsls	r1, r3, #26
 8008be6:	bf42      	ittt	mi
 8008be8:	6833      	ldrmi	r3, [r6, #0]
 8008bea:	3302      	addmi	r3, #2
 8008bec:	6033      	strmi	r3, [r6, #0]
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	f015 0506 	ands.w	r5, r5, #6
 8008bf4:	d106      	bne.n	8008c04 <_printf_common+0x48>
 8008bf6:	f104 0a19 	add.w	sl, r4, #25
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	dc26      	bgt.n	8008c52 <_printf_common+0x96>
 8008c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c08:	1e13      	subs	r3, r2, #0
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	0692      	lsls	r2, r2, #26
 8008c12:	d42b      	bmi.n	8008c6c <_printf_common+0xb0>
 8008c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d01e      	beq.n	8008c60 <_printf_common+0xa4>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	68e5      	ldr	r5, [r4, #12]
 8008c26:	6832      	ldr	r2, [r6, #0]
 8008c28:	f003 0306 	and.w	r3, r3, #6
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	bf08      	it	eq
 8008c30:	1aad      	subeq	r5, r5, r2
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	bf0c      	ite	eq
 8008c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c3c:	2500      	movne	r5, #0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfc4      	itt	gt
 8008c42:	1a9b      	subgt	r3, r3, r2
 8008c44:	18ed      	addgt	r5, r5, r3
 8008c46:	2600      	movs	r6, #0
 8008c48:	341a      	adds	r4, #26
 8008c4a:	42b5      	cmp	r5, r6
 8008c4c:	d11a      	bne.n	8008c84 <_printf_common+0xc8>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e008      	b.n	8008c64 <_printf_common+0xa8>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4652      	mov	r2, sl
 8008c56:	4649      	mov	r1, r9
 8008c58:	4638      	mov	r0, r7
 8008c5a:	47c0      	blx	r8
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d103      	bne.n	8008c68 <_printf_common+0xac>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	3501      	adds	r5, #1
 8008c6a:	e7c6      	b.n	8008bfa <_printf_common+0x3e>
 8008c6c:	18e1      	adds	r1, r4, r3
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	2030      	movs	r0, #48	; 0x30
 8008c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c76:	4422      	add	r2, r4
 8008c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c80:	3302      	adds	r3, #2
 8008c82:	e7c7      	b.n	8008c14 <_printf_common+0x58>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4622      	mov	r2, r4
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d0e6      	beq.n	8008c60 <_printf_common+0xa4>
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7d9      	b.n	8008c4a <_printf_common+0x8e>
	...

08008c98 <_printf_i>:
 8008c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	4691      	mov	r9, r2
 8008ca0:	7e27      	ldrb	r7, [r4, #24]
 8008ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ca4:	2f78      	cmp	r7, #120	; 0x78
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cae:	d807      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cb0:	2f62      	cmp	r7, #98	; 0x62
 8008cb2:	d80a      	bhi.n	8008cca <_printf_i+0x32>
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	f000 80d8 	beq.w	8008e6a <_printf_i+0x1d2>
 8008cba:	2f58      	cmp	r7, #88	; 0x58
 8008cbc:	f000 80a3 	beq.w	8008e06 <_printf_i+0x16e>
 8008cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cc8:	e03a      	b.n	8008d40 <_printf_i+0xa8>
 8008cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d8f6      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cd2:	a001      	add	r0, pc, #4	; (adr r0, 8008cd8 <_printf_i+0x40>)
 8008cd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008cc1 	.word	0x08008cc1
 8008ce4:	08008cc1 	.word	0x08008cc1
 8008ce8:	08008cc1 	.word	0x08008cc1
 8008cec:	08008cc1 	.word	0x08008cc1
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008cc1 	.word	0x08008cc1
 8008cf8:	08008cc1 	.word	0x08008cc1
 8008cfc:	08008cc1 	.word	0x08008cc1
 8008d00:	08008cc1 	.word	0x08008cc1
 8008d04:	08008e51 	.word	0x08008e51
 8008d08:	08008d75 	.word	0x08008d75
 8008d0c:	08008e33 	.word	0x08008e33
 8008d10:	08008cc1 	.word	0x08008cc1
 8008d14:	08008cc1 	.word	0x08008cc1
 8008d18:	08008e73 	.word	0x08008e73
 8008d1c:	08008cc1 	.word	0x08008cc1
 8008d20:	08008d75 	.word	0x08008d75
 8008d24:	08008cc1 	.word	0x08008cc1
 8008d28:	08008cc1 	.word	0x08008cc1
 8008d2c:	08008e3b 	.word	0x08008e3b
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	600a      	str	r2, [r1, #0]
 8008d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0a3      	b.n	8008e8c <_printf_i+0x1f4>
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	6808      	ldr	r0, [r1, #0]
 8008d48:	062e      	lsls	r6, r5, #24
 8008d4a:	f100 0304 	add.w	r3, r0, #4
 8008d4e:	d50a      	bpl.n	8008d66 <_printf_i+0xce>
 8008d50:	6805      	ldr	r5, [r0, #0]
 8008d52:	600b      	str	r3, [r1, #0]
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	da03      	bge.n	8008d60 <_printf_i+0xc8>
 8008d58:	232d      	movs	r3, #45	; 0x2d
 8008d5a:	426d      	negs	r5, r5
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d60:	485e      	ldr	r0, [pc, #376]	; (8008edc <_printf_i+0x244>)
 8008d62:	230a      	movs	r3, #10
 8008d64:	e019      	b.n	8008d9a <_printf_i+0x102>
 8008d66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d6a:	6805      	ldr	r5, [r0, #0]
 8008d6c:	600b      	str	r3, [r1, #0]
 8008d6e:	bf18      	it	ne
 8008d70:	b22d      	sxthne	r5, r5
 8008d72:	e7ef      	b.n	8008d54 <_printf_i+0xbc>
 8008d74:	680b      	ldr	r3, [r1, #0]
 8008d76:	6825      	ldr	r5, [r4, #0]
 8008d78:	1d18      	adds	r0, r3, #4
 8008d7a:	6008      	str	r0, [r1, #0]
 8008d7c:	0628      	lsls	r0, r5, #24
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0xec>
 8008d80:	681d      	ldr	r5, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0xf2>
 8008d84:	0669      	lsls	r1, r5, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0xe8>
 8008d88:	881d      	ldrh	r5, [r3, #0]
 8008d8a:	4854      	ldr	r0, [pc, #336]	; (8008edc <_printf_i+0x244>)
 8008d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d8e:	bf0c      	ite	eq
 8008d90:	2308      	moveq	r3, #8
 8008d92:	230a      	movne	r3, #10
 8008d94:	2100      	movs	r1, #0
 8008d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9a:	6866      	ldr	r6, [r4, #4]
 8008d9c:	60a6      	str	r6, [r4, #8]
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	bfa2      	ittt	ge
 8008da2:	6821      	ldrge	r1, [r4, #0]
 8008da4:	f021 0104 	bicge.w	r1, r1, #4
 8008da8:	6021      	strge	r1, [r4, #0]
 8008daa:	b90d      	cbnz	r5, 8008db0 <_printf_i+0x118>
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	d04d      	beq.n	8008e4c <_printf_i+0x1b4>
 8008db0:	4616      	mov	r6, r2
 8008db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008db6:	fb03 5711 	mls	r7, r3, r1, r5
 8008dba:	5dc7      	ldrb	r7, [r0, r7]
 8008dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc0:	462f      	mov	r7, r5
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	d9f4      	bls.n	8008db2 <_printf_i+0x11a>
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d10b      	bne.n	8008de4 <_printf_i+0x14c>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	07df      	lsls	r7, r3, #31
 8008dd0:	d508      	bpl.n	8008de4 <_printf_i+0x14c>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	6861      	ldr	r1, [r4, #4]
 8008dd6:	4299      	cmp	r1, r3
 8008dd8:	bfde      	ittt	le
 8008dda:	2330      	movle	r3, #48	; 0x30
 8008ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008de4:	1b92      	subs	r2, r2, r6
 8008de6:	6122      	str	r2, [r4, #16]
 8008de8:	f8cd a000 	str.w	sl, [sp]
 8008dec:	464b      	mov	r3, r9
 8008dee:	aa03      	add	r2, sp, #12
 8008df0:	4621      	mov	r1, r4
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7ff fee2 	bl	8008bbc <_printf_common>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d14c      	bne.n	8008e96 <_printf_i+0x1fe>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	b004      	add	sp, #16
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	4835      	ldr	r0, [pc, #212]	; (8008edc <_printf_i+0x244>)
 8008e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	680e      	ldr	r6, [r1, #0]
 8008e10:	061f      	lsls	r7, r3, #24
 8008e12:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e16:	600e      	str	r6, [r1, #0]
 8008e18:	d514      	bpl.n	8008e44 <_printf_i+0x1ac>
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	bf44      	itt	mi
 8008e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e22:	6023      	strmi	r3, [r4, #0]
 8008e24:	b91d      	cbnz	r5, 8008e2e <_printf_i+0x196>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f023 0320 	bic.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	2310      	movs	r3, #16
 8008e30:	e7b0      	b.n	8008d94 <_printf_i+0xfc>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f043 0320 	orr.w	r3, r3, #32
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	2378      	movs	r3, #120	; 0x78
 8008e3c:	4828      	ldr	r0, [pc, #160]	; (8008ee0 <_printf_i+0x248>)
 8008e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e42:	e7e3      	b.n	8008e0c <_printf_i+0x174>
 8008e44:	065e      	lsls	r6, r3, #25
 8008e46:	bf48      	it	mi
 8008e48:	b2ad      	uxthmi	r5, r5
 8008e4a:	e7e6      	b.n	8008e1a <_printf_i+0x182>
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	e7bb      	b.n	8008dc8 <_printf_i+0x130>
 8008e50:	680b      	ldr	r3, [r1, #0]
 8008e52:	6826      	ldr	r6, [r4, #0]
 8008e54:	6960      	ldr	r0, [r4, #20]
 8008e56:	1d1d      	adds	r5, r3, #4
 8008e58:	600d      	str	r5, [r1, #0]
 8008e5a:	0635      	lsls	r5, r6, #24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0x1cc>
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0x1d2>
 8008e64:	0671      	lsls	r1, r6, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0x1c8>
 8008e68:	8018      	strh	r0, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	4616      	mov	r6, r2
 8008e70:	e7ba      	b.n	8008de8 <_printf_i+0x150>
 8008e72:	680b      	ldr	r3, [r1, #0]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	600a      	str	r2, [r1, #0]
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7f7 f9c6 	bl	8000210 <memchr>
 8008e84:	b108      	cbz	r0, 8008e8a <_printf_i+0x1f2>
 8008e86:	1b80      	subs	r0, r0, r6
 8008e88:	6060      	str	r0, [r4, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	e7a8      	b.n	8008de8 <_printf_i+0x150>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	47d0      	blx	sl
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d0ab      	beq.n	8008dfc <_printf_i+0x164>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	079b      	lsls	r3, r3, #30
 8008ea8:	d413      	bmi.n	8008ed2 <_printf_i+0x23a>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bfb8      	it	lt
 8008eb2:	4618      	movlt	r0, r3
 8008eb4:	e7a4      	b.n	8008e00 <_printf_i+0x168>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d09b      	beq.n	8008dfc <_printf_i+0x164>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dcf2      	bgt.n	8008eb6 <_printf_i+0x21e>
 8008ed0:	e7eb      	b.n	8008eaa <_printf_i+0x212>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f104 0619 	add.w	r6, r4, #25
 8008ed8:	e7f5      	b.n	8008ec6 <_printf_i+0x22e>
 8008eda:	bf00      	nop
 8008edc:	0800afed 	.word	0x0800afed
 8008ee0:	0800affe 	.word	0x0800affe

08008ee4 <_scanf_chars>:
 8008ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	4615      	mov	r5, r2
 8008eea:	688a      	ldr	r2, [r1, #8]
 8008eec:	4680      	mov	r8, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	b932      	cbnz	r2, 8008f00 <_scanf_chars+0x1c>
 8008ef2:	698a      	ldr	r2, [r1, #24]
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2201      	moveq	r2, #1
 8008efa:	f04f 32ff 	movne.w	r2, #4294967295
 8008efe:	608a      	str	r2, [r1, #8]
 8008f00:	6822      	ldr	r2, [r4, #0]
 8008f02:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008f90 <_scanf_chars+0xac>
 8008f06:	06d1      	lsls	r1, r2, #27
 8008f08:	bf5f      	itttt	pl
 8008f0a:	681a      	ldrpl	r2, [r3, #0]
 8008f0c:	1d11      	addpl	r1, r2, #4
 8008f0e:	6019      	strpl	r1, [r3, #0]
 8008f10:	6816      	ldrpl	r6, [r2, #0]
 8008f12:	2700      	movs	r7, #0
 8008f14:	69a0      	ldr	r0, [r4, #24]
 8008f16:	b188      	cbz	r0, 8008f3c <_scanf_chars+0x58>
 8008f18:	2801      	cmp	r0, #1
 8008f1a:	d107      	bne.n	8008f2c <_scanf_chars+0x48>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	6963      	ldr	r3, [r4, #20]
 8008f22:	5c9b      	ldrb	r3, [r3, r2]
 8008f24:	b953      	cbnz	r3, 8008f3c <_scanf_chars+0x58>
 8008f26:	bb27      	cbnz	r7, 8008f72 <_scanf_chars+0x8e>
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	2802      	cmp	r0, #2
 8008f2e:	d120      	bne.n	8008f72 <_scanf_chars+0x8e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d41a      	bmi.n	8008f72 <_scanf_chars+0x8e>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	06da      	lsls	r2, r3, #27
 8008f40:	bf5e      	ittt	pl
 8008f42:	682b      	ldrpl	r3, [r5, #0]
 8008f44:	781b      	ldrbpl	r3, [r3, #0]
 8008f46:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008f4a:	682a      	ldr	r2, [r5, #0]
 8008f4c:	686b      	ldr	r3, [r5, #4]
 8008f4e:	3201      	adds	r2, #1
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	68a2      	ldr	r2, [r4, #8]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	3a01      	subs	r2, #1
 8008f58:	606b      	str	r3, [r5, #4]
 8008f5a:	3701      	adds	r7, #1
 8008f5c:	60a2      	str	r2, [r4, #8]
 8008f5e:	b142      	cbz	r2, 8008f72 <_scanf_chars+0x8e>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dcd7      	bgt.n	8008f14 <_scanf_chars+0x30>
 8008f64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4798      	blx	r3
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0d0      	beq.n	8008f14 <_scanf_chars+0x30>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f013 0310 	ands.w	r3, r3, #16
 8008f78:	d105      	bne.n	8008f86 <_scanf_chars+0xa2>
 8008f7a:	68e2      	ldr	r2, [r4, #12]
 8008f7c:	3201      	adds	r2, #1
 8008f7e:	60e2      	str	r2, [r4, #12]
 8008f80:	69a2      	ldr	r2, [r4, #24]
 8008f82:	b102      	cbz	r2, 8008f86 <_scanf_chars+0xa2>
 8008f84:	7033      	strb	r3, [r6, #0]
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	441f      	add	r7, r3
 8008f8a:	6127      	str	r7, [r4, #16]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e7cb      	b.n	8008f28 <_scanf_chars+0x44>
 8008f90:	0800acd9 	.word	0x0800acd9

08008f94 <_scanf_i>:
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4698      	mov	r8, r3
 8008f9a:	4b74      	ldr	r3, [pc, #464]	; (800916c <_scanf_i+0x1d8>)
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	ab03      	add	r3, sp, #12
 8008faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008fae:	4b70      	ldr	r3, [pc, #448]	; (8009170 <_scanf_i+0x1dc>)
 8008fb0:	69a1      	ldr	r1, [r4, #24]
 8008fb2:	4a70      	ldr	r2, [pc, #448]	; (8009174 <_scanf_i+0x1e0>)
 8008fb4:	2903      	cmp	r1, #3
 8008fb6:	bf18      	it	ne
 8008fb8:	461a      	movne	r2, r3
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	9201      	str	r2, [sp, #4]
 8008fbe:	1e5a      	subs	r2, r3, #1
 8008fc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fc4:	bf88      	it	hi
 8008fc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fca:	4627      	mov	r7, r4
 8008fcc:	bf82      	ittt	hi
 8008fce:	eb03 0905 	addhi.w	r9, r3, r5
 8008fd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fd6:	60a3      	strhi	r3, [r4, #8]
 8008fd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008fdc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008fe0:	bf98      	it	ls
 8008fe2:	f04f 0900 	movls.w	r9, #0
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	463d      	mov	r5, r7
 8008fea:	f04f 0b00 	mov.w	fp, #0
 8008fee:	6831      	ldr	r1, [r6, #0]
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	7809      	ldrb	r1, [r1, #0]
 8008ff4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f7f7 f909 	bl	8000210 <memchr>
 8008ffe:	b328      	cbz	r0, 800904c <_scanf_i+0xb8>
 8009000:	f1bb 0f01 	cmp.w	fp, #1
 8009004:	d159      	bne.n	80090ba <_scanf_i+0x126>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	b92a      	cbnz	r2, 8009016 <_scanf_i+0x82>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	2308      	movs	r3, #8
 800900e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009012:	6063      	str	r3, [r4, #4]
 8009014:	6022      	str	r2, [r4, #0]
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	68a2      	ldr	r2, [r4, #8]
 8009020:	1e51      	subs	r1, r2, #1
 8009022:	60a1      	str	r1, [r4, #8]
 8009024:	b192      	cbz	r2, 800904c <_scanf_i+0xb8>
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	1c51      	adds	r1, r2, #1
 800902a:	6031      	str	r1, [r6, #0]
 800902c:	7812      	ldrb	r2, [r2, #0]
 800902e:	f805 2b01 	strb.w	r2, [r5], #1
 8009032:	6872      	ldr	r2, [r6, #4]
 8009034:	3a01      	subs	r2, #1
 8009036:	2a00      	cmp	r2, #0
 8009038:	6072      	str	r2, [r6, #4]
 800903a:	dc07      	bgt.n	800904c <_scanf_i+0xb8>
 800903c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009040:	4631      	mov	r1, r6
 8009042:	4650      	mov	r0, sl
 8009044:	4790      	blx	r2
 8009046:	2800      	cmp	r0, #0
 8009048:	f040 8085 	bne.w	8009156 <_scanf_i+0x1c2>
 800904c:	f10b 0b01 	add.w	fp, fp, #1
 8009050:	f1bb 0f03 	cmp.w	fp, #3
 8009054:	d1cb      	bne.n	8008fee <_scanf_i+0x5a>
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	b90b      	cbnz	r3, 800905e <_scanf_i+0xca>
 800905a:	230a      	movs	r3, #10
 800905c:	6063      	str	r3, [r4, #4]
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	4945      	ldr	r1, [pc, #276]	; (8009178 <_scanf_i+0x1e4>)
 8009062:	6960      	ldr	r0, [r4, #20]
 8009064:	1ac9      	subs	r1, r1, r3
 8009066:	f000 f8b3 	bl	80091d0 <__sccl>
 800906a:	f04f 0b00 	mov.w	fp, #0
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d03d      	beq.n	80090f2 <_scanf_i+0x15e>
 8009076:	6831      	ldr	r1, [r6, #0]
 8009078:	6960      	ldr	r0, [r4, #20]
 800907a:	f891 c000 	ldrb.w	ip, [r1]
 800907e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009082:	2800      	cmp	r0, #0
 8009084:	d035      	beq.n	80090f2 <_scanf_i+0x15e>
 8009086:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800908a:	d124      	bne.n	80090d6 <_scanf_i+0x142>
 800908c:	0510      	lsls	r0, r2, #20
 800908e:	d522      	bpl.n	80090d6 <_scanf_i+0x142>
 8009090:	f10b 0b01 	add.w	fp, fp, #1
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	d003      	beq.n	80090a2 <_scanf_i+0x10e>
 800909a:	3301      	adds	r3, #1
 800909c:	f109 39ff 	add.w	r9, r9, #4294967295
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	6873      	ldr	r3, [r6, #4]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	6073      	str	r3, [r6, #4]
 80090aa:	dd1b      	ble.n	80090e4 <_scanf_i+0x150>
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	6033      	str	r3, [r6, #0]
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	60a3      	str	r3, [r4, #8]
 80090b8:	e7d9      	b.n	800906e <_scanf_i+0xda>
 80090ba:	f1bb 0f02 	cmp.w	fp, #2
 80090be:	d1ae      	bne.n	800901e <_scanf_i+0x8a>
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80090c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80090ca:	d1bf      	bne.n	800904c <_scanf_i+0xb8>
 80090cc:	2310      	movs	r3, #16
 80090ce:	6063      	str	r3, [r4, #4]
 80090d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d4:	e7a2      	b.n	800901c <_scanf_i+0x88>
 80090d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80090da:	6022      	str	r2, [r4, #0]
 80090dc:	780b      	ldrb	r3, [r1, #0]
 80090de:	f805 3b01 	strb.w	r3, [r5], #1
 80090e2:	e7de      	b.n	80090a2 <_scanf_i+0x10e>
 80090e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090e8:	4631      	mov	r1, r6
 80090ea:	4650      	mov	r0, sl
 80090ec:	4798      	blx	r3
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d0df      	beq.n	80090b2 <_scanf_i+0x11e>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	05d9      	lsls	r1, r3, #23
 80090f6:	d50d      	bpl.n	8009114 <_scanf_i+0x180>
 80090f8:	42bd      	cmp	r5, r7
 80090fa:	d909      	bls.n	8009110 <_scanf_i+0x17c>
 80090fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009104:	4632      	mov	r2, r6
 8009106:	4650      	mov	r0, sl
 8009108:	4798      	blx	r3
 800910a:	f105 39ff 	add.w	r9, r5, #4294967295
 800910e:	464d      	mov	r5, r9
 8009110:	42bd      	cmp	r5, r7
 8009112:	d028      	beq.n	8009166 <_scanf_i+0x1d2>
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	f012 0210 	ands.w	r2, r2, #16
 800911a:	d113      	bne.n	8009144 <_scanf_i+0x1b0>
 800911c:	702a      	strb	r2, [r5, #0]
 800911e:	6863      	ldr	r3, [r4, #4]
 8009120:	9e01      	ldr	r6, [sp, #4]
 8009122:	4639      	mov	r1, r7
 8009124:	4650      	mov	r0, sl
 8009126:	47b0      	blx	r6
 8009128:	f8d8 3000 	ldr.w	r3, [r8]
 800912c:	6821      	ldr	r1, [r4, #0]
 800912e:	1d1a      	adds	r2, r3, #4
 8009130:	f8c8 2000 	str.w	r2, [r8]
 8009134:	f011 0f20 	tst.w	r1, #32
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	d00f      	beq.n	800915c <_scanf_i+0x1c8>
 800913c:	6018      	str	r0, [r3, #0]
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60e3      	str	r3, [r4, #12]
 8009144:	1bed      	subs	r5, r5, r7
 8009146:	44ab      	add	fp, r5
 8009148:	6925      	ldr	r5, [r4, #16]
 800914a:	445d      	add	r5, fp
 800914c:	6125      	str	r5, [r4, #16]
 800914e:	2000      	movs	r0, #0
 8009150:	b007      	add	sp, #28
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	f04f 0b00 	mov.w	fp, #0
 800915a:	e7ca      	b.n	80090f2 <_scanf_i+0x15e>
 800915c:	07ca      	lsls	r2, r1, #31
 800915e:	bf4c      	ite	mi
 8009160:	8018      	strhmi	r0, [r3, #0]
 8009162:	6018      	strpl	r0, [r3, #0]
 8009164:	e7eb      	b.n	800913e <_scanf_i+0x1aa>
 8009166:	2001      	movs	r0, #1
 8009168:	e7f2      	b.n	8009150 <_scanf_i+0x1bc>
 800916a:	bf00      	nop
 800916c:	0800ac48 	.word	0x0800ac48
 8009170:	08009361 	.word	0x08009361
 8009174:	080073a9 	.word	0x080073a9
 8009178:	0800b028 	.word	0x0800b028

0800917c <_read_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	; (800919c <_read_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f9 f85f 	bl	800224e <_read>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_read_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_read_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000450 	.word	0x20000450

080091a0 <nan>:
 80091a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091a8 <nan+0x8>
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	00000000 	.word	0x00000000
 80091ac:	7ff80000 	.word	0x7ff80000

080091b0 <_sbrk_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d06      	ldr	r5, [pc, #24]	; (80091cc <_sbrk_r+0x1c>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	602b      	str	r3, [r5, #0]
 80091bc:	f7f9 f8b4 	bl	8002328 <_sbrk>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_sbrk_r+0x1a>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_sbrk_r+0x1a>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	20000450 	.word	0x20000450

080091d0 <__sccl>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	780b      	ldrb	r3, [r1, #0]
 80091d4:	4604      	mov	r4, r0
 80091d6:	2b5e      	cmp	r3, #94	; 0x5e
 80091d8:	bf0b      	itete	eq
 80091da:	784b      	ldrbeq	r3, [r1, #1]
 80091dc:	1c48      	addne	r0, r1, #1
 80091de:	1c88      	addeq	r0, r1, #2
 80091e0:	2200      	movne	r2, #0
 80091e2:	bf08      	it	eq
 80091e4:	2201      	moveq	r2, #1
 80091e6:	1e61      	subs	r1, r4, #1
 80091e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80091ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 80091f0:	42a9      	cmp	r1, r5
 80091f2:	d1fb      	bne.n	80091ec <__sccl+0x1c>
 80091f4:	b90b      	cbnz	r3, 80091fa <__sccl+0x2a>
 80091f6:	3801      	subs	r0, #1
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
 80091fa:	f082 0101 	eor.w	r1, r2, #1
 80091fe:	54e1      	strb	r1, [r4, r3]
 8009200:	1c42      	adds	r2, r0, #1
 8009202:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009206:	2d2d      	cmp	r5, #45	; 0x2d
 8009208:	f102 36ff 	add.w	r6, r2, #4294967295
 800920c:	4610      	mov	r0, r2
 800920e:	d006      	beq.n	800921e <__sccl+0x4e>
 8009210:	2d5d      	cmp	r5, #93	; 0x5d
 8009212:	d0f1      	beq.n	80091f8 <__sccl+0x28>
 8009214:	b90d      	cbnz	r5, 800921a <__sccl+0x4a>
 8009216:	4630      	mov	r0, r6
 8009218:	e7ee      	b.n	80091f8 <__sccl+0x28>
 800921a:	462b      	mov	r3, r5
 800921c:	e7ef      	b.n	80091fe <__sccl+0x2e>
 800921e:	7816      	ldrb	r6, [r2, #0]
 8009220:	2e5d      	cmp	r6, #93	; 0x5d
 8009222:	d0fa      	beq.n	800921a <__sccl+0x4a>
 8009224:	42b3      	cmp	r3, r6
 8009226:	dcf8      	bgt.n	800921a <__sccl+0x4a>
 8009228:	4618      	mov	r0, r3
 800922a:	3001      	adds	r0, #1
 800922c:	4286      	cmp	r6, r0
 800922e:	5421      	strb	r1, [r4, r0]
 8009230:	dcfb      	bgt.n	800922a <__sccl+0x5a>
 8009232:	43d8      	mvns	r0, r3
 8009234:	4430      	add	r0, r6
 8009236:	1c5d      	adds	r5, r3, #1
 8009238:	42b3      	cmp	r3, r6
 800923a:	bfa8      	it	ge
 800923c:	2000      	movge	r0, #0
 800923e:	182b      	adds	r3, r5, r0
 8009240:	3202      	adds	r2, #2
 8009242:	e7de      	b.n	8009202 <__sccl+0x32>

08009244 <strncmp>:
 8009244:	b510      	push	{r4, lr}
 8009246:	b16a      	cbz	r2, 8009264 <strncmp+0x20>
 8009248:	3901      	subs	r1, #1
 800924a:	1884      	adds	r4, r0, r2
 800924c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009250:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009254:	4293      	cmp	r3, r2
 8009256:	d103      	bne.n	8009260 <strncmp+0x1c>
 8009258:	42a0      	cmp	r0, r4
 800925a:	d001      	beq.n	8009260 <strncmp+0x1c>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1f5      	bne.n	800924c <strncmp+0x8>
 8009260:	1a98      	subs	r0, r3, r2
 8009262:	bd10      	pop	{r4, pc}
 8009264:	4610      	mov	r0, r2
 8009266:	e7fc      	b.n	8009262 <strncmp+0x1e>

08009268 <_strtoul_l.isra.0>:
 8009268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800926c:	4e3b      	ldr	r6, [pc, #236]	; (800935c <_strtoul_l.isra.0+0xf4>)
 800926e:	4686      	mov	lr, r0
 8009270:	468c      	mov	ip, r1
 8009272:	4660      	mov	r0, ip
 8009274:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009278:	5da5      	ldrb	r5, [r4, r6]
 800927a:	f015 0508 	ands.w	r5, r5, #8
 800927e:	d1f8      	bne.n	8009272 <_strtoul_l.isra.0+0xa>
 8009280:	2c2d      	cmp	r4, #45	; 0x2d
 8009282:	d134      	bne.n	80092ee <_strtoul_l.isra.0+0x86>
 8009284:	f89c 4000 	ldrb.w	r4, [ip]
 8009288:	f04f 0801 	mov.w	r8, #1
 800928c:	f100 0c02 	add.w	ip, r0, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05e      	beq.n	8009352 <_strtoul_l.isra.0+0xea>
 8009294:	2b10      	cmp	r3, #16
 8009296:	d10c      	bne.n	80092b2 <_strtoul_l.isra.0+0x4a>
 8009298:	2c30      	cmp	r4, #48	; 0x30
 800929a:	d10a      	bne.n	80092b2 <_strtoul_l.isra.0+0x4a>
 800929c:	f89c 0000 	ldrb.w	r0, [ip]
 80092a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80092a4:	2858      	cmp	r0, #88	; 0x58
 80092a6:	d14f      	bne.n	8009348 <_strtoul_l.isra.0+0xe0>
 80092a8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80092ac:	2310      	movs	r3, #16
 80092ae:	f10c 0c02 	add.w	ip, ip, #2
 80092b2:	f04f 37ff 	mov.w	r7, #4294967295
 80092b6:	2500      	movs	r5, #0
 80092b8:	fbb7 f7f3 	udiv	r7, r7, r3
 80092bc:	fb03 f907 	mul.w	r9, r3, r7
 80092c0:	ea6f 0909 	mvn.w	r9, r9
 80092c4:	4628      	mov	r0, r5
 80092c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80092ca:	2e09      	cmp	r6, #9
 80092cc:	d818      	bhi.n	8009300 <_strtoul_l.isra.0+0x98>
 80092ce:	4634      	mov	r4, r6
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	dd24      	ble.n	800931e <_strtoul_l.isra.0+0xb6>
 80092d4:	2d00      	cmp	r5, #0
 80092d6:	db1f      	blt.n	8009318 <_strtoul_l.isra.0+0xb0>
 80092d8:	4287      	cmp	r7, r0
 80092da:	d31d      	bcc.n	8009318 <_strtoul_l.isra.0+0xb0>
 80092dc:	d101      	bne.n	80092e2 <_strtoul_l.isra.0+0x7a>
 80092de:	45a1      	cmp	r9, r4
 80092e0:	db1a      	blt.n	8009318 <_strtoul_l.isra.0+0xb0>
 80092e2:	fb00 4003 	mla	r0, r0, r3, r4
 80092e6:	2501      	movs	r5, #1
 80092e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80092ec:	e7eb      	b.n	80092c6 <_strtoul_l.isra.0+0x5e>
 80092ee:	2c2b      	cmp	r4, #43	; 0x2b
 80092f0:	bf08      	it	eq
 80092f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80092f6:	46a8      	mov	r8, r5
 80092f8:	bf08      	it	eq
 80092fa:	f100 0c02 	addeq.w	ip, r0, #2
 80092fe:	e7c7      	b.n	8009290 <_strtoul_l.isra.0+0x28>
 8009300:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009304:	2e19      	cmp	r6, #25
 8009306:	d801      	bhi.n	800930c <_strtoul_l.isra.0+0xa4>
 8009308:	3c37      	subs	r4, #55	; 0x37
 800930a:	e7e1      	b.n	80092d0 <_strtoul_l.isra.0+0x68>
 800930c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009310:	2e19      	cmp	r6, #25
 8009312:	d804      	bhi.n	800931e <_strtoul_l.isra.0+0xb6>
 8009314:	3c57      	subs	r4, #87	; 0x57
 8009316:	e7db      	b.n	80092d0 <_strtoul_l.isra.0+0x68>
 8009318:	f04f 35ff 	mov.w	r5, #4294967295
 800931c:	e7e4      	b.n	80092e8 <_strtoul_l.isra.0+0x80>
 800931e:	2d00      	cmp	r5, #0
 8009320:	da07      	bge.n	8009332 <_strtoul_l.isra.0+0xca>
 8009322:	2322      	movs	r3, #34	; 0x22
 8009324:	f8ce 3000 	str.w	r3, [lr]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	b942      	cbnz	r2, 8009340 <_strtoul_l.isra.0+0xd8>
 800932e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009332:	f1b8 0f00 	cmp.w	r8, #0
 8009336:	d000      	beq.n	800933a <_strtoul_l.isra.0+0xd2>
 8009338:	4240      	negs	r0, r0
 800933a:	2a00      	cmp	r2, #0
 800933c:	d0f7      	beq.n	800932e <_strtoul_l.isra.0+0xc6>
 800933e:	b10d      	cbz	r5, 8009344 <_strtoul_l.isra.0+0xdc>
 8009340:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009344:	6011      	str	r1, [r2, #0]
 8009346:	e7f2      	b.n	800932e <_strtoul_l.isra.0+0xc6>
 8009348:	2430      	movs	r4, #48	; 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1b1      	bne.n	80092b2 <_strtoul_l.isra.0+0x4a>
 800934e:	2308      	movs	r3, #8
 8009350:	e7af      	b.n	80092b2 <_strtoul_l.isra.0+0x4a>
 8009352:	2c30      	cmp	r4, #48	; 0x30
 8009354:	d0a2      	beq.n	800929c <_strtoul_l.isra.0+0x34>
 8009356:	230a      	movs	r3, #10
 8009358:	e7ab      	b.n	80092b2 <_strtoul_l.isra.0+0x4a>
 800935a:	bf00      	nop
 800935c:	0800acd9 	.word	0x0800acd9

08009360 <_strtoul_r>:
 8009360:	f7ff bf82 	b.w	8009268 <_strtoul_l.isra.0>

08009364 <__submore>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	460c      	mov	r4, r1
 800936a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800936c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009370:	4299      	cmp	r1, r3
 8009372:	d11d      	bne.n	80093b0 <__submore+0x4c>
 8009374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009378:	f7ff f898 	bl	80084ac <_malloc_r>
 800937c:	b918      	cbnz	r0, 8009386 <__submore+0x22>
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938a:	63a3      	str	r3, [r4, #56]	; 0x38
 800938c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009390:	6360      	str	r0, [r4, #52]	; 0x34
 8009392:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009396:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800939a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800939e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80093a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	2000      	movs	r0, #0
 80093ae:	e7e8      	b.n	8009382 <__submore+0x1e>
 80093b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80093b2:	0077      	lsls	r7, r6, #1
 80093b4:	463a      	mov	r2, r7
 80093b6:	f000 fa85 	bl	80098c4 <_realloc_r>
 80093ba:	4605      	mov	r5, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d0de      	beq.n	800937e <__submore+0x1a>
 80093c0:	eb00 0806 	add.w	r8, r0, r6
 80093c4:	4601      	mov	r1, r0
 80093c6:	4632      	mov	r2, r6
 80093c8:	4640      	mov	r0, r8
 80093ca:	f7fc fe7f 	bl	80060cc <memcpy>
 80093ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80093d2:	f8c4 8000 	str.w	r8, [r4]
 80093d6:	e7e9      	b.n	80093ac <__submore+0x48>

080093d8 <__ascii_wctomb>:
 80093d8:	b149      	cbz	r1, 80093ee <__ascii_wctomb+0x16>
 80093da:	2aff      	cmp	r2, #255	; 0xff
 80093dc:	bf85      	ittet	hi
 80093de:	238a      	movhi	r3, #138	; 0x8a
 80093e0:	6003      	strhi	r3, [r0, #0]
 80093e2:	700a      	strbls	r2, [r1, #0]
 80093e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80093e8:	bf98      	it	ls
 80093ea:	2001      	movls	r0, #1
 80093ec:	4770      	bx	lr
 80093ee:	4608      	mov	r0, r1
 80093f0:	4770      	bx	lr
	...

080093f4 <__assert_func>:
 80093f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093f6:	4614      	mov	r4, r2
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <__assert_func+0x2c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4605      	mov	r5, r0
 8009400:	68d8      	ldr	r0, [r3, #12]
 8009402:	b14c      	cbz	r4, 8009418 <__assert_func+0x24>
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <__assert_func+0x30>)
 8009406:	9100      	str	r1, [sp, #0]
 8009408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800940c:	4906      	ldr	r1, [pc, #24]	; (8009428 <__assert_func+0x34>)
 800940e:	462b      	mov	r3, r5
 8009410:	f000 f9a6 	bl	8009760 <fiprintf>
 8009414:	f000 fc96 	bl	8009d44 <abort>
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <__assert_func+0x38>)
 800941a:	461c      	mov	r4, r3
 800941c:	e7f3      	b.n	8009406 <__assert_func+0x12>
 800941e:	bf00      	nop
 8009420:	2000000c 	.word	0x2000000c
 8009424:	0800b02a 	.word	0x0800b02a
 8009428:	0800b037 	.word	0x0800b037
 800942c:	0800b065 	.word	0x0800b065

08009430 <__sflush_r>:
 8009430:	898a      	ldrh	r2, [r1, #12]
 8009432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	4605      	mov	r5, r0
 8009438:	0710      	lsls	r0, r2, #28
 800943a:	460c      	mov	r4, r1
 800943c:	d458      	bmi.n	80094f0 <__sflush_r+0xc0>
 800943e:	684b      	ldr	r3, [r1, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	dc05      	bgt.n	8009450 <__sflush_r+0x20>
 8009444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	dc02      	bgt.n	8009450 <__sflush_r+0x20>
 800944a:	2000      	movs	r0, #0
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009452:	2e00      	cmp	r6, #0
 8009454:	d0f9      	beq.n	800944a <__sflush_r+0x1a>
 8009456:	2300      	movs	r3, #0
 8009458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800945c:	682f      	ldr	r7, [r5, #0]
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	d032      	beq.n	80094c8 <__sflush_r+0x98>
 8009462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	075a      	lsls	r2, r3, #29
 8009468:	d505      	bpl.n	8009476 <__sflush_r+0x46>
 800946a:	6863      	ldr	r3, [r4, #4]
 800946c:	1ac0      	subs	r0, r0, r3
 800946e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009470:	b10b      	cbz	r3, 8009476 <__sflush_r+0x46>
 8009472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009474:	1ac0      	subs	r0, r0, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4602      	mov	r2, r0
 800947a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	4628      	mov	r0, r5
 8009480:	47b0      	blx	r6
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	d106      	bne.n	8009496 <__sflush_r+0x66>
 8009488:	6829      	ldr	r1, [r5, #0]
 800948a:	291d      	cmp	r1, #29
 800948c:	d82c      	bhi.n	80094e8 <__sflush_r+0xb8>
 800948e:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <__sflush_r+0x108>)
 8009490:	40ca      	lsrs	r2, r1
 8009492:	07d6      	lsls	r6, r2, #31
 8009494:	d528      	bpl.n	80094e8 <__sflush_r+0xb8>
 8009496:	2200      	movs	r2, #0
 8009498:	6062      	str	r2, [r4, #4]
 800949a:	04d9      	lsls	r1, r3, #19
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	d504      	bpl.n	80094ac <__sflush_r+0x7c>
 80094a2:	1c42      	adds	r2, r0, #1
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0x7a>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b903      	cbnz	r3, 80094ac <__sflush_r+0x7c>
 80094aa:	6560      	str	r0, [r4, #84]	; 0x54
 80094ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ae:	602f      	str	r7, [r5, #0]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	d0ca      	beq.n	800944a <__sflush_r+0x1a>
 80094b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094b8:	4299      	cmp	r1, r3
 80094ba:	d002      	beq.n	80094c2 <__sflush_r+0x92>
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f9b1 	bl	8009824 <_free_r>
 80094c2:	2000      	movs	r0, #0
 80094c4:	6360      	str	r0, [r4, #52]	; 0x34
 80094c6:	e7c1      	b.n	800944c <__sflush_r+0x1c>
 80094c8:	6a21      	ldr	r1, [r4, #32]
 80094ca:	2301      	movs	r3, #1
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b0      	blx	r6
 80094d0:	1c41      	adds	r1, r0, #1
 80094d2:	d1c7      	bne.n	8009464 <__sflush_r+0x34>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0c4      	beq.n	8009464 <__sflush_r+0x34>
 80094da:	2b1d      	cmp	r3, #29
 80094dc:	d001      	beq.n	80094e2 <__sflush_r+0xb2>
 80094de:	2b16      	cmp	r3, #22
 80094e0:	d101      	bne.n	80094e6 <__sflush_r+0xb6>
 80094e2:	602f      	str	r7, [r5, #0]
 80094e4:	e7b1      	b.n	800944a <__sflush_r+0x1a>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	e7ad      	b.n	800944c <__sflush_r+0x1c>
 80094f0:	690f      	ldr	r7, [r1, #16]
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d0a9      	beq.n	800944a <__sflush_r+0x1a>
 80094f6:	0793      	lsls	r3, r2, #30
 80094f8:	680e      	ldr	r6, [r1, #0]
 80094fa:	bf08      	it	eq
 80094fc:	694b      	ldreq	r3, [r1, #20]
 80094fe:	600f      	str	r7, [r1, #0]
 8009500:	bf18      	it	ne
 8009502:	2300      	movne	r3, #0
 8009504:	eba6 0807 	sub.w	r8, r6, r7
 8009508:	608b      	str	r3, [r1, #8]
 800950a:	f1b8 0f00 	cmp.w	r8, #0
 800950e:	dd9c      	ble.n	800944a <__sflush_r+0x1a>
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009514:	4643      	mov	r3, r8
 8009516:	463a      	mov	r2, r7
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	2800      	cmp	r0, #0
 800951e:	dc06      	bgt.n	800952e <__sflush_r+0xfe>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e78e      	b.n	800944c <__sflush_r+0x1c>
 800952e:	4407      	add	r7, r0
 8009530:	eba8 0800 	sub.w	r8, r8, r0
 8009534:	e7e9      	b.n	800950a <__sflush_r+0xda>
 8009536:	bf00      	nop
 8009538:	20400001 	.word	0x20400001

0800953c <_fflush_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	b913      	cbnz	r3, 800954c <_fflush_r+0x10>
 8009546:	2500      	movs	r5, #0
 8009548:	4628      	mov	r0, r5
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	b118      	cbz	r0, 8009556 <_fflush_r+0x1a>
 800954e:	6983      	ldr	r3, [r0, #24]
 8009550:	b90b      	cbnz	r3, 8009556 <_fflush_r+0x1a>
 8009552:	f000 f887 	bl	8009664 <__sinit>
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <_fflush_r+0x6c>)
 8009558:	429c      	cmp	r4, r3
 800955a:	d11b      	bne.n	8009594 <_fflush_r+0x58>
 800955c:	686c      	ldr	r4, [r5, #4]
 800955e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ef      	beq.n	8009546 <_fflush_r+0xa>
 8009566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009568:	07d0      	lsls	r0, r2, #31
 800956a:	d404      	bmi.n	8009576 <_fflush_r+0x3a>
 800956c:	0599      	lsls	r1, r3, #22
 800956e:	d402      	bmi.n	8009576 <_fflush_r+0x3a>
 8009570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009572:	f000 f927 	bl	80097c4 <__retarget_lock_acquire_recursive>
 8009576:	4628      	mov	r0, r5
 8009578:	4621      	mov	r1, r4
 800957a:	f7ff ff59 	bl	8009430 <__sflush_r>
 800957e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009580:	07da      	lsls	r2, r3, #31
 8009582:	4605      	mov	r5, r0
 8009584:	d4e0      	bmi.n	8009548 <_fflush_r+0xc>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	059b      	lsls	r3, r3, #22
 800958a:	d4dd      	bmi.n	8009548 <_fflush_r+0xc>
 800958c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958e:	f000 f91a 	bl	80097c6 <__retarget_lock_release_recursive>
 8009592:	e7d9      	b.n	8009548 <_fflush_r+0xc>
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <_fflush_r+0x70>)
 8009596:	429c      	cmp	r4, r3
 8009598:	d101      	bne.n	800959e <_fflush_r+0x62>
 800959a:	68ac      	ldr	r4, [r5, #8]
 800959c:	e7df      	b.n	800955e <_fflush_r+0x22>
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <_fflush_r+0x74>)
 80095a0:	429c      	cmp	r4, r3
 80095a2:	bf08      	it	eq
 80095a4:	68ec      	ldreq	r4, [r5, #12]
 80095a6:	e7da      	b.n	800955e <_fflush_r+0x22>
 80095a8:	0800b088 	.word	0x0800b088
 80095ac:	0800b0a8 	.word	0x0800b0a8
 80095b0:	0800b068 	.word	0x0800b068

080095b4 <std>:
 80095b4:	2300      	movs	r3, #0
 80095b6:	b510      	push	{r4, lr}
 80095b8:	4604      	mov	r4, r0
 80095ba:	e9c0 3300 	strd	r3, r3, [r0]
 80095be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c2:	6083      	str	r3, [r0, #8]
 80095c4:	8181      	strh	r1, [r0, #12]
 80095c6:	6643      	str	r3, [r0, #100]	; 0x64
 80095c8:	81c2      	strh	r2, [r0, #14]
 80095ca:	6183      	str	r3, [r0, #24]
 80095cc:	4619      	mov	r1, r3
 80095ce:	2208      	movs	r2, #8
 80095d0:	305c      	adds	r0, #92	; 0x5c
 80095d2:	f7fc fd89 	bl	80060e8 <memset>
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <std+0x38>)
 80095d8:	6263      	str	r3, [r4, #36]	; 0x24
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x3c>)
 80095dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x40>)
 80095e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <std+0x44>)
 80095e4:	6224      	str	r4, [r4, #32]
 80095e6:	6323      	str	r3, [r4, #48]	; 0x30
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	bf00      	nop
 80095ec:	080065bd 	.word	0x080065bd
 80095f0:	080065e3 	.word	0x080065e3
 80095f4:	0800661b 	.word	0x0800661b
 80095f8:	0800663f 	.word	0x0800663f

080095fc <_cleanup_r>:
 80095fc:	4901      	ldr	r1, [pc, #4]	; (8009604 <_cleanup_r+0x8>)
 80095fe:	f000 b8c1 	b.w	8009784 <_fwalk_reent>
 8009602:	bf00      	nop
 8009604:	0800953d 	.word	0x0800953d

08009608 <__sfmoreglue>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	1e4a      	subs	r2, r1, #1
 800960c:	2568      	movs	r5, #104	; 0x68
 800960e:	4355      	muls	r5, r2
 8009610:	460e      	mov	r6, r1
 8009612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009616:	f7fe ff49 	bl	80084ac <_malloc_r>
 800961a:	4604      	mov	r4, r0
 800961c:	b140      	cbz	r0, 8009630 <__sfmoreglue+0x28>
 800961e:	2100      	movs	r1, #0
 8009620:	e9c0 1600 	strd	r1, r6, [r0]
 8009624:	300c      	adds	r0, #12
 8009626:	60a0      	str	r0, [r4, #8]
 8009628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800962c:	f7fc fd5c 	bl	80060e8 <memset>
 8009630:	4620      	mov	r0, r4
 8009632:	bd70      	pop	{r4, r5, r6, pc}

08009634 <__sfp_lock_acquire>:
 8009634:	4801      	ldr	r0, [pc, #4]	; (800963c <__sfp_lock_acquire+0x8>)
 8009636:	f000 b8c5 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 800963a:	bf00      	nop
 800963c:	2000045c 	.word	0x2000045c

08009640 <__sfp_lock_release>:
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <__sfp_lock_release+0x8>)
 8009642:	f000 b8c0 	b.w	80097c6 <__retarget_lock_release_recursive>
 8009646:	bf00      	nop
 8009648:	2000045c 	.word	0x2000045c

0800964c <__sinit_lock_acquire>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__sinit_lock_acquire+0x8>)
 800964e:	f000 b8b9 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 8009652:	bf00      	nop
 8009654:	20000457 	.word	0x20000457

08009658 <__sinit_lock_release>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__sinit_lock_release+0x8>)
 800965a:	f000 b8b4 	b.w	80097c6 <__retarget_lock_release_recursive>
 800965e:	bf00      	nop
 8009660:	20000457 	.word	0x20000457

08009664 <__sinit>:
 8009664:	b510      	push	{r4, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	f7ff fff0 	bl	800964c <__sinit_lock_acquire>
 800966c:	69a3      	ldr	r3, [r4, #24]
 800966e:	b11b      	cbz	r3, 8009678 <__sinit+0x14>
 8009670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009674:	f7ff bff0 	b.w	8009658 <__sinit_lock_release>
 8009678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800967c:	6523      	str	r3, [r4, #80]	; 0x50
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <__sinit+0x68>)
 8009680:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <__sinit+0x6c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	62a2      	str	r2, [r4, #40]	; 0x28
 8009686:	42a3      	cmp	r3, r4
 8009688:	bf04      	itt	eq
 800968a:	2301      	moveq	r3, #1
 800968c:	61a3      	streq	r3, [r4, #24]
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f820 	bl	80096d4 <__sfp>
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f81c 	bl	80096d4 <__sfp>
 800969c:	60a0      	str	r0, [r4, #8]
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 f818 	bl	80096d4 <__sfp>
 80096a4:	2200      	movs	r2, #0
 80096a6:	60e0      	str	r0, [r4, #12]
 80096a8:	2104      	movs	r1, #4
 80096aa:	6860      	ldr	r0, [r4, #4]
 80096ac:	f7ff ff82 	bl	80095b4 <std>
 80096b0:	68a0      	ldr	r0, [r4, #8]
 80096b2:	2201      	movs	r2, #1
 80096b4:	2109      	movs	r1, #9
 80096b6:	f7ff ff7d 	bl	80095b4 <std>
 80096ba:	68e0      	ldr	r0, [r4, #12]
 80096bc:	2202      	movs	r2, #2
 80096be:	2112      	movs	r1, #18
 80096c0:	f7ff ff78 	bl	80095b4 <std>
 80096c4:	2301      	movs	r3, #1
 80096c6:	61a3      	str	r3, [r4, #24]
 80096c8:	e7d2      	b.n	8009670 <__sinit+0xc>
 80096ca:	bf00      	nop
 80096cc:	0800ac6c 	.word	0x0800ac6c
 80096d0:	080095fd 	.word	0x080095fd

080096d4 <__sfp>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	4607      	mov	r7, r0
 80096d8:	f7ff ffac 	bl	8009634 <__sfp_lock_acquire>
 80096dc:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <__sfp+0x84>)
 80096de:	681e      	ldr	r6, [r3, #0]
 80096e0:	69b3      	ldr	r3, [r6, #24]
 80096e2:	b913      	cbnz	r3, 80096ea <__sfp+0x16>
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7ff ffbd 	bl	8009664 <__sinit>
 80096ea:	3648      	adds	r6, #72	; 0x48
 80096ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	d503      	bpl.n	80096fc <__sfp+0x28>
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	b30b      	cbz	r3, 800973c <__sfp+0x68>
 80096f8:	6836      	ldr	r6, [r6, #0]
 80096fa:	e7f7      	b.n	80096ec <__sfp+0x18>
 80096fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009700:	b9d5      	cbnz	r5, 8009738 <__sfp+0x64>
 8009702:	4b16      	ldr	r3, [pc, #88]	; (800975c <__sfp+0x88>)
 8009704:	60e3      	str	r3, [r4, #12]
 8009706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800970a:	6665      	str	r5, [r4, #100]	; 0x64
 800970c:	f000 f859 	bl	80097c2 <__retarget_lock_init_recursive>
 8009710:	f7ff ff96 	bl	8009640 <__sfp_lock_release>
 8009714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800971c:	6025      	str	r5, [r4, #0]
 800971e:	61a5      	str	r5, [r4, #24]
 8009720:	2208      	movs	r2, #8
 8009722:	4629      	mov	r1, r5
 8009724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009728:	f7fc fcde 	bl	80060e8 <memset>
 800972c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009734:	4620      	mov	r0, r4
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	3468      	adds	r4, #104	; 0x68
 800973a:	e7d9      	b.n	80096f0 <__sfp+0x1c>
 800973c:	2104      	movs	r1, #4
 800973e:	4638      	mov	r0, r7
 8009740:	f7ff ff62 	bl	8009608 <__sfmoreglue>
 8009744:	4604      	mov	r4, r0
 8009746:	6030      	str	r0, [r6, #0]
 8009748:	2800      	cmp	r0, #0
 800974a:	d1d5      	bne.n	80096f8 <__sfp+0x24>
 800974c:	f7ff ff78 	bl	8009640 <__sfp_lock_release>
 8009750:	230c      	movs	r3, #12
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	e7ee      	b.n	8009734 <__sfp+0x60>
 8009756:	bf00      	nop
 8009758:	0800ac6c 	.word	0x0800ac6c
 800975c:	ffff0001 	.word	0xffff0001

08009760 <fiprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b503      	push	{r0, r1, lr}
 8009764:	4601      	mov	r1, r0
 8009766:	ab03      	add	r3, sp, #12
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <fiprintf+0x20>)
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f000 f8f7 	bl	8009964 <_vfiprintf_r>
 8009776:	b002      	add	sp, #8
 8009778:	f85d eb04 	ldr.w	lr, [sp], #4
 800977c:	b003      	add	sp, #12
 800977e:	4770      	bx	lr
 8009780:	2000000c 	.word	0x2000000c

08009784 <_fwalk_reent>:
 8009784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009788:	4606      	mov	r6, r0
 800978a:	4688      	mov	r8, r1
 800978c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009790:	2700      	movs	r7, #0
 8009792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009796:	f1b9 0901 	subs.w	r9, r9, #1
 800979a:	d505      	bpl.n	80097a8 <_fwalk_reent+0x24>
 800979c:	6824      	ldr	r4, [r4, #0]
 800979e:	2c00      	cmp	r4, #0
 80097a0:	d1f7      	bne.n	8009792 <_fwalk_reent+0xe>
 80097a2:	4638      	mov	r0, r7
 80097a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a8:	89ab      	ldrh	r3, [r5, #12]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d907      	bls.n	80097be <_fwalk_reent+0x3a>
 80097ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097b2:	3301      	adds	r3, #1
 80097b4:	d003      	beq.n	80097be <_fwalk_reent+0x3a>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	47c0      	blx	r8
 80097bc:	4307      	orrs	r7, r0
 80097be:	3568      	adds	r5, #104	; 0x68
 80097c0:	e7e9      	b.n	8009796 <_fwalk_reent+0x12>

080097c2 <__retarget_lock_init_recursive>:
 80097c2:	4770      	bx	lr

080097c4 <__retarget_lock_acquire_recursive>:
 80097c4:	4770      	bx	lr

080097c6 <__retarget_lock_release_recursive>:
 80097c6:	4770      	bx	lr

080097c8 <malloc>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <malloc+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f7fe be6d 	b.w	80084ac <_malloc_r>
 80097d2:	bf00      	nop
 80097d4:	2000000c 	.word	0x2000000c

080097d8 <memmove>:
 80097d8:	4288      	cmp	r0, r1
 80097da:	b510      	push	{r4, lr}
 80097dc:	eb01 0402 	add.w	r4, r1, r2
 80097e0:	d902      	bls.n	80097e8 <memmove+0x10>
 80097e2:	4284      	cmp	r4, r0
 80097e4:	4623      	mov	r3, r4
 80097e6:	d807      	bhi.n	80097f8 <memmove+0x20>
 80097e8:	1e43      	subs	r3, r0, #1
 80097ea:	42a1      	cmp	r1, r4
 80097ec:	d008      	beq.n	8009800 <memmove+0x28>
 80097ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097f6:	e7f8      	b.n	80097ea <memmove+0x12>
 80097f8:	4402      	add	r2, r0
 80097fa:	4601      	mov	r1, r0
 80097fc:	428a      	cmp	r2, r1
 80097fe:	d100      	bne.n	8009802 <memmove+0x2a>
 8009800:	bd10      	pop	{r4, pc}
 8009802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800980a:	e7f7      	b.n	80097fc <memmove+0x24>

0800980c <__malloc_lock>:
 800980c:	4801      	ldr	r0, [pc, #4]	; (8009814 <__malloc_lock+0x8>)
 800980e:	f7ff bfd9 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 8009812:	bf00      	nop
 8009814:	20000458 	.word	0x20000458

08009818 <__malloc_unlock>:
 8009818:	4801      	ldr	r0, [pc, #4]	; (8009820 <__malloc_unlock+0x8>)
 800981a:	f7ff bfd4 	b.w	80097c6 <__retarget_lock_release_recursive>
 800981e:	bf00      	nop
 8009820:	20000458 	.word	0x20000458

08009824 <_free_r>:
 8009824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009826:	2900      	cmp	r1, #0
 8009828:	d048      	beq.n	80098bc <_free_r+0x98>
 800982a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982e:	9001      	str	r0, [sp, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f1a1 0404 	sub.w	r4, r1, #4
 8009836:	bfb8      	it	lt
 8009838:	18e4      	addlt	r4, r4, r3
 800983a:	f7ff ffe7 	bl	800980c <__malloc_lock>
 800983e:	4a20      	ldr	r2, [pc, #128]	; (80098c0 <_free_r+0x9c>)
 8009840:	9801      	ldr	r0, [sp, #4]
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	4615      	mov	r5, r2
 8009846:	b933      	cbnz	r3, 8009856 <_free_r+0x32>
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	6014      	str	r4, [r2, #0]
 800984c:	b003      	add	sp, #12
 800984e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009852:	f7ff bfe1 	b.w	8009818 <__malloc_unlock>
 8009856:	42a3      	cmp	r3, r4
 8009858:	d90b      	bls.n	8009872 <_free_r+0x4e>
 800985a:	6821      	ldr	r1, [r4, #0]
 800985c:	1862      	adds	r2, r4, r1
 800985e:	4293      	cmp	r3, r2
 8009860:	bf04      	itt	eq
 8009862:	681a      	ldreq	r2, [r3, #0]
 8009864:	685b      	ldreq	r3, [r3, #4]
 8009866:	6063      	str	r3, [r4, #4]
 8009868:	bf04      	itt	eq
 800986a:	1852      	addeq	r2, r2, r1
 800986c:	6022      	streq	r2, [r4, #0]
 800986e:	602c      	str	r4, [r5, #0]
 8009870:	e7ec      	b.n	800984c <_free_r+0x28>
 8009872:	461a      	mov	r2, r3
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	b10b      	cbz	r3, 800987c <_free_r+0x58>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d9fa      	bls.n	8009872 <_free_r+0x4e>
 800987c:	6811      	ldr	r1, [r2, #0]
 800987e:	1855      	adds	r5, r2, r1
 8009880:	42a5      	cmp	r5, r4
 8009882:	d10b      	bne.n	800989c <_free_r+0x78>
 8009884:	6824      	ldr	r4, [r4, #0]
 8009886:	4421      	add	r1, r4
 8009888:	1854      	adds	r4, r2, r1
 800988a:	42a3      	cmp	r3, r4
 800988c:	6011      	str	r1, [r2, #0]
 800988e:	d1dd      	bne.n	800984c <_free_r+0x28>
 8009890:	681c      	ldr	r4, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	6053      	str	r3, [r2, #4]
 8009896:	4421      	add	r1, r4
 8009898:	6011      	str	r1, [r2, #0]
 800989a:	e7d7      	b.n	800984c <_free_r+0x28>
 800989c:	d902      	bls.n	80098a4 <_free_r+0x80>
 800989e:	230c      	movs	r3, #12
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	e7d3      	b.n	800984c <_free_r+0x28>
 80098a4:	6825      	ldr	r5, [r4, #0]
 80098a6:	1961      	adds	r1, r4, r5
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf04      	itt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	bf04      	itt	eq
 80098b4:	1949      	addeq	r1, r1, r5
 80098b6:	6021      	streq	r1, [r4, #0]
 80098b8:	6054      	str	r4, [r2, #4]
 80098ba:	e7c7      	b.n	800984c <_free_r+0x28>
 80098bc:	b003      	add	sp, #12
 80098be:	bd30      	pop	{r4, r5, pc}
 80098c0:	20000208 	.word	0x20000208

080098c4 <_realloc_r>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	4607      	mov	r7, r0
 80098c8:	4614      	mov	r4, r2
 80098ca:	460e      	mov	r6, r1
 80098cc:	b921      	cbnz	r1, 80098d8 <_realloc_r+0x14>
 80098ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098d2:	4611      	mov	r1, r2
 80098d4:	f7fe bdea 	b.w	80084ac <_malloc_r>
 80098d8:	b922      	cbnz	r2, 80098e4 <_realloc_r+0x20>
 80098da:	f7ff ffa3 	bl	8009824 <_free_r>
 80098de:	4625      	mov	r5, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e4:	f000 fa9a 	bl	8009e1c <_malloc_usable_size_r>
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d20f      	bcs.n	800990c <_realloc_r+0x48>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4638      	mov	r0, r7
 80098f0:	f7fe fddc 	bl	80084ac <_malloc_r>
 80098f4:	4605      	mov	r5, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0f2      	beq.n	80098e0 <_realloc_r+0x1c>
 80098fa:	4631      	mov	r1, r6
 80098fc:	4622      	mov	r2, r4
 80098fe:	f7fc fbe5 	bl	80060cc <memcpy>
 8009902:	4631      	mov	r1, r6
 8009904:	4638      	mov	r0, r7
 8009906:	f7ff ff8d 	bl	8009824 <_free_r>
 800990a:	e7e9      	b.n	80098e0 <_realloc_r+0x1c>
 800990c:	4635      	mov	r5, r6
 800990e:	e7e7      	b.n	80098e0 <_realloc_r+0x1c>

08009910 <__sfputc_r>:
 8009910:	6893      	ldr	r3, [r2, #8]
 8009912:	3b01      	subs	r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	b410      	push	{r4}
 8009918:	6093      	str	r3, [r2, #8]
 800991a:	da08      	bge.n	800992e <__sfputc_r+0x1e>
 800991c:	6994      	ldr	r4, [r2, #24]
 800991e:	42a3      	cmp	r3, r4
 8009920:	db01      	blt.n	8009926 <__sfputc_r+0x16>
 8009922:	290a      	cmp	r1, #10
 8009924:	d103      	bne.n	800992e <__sfputc_r+0x1e>
 8009926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800992a:	f000 b94b 	b.w	8009bc4 <__swbuf_r>
 800992e:	6813      	ldr	r3, [r2, #0]
 8009930:	1c58      	adds	r0, r3, #1
 8009932:	6010      	str	r0, [r2, #0]
 8009934:	7019      	strb	r1, [r3, #0]
 8009936:	4608      	mov	r0, r1
 8009938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993c:	4770      	bx	lr

0800993e <__sfputs_r>:
 800993e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009940:	4606      	mov	r6, r0
 8009942:	460f      	mov	r7, r1
 8009944:	4614      	mov	r4, r2
 8009946:	18d5      	adds	r5, r2, r3
 8009948:	42ac      	cmp	r4, r5
 800994a:	d101      	bne.n	8009950 <__sfputs_r+0x12>
 800994c:	2000      	movs	r0, #0
 800994e:	e007      	b.n	8009960 <__sfputs_r+0x22>
 8009950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009954:	463a      	mov	r2, r7
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ffda 	bl	8009910 <__sfputc_r>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d1f3      	bne.n	8009948 <__sfputs_r+0xa>
 8009960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009964 <_vfiprintf_r>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	460d      	mov	r5, r1
 800996a:	b09d      	sub	sp, #116	; 0x74
 800996c:	4614      	mov	r4, r2
 800996e:	4698      	mov	r8, r3
 8009970:	4606      	mov	r6, r0
 8009972:	b118      	cbz	r0, 800997c <_vfiprintf_r+0x18>
 8009974:	6983      	ldr	r3, [r0, #24]
 8009976:	b90b      	cbnz	r3, 800997c <_vfiprintf_r+0x18>
 8009978:	f7ff fe74 	bl	8009664 <__sinit>
 800997c:	4b89      	ldr	r3, [pc, #548]	; (8009ba4 <_vfiprintf_r+0x240>)
 800997e:	429d      	cmp	r5, r3
 8009980:	d11b      	bne.n	80099ba <_vfiprintf_r+0x56>
 8009982:	6875      	ldr	r5, [r6, #4]
 8009984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009986:	07d9      	lsls	r1, r3, #31
 8009988:	d405      	bmi.n	8009996 <_vfiprintf_r+0x32>
 800998a:	89ab      	ldrh	r3, [r5, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d402      	bmi.n	8009996 <_vfiprintf_r+0x32>
 8009990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009992:	f7ff ff17 	bl	80097c4 <__retarget_lock_acquire_recursive>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	071b      	lsls	r3, r3, #28
 800999a:	d501      	bpl.n	80099a0 <_vfiprintf_r+0x3c>
 800999c:	692b      	ldr	r3, [r5, #16]
 800999e:	b9eb      	cbnz	r3, 80099dc <_vfiprintf_r+0x78>
 80099a0:	4629      	mov	r1, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	f000 f960 	bl	8009c68 <__swsetup_r>
 80099a8:	b1c0      	cbz	r0, 80099dc <_vfiprintf_r+0x78>
 80099aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ac:	07dc      	lsls	r4, r3, #31
 80099ae:	d50e      	bpl.n	80099ce <_vfiprintf_r+0x6a>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	b01d      	add	sp, #116	; 0x74
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	4b7b      	ldr	r3, [pc, #492]	; (8009ba8 <_vfiprintf_r+0x244>)
 80099bc:	429d      	cmp	r5, r3
 80099be:	d101      	bne.n	80099c4 <_vfiprintf_r+0x60>
 80099c0:	68b5      	ldr	r5, [r6, #8]
 80099c2:	e7df      	b.n	8009984 <_vfiprintf_r+0x20>
 80099c4:	4b79      	ldr	r3, [pc, #484]	; (8009bac <_vfiprintf_r+0x248>)
 80099c6:	429d      	cmp	r5, r3
 80099c8:	bf08      	it	eq
 80099ca:	68f5      	ldreq	r5, [r6, #12]
 80099cc:	e7da      	b.n	8009984 <_vfiprintf_r+0x20>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	0598      	lsls	r0, r3, #22
 80099d2:	d4ed      	bmi.n	80099b0 <_vfiprintf_r+0x4c>
 80099d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d6:	f7ff fef6 	bl	80097c6 <__retarget_lock_release_recursive>
 80099da:	e7e9      	b.n	80099b0 <_vfiprintf_r+0x4c>
 80099dc:	2300      	movs	r3, #0
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
 80099e0:	2320      	movs	r3, #32
 80099e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ea:	2330      	movs	r3, #48	; 0x30
 80099ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bb0 <_vfiprintf_r+0x24c>
 80099f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099f4:	f04f 0901 	mov.w	r9, #1
 80099f8:	4623      	mov	r3, r4
 80099fa:	469a      	mov	sl, r3
 80099fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a00:	b10a      	cbz	r2, 8009a06 <_vfiprintf_r+0xa2>
 8009a02:	2a25      	cmp	r2, #37	; 0x25
 8009a04:	d1f9      	bne.n	80099fa <_vfiprintf_r+0x96>
 8009a06:	ebba 0b04 	subs.w	fp, sl, r4
 8009a0a:	d00b      	beq.n	8009a24 <_vfiprintf_r+0xc0>
 8009a0c:	465b      	mov	r3, fp
 8009a0e:	4622      	mov	r2, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ff93 	bl	800993e <__sfputs_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f000 80aa 	beq.w	8009b72 <_vfiprintf_r+0x20e>
 8009a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a20:	445a      	add	r2, fp
 8009a22:	9209      	str	r2, [sp, #36]	; 0x24
 8009a24:	f89a 3000 	ldrb.w	r3, [sl]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80a2 	beq.w	8009b72 <_vfiprintf_r+0x20e>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295
 8009a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a38:	f10a 0a01 	add.w	sl, sl, #1
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	9307      	str	r3, [sp, #28]
 8009a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a44:	931a      	str	r3, [sp, #104]	; 0x68
 8009a46:	4654      	mov	r4, sl
 8009a48:	2205      	movs	r2, #5
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	4858      	ldr	r0, [pc, #352]	; (8009bb0 <_vfiprintf_r+0x24c>)
 8009a50:	f7f6 fbde 	bl	8000210 <memchr>
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	b9d8      	cbnz	r0, 8009a90 <_vfiprintf_r+0x12c>
 8009a58:	06d1      	lsls	r1, r2, #27
 8009a5a:	bf44      	itt	mi
 8009a5c:	2320      	movmi	r3, #32
 8009a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a62:	0713      	lsls	r3, r2, #28
 8009a64:	bf44      	itt	mi
 8009a66:	232b      	movmi	r3, #43	; 0x2b
 8009a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a70:	2b2a      	cmp	r3, #42	; 0x2a
 8009a72:	d015      	beq.n	8009aa0 <_vfiprintf_r+0x13c>
 8009a74:	9a07      	ldr	r2, [sp, #28]
 8009a76:	4654      	mov	r4, sl
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f04f 0c0a 	mov.w	ip, #10
 8009a7e:	4621      	mov	r1, r4
 8009a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a84:	3b30      	subs	r3, #48	; 0x30
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d94e      	bls.n	8009b28 <_vfiprintf_r+0x1c4>
 8009a8a:	b1b0      	cbz	r0, 8009aba <_vfiprintf_r+0x156>
 8009a8c:	9207      	str	r2, [sp, #28]
 8009a8e:	e014      	b.n	8009aba <_vfiprintf_r+0x156>
 8009a90:	eba0 0308 	sub.w	r3, r0, r8
 8009a94:	fa09 f303 	lsl.w	r3, r9, r3
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	46a2      	mov	sl, r4
 8009a9e:	e7d2      	b.n	8009a46 <_vfiprintf_r+0xe2>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	1d19      	adds	r1, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	9103      	str	r1, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfbb      	ittet	lt
 8009aac:	425b      	neglt	r3, r3
 8009aae:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab2:	9307      	strge	r3, [sp, #28]
 8009ab4:	9307      	strlt	r3, [sp, #28]
 8009ab6:	bfb8      	it	lt
 8009ab8:	9204      	strlt	r2, [sp, #16]
 8009aba:	7823      	ldrb	r3, [r4, #0]
 8009abc:	2b2e      	cmp	r3, #46	; 0x2e
 8009abe:	d10c      	bne.n	8009ada <_vfiprintf_r+0x176>
 8009ac0:	7863      	ldrb	r3, [r4, #1]
 8009ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac4:	d135      	bne.n	8009b32 <_vfiprintf_r+0x1ce>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	1d1a      	adds	r2, r3, #4
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	9203      	str	r2, [sp, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bfb8      	it	lt
 8009ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad6:	3402      	adds	r4, #2
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bc0 <_vfiprintf_r+0x25c>
 8009ade:	7821      	ldrb	r1, [r4, #0]
 8009ae0:	2203      	movs	r2, #3
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	f7f6 fb94 	bl	8000210 <memchr>
 8009ae8:	b140      	cbz	r0, 8009afc <_vfiprintf_r+0x198>
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	eba0 000a 	sub.w	r0, r0, sl
 8009af0:	fa03 f000 	lsl.w	r0, r3, r0
 8009af4:	9b04      	ldr	r3, [sp, #16]
 8009af6:	4303      	orrs	r3, r0
 8009af8:	3401      	adds	r4, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b00:	482c      	ldr	r0, [pc, #176]	; (8009bb4 <_vfiprintf_r+0x250>)
 8009b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b06:	2206      	movs	r2, #6
 8009b08:	f7f6 fb82 	bl	8000210 <memchr>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d03f      	beq.n	8009b90 <_vfiprintf_r+0x22c>
 8009b10:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <_vfiprintf_r+0x254>)
 8009b12:	bb1b      	cbnz	r3, 8009b5c <_vfiprintf_r+0x1f8>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f023 0307 	bic.w	r3, r3, #7
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b22:	443b      	add	r3, r7
 8009b24:	9309      	str	r3, [sp, #36]	; 0x24
 8009b26:	e767      	b.n	80099f8 <_vfiprintf_r+0x94>
 8009b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	2001      	movs	r0, #1
 8009b30:	e7a5      	b.n	8009a7e <_vfiprintf_r+0x11a>
 8009b32:	2300      	movs	r3, #0
 8009b34:	3401      	adds	r4, #1
 8009b36:	9305      	str	r3, [sp, #20]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f04f 0c0a 	mov.w	ip, #10
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b44:	3a30      	subs	r2, #48	; 0x30
 8009b46:	2a09      	cmp	r2, #9
 8009b48:	d903      	bls.n	8009b52 <_vfiprintf_r+0x1ee>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0c5      	beq.n	8009ada <_vfiprintf_r+0x176>
 8009b4e:	9105      	str	r1, [sp, #20]
 8009b50:	e7c3      	b.n	8009ada <_vfiprintf_r+0x176>
 8009b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b56:	4604      	mov	r4, r0
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e7f0      	b.n	8009b3e <_vfiprintf_r+0x1da>
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <_vfiprintf_r+0x258>)
 8009b64:	a904      	add	r1, sp, #16
 8009b66:	4630      	mov	r0, r6
 8009b68:	f3af 8000 	nop.w
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	1c78      	adds	r0, r7, #1
 8009b70:	d1d6      	bne.n	8009b20 <_vfiprintf_r+0x1bc>
 8009b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b74:	07d9      	lsls	r1, r3, #31
 8009b76:	d405      	bmi.n	8009b84 <_vfiprintf_r+0x220>
 8009b78:	89ab      	ldrh	r3, [r5, #12]
 8009b7a:	059a      	lsls	r2, r3, #22
 8009b7c:	d402      	bmi.n	8009b84 <_vfiprintf_r+0x220>
 8009b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b80:	f7ff fe21 	bl	80097c6 <__retarget_lock_release_recursive>
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	065b      	lsls	r3, r3, #25
 8009b88:	f53f af12 	bmi.w	80099b0 <_vfiprintf_r+0x4c>
 8009b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8e:	e711      	b.n	80099b4 <_vfiprintf_r+0x50>
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <_vfiprintf_r+0x258>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff f87c 	bl	8008c98 <_printf_i>
 8009ba0:	e7e4      	b.n	8009b6c <_vfiprintf_r+0x208>
 8009ba2:	bf00      	nop
 8009ba4:	0800b088 	.word	0x0800b088
 8009ba8:	0800b0a8 	.word	0x0800b0a8
 8009bac:	0800b068 	.word	0x0800b068
 8009bb0:	0800afdc 	.word	0x0800afdc
 8009bb4:	0800afe6 	.word	0x0800afe6
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	0800993f 	.word	0x0800993f
 8009bc0:	0800afe2 	.word	0x0800afe2

08009bc4 <__swbuf_r>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	460e      	mov	r6, r1
 8009bc8:	4614      	mov	r4, r2
 8009bca:	4605      	mov	r5, r0
 8009bcc:	b118      	cbz	r0, 8009bd6 <__swbuf_r+0x12>
 8009bce:	6983      	ldr	r3, [r0, #24]
 8009bd0:	b90b      	cbnz	r3, 8009bd6 <__swbuf_r+0x12>
 8009bd2:	f7ff fd47 	bl	8009664 <__sinit>
 8009bd6:	4b21      	ldr	r3, [pc, #132]	; (8009c5c <__swbuf_r+0x98>)
 8009bd8:	429c      	cmp	r4, r3
 8009bda:	d12b      	bne.n	8009c34 <__swbuf_r+0x70>
 8009bdc:	686c      	ldr	r4, [r5, #4]
 8009bde:	69a3      	ldr	r3, [r4, #24]
 8009be0:	60a3      	str	r3, [r4, #8]
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	071a      	lsls	r2, r3, #28
 8009be6:	d52f      	bpl.n	8009c48 <__swbuf_r+0x84>
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	b36b      	cbz	r3, 8009c48 <__swbuf_r+0x84>
 8009bec:	6923      	ldr	r3, [r4, #16]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1ac0      	subs	r0, r0, r3
 8009bf2:	6963      	ldr	r3, [r4, #20]
 8009bf4:	b2f6      	uxtb	r6, r6
 8009bf6:	4283      	cmp	r3, r0
 8009bf8:	4637      	mov	r7, r6
 8009bfa:	dc04      	bgt.n	8009c06 <__swbuf_r+0x42>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7ff fc9c 	bl	800953c <_fflush_r>
 8009c04:	bb30      	cbnz	r0, 8009c54 <__swbuf_r+0x90>
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	701e      	strb	r6, [r3, #0]
 8009c14:	6963      	ldr	r3, [r4, #20]
 8009c16:	3001      	adds	r0, #1
 8009c18:	4283      	cmp	r3, r0
 8009c1a:	d004      	beq.n	8009c26 <__swbuf_r+0x62>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	07db      	lsls	r3, r3, #31
 8009c20:	d506      	bpl.n	8009c30 <__swbuf_r+0x6c>
 8009c22:	2e0a      	cmp	r6, #10
 8009c24:	d104      	bne.n	8009c30 <__swbuf_r+0x6c>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f7ff fc87 	bl	800953c <_fflush_r>
 8009c2e:	b988      	cbnz	r0, 8009c54 <__swbuf_r+0x90>
 8009c30:	4638      	mov	r0, r7
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c34:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <__swbuf_r+0x9c>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d101      	bne.n	8009c3e <__swbuf_r+0x7a>
 8009c3a:	68ac      	ldr	r4, [r5, #8]
 8009c3c:	e7cf      	b.n	8009bde <__swbuf_r+0x1a>
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <__swbuf_r+0xa0>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	bf08      	it	eq
 8009c44:	68ec      	ldreq	r4, [r5, #12]
 8009c46:	e7ca      	b.n	8009bde <__swbuf_r+0x1a>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 f80c 	bl	8009c68 <__swsetup_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d0cb      	beq.n	8009bec <__swbuf_r+0x28>
 8009c54:	f04f 37ff 	mov.w	r7, #4294967295
 8009c58:	e7ea      	b.n	8009c30 <__swbuf_r+0x6c>
 8009c5a:	bf00      	nop
 8009c5c:	0800b088 	.word	0x0800b088
 8009c60:	0800b0a8 	.word	0x0800b0a8
 8009c64:	0800b068 	.word	0x0800b068

08009c68 <__swsetup_r>:
 8009c68:	4b32      	ldr	r3, [pc, #200]	; (8009d34 <__swsetup_r+0xcc>)
 8009c6a:	b570      	push	{r4, r5, r6, lr}
 8009c6c:	681d      	ldr	r5, [r3, #0]
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460c      	mov	r4, r1
 8009c72:	b125      	cbz	r5, 8009c7e <__swsetup_r+0x16>
 8009c74:	69ab      	ldr	r3, [r5, #24]
 8009c76:	b913      	cbnz	r3, 8009c7e <__swsetup_r+0x16>
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f7ff fcf3 	bl	8009664 <__sinit>
 8009c7e:	4b2e      	ldr	r3, [pc, #184]	; (8009d38 <__swsetup_r+0xd0>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	d10f      	bne.n	8009ca4 <__swsetup_r+0x3c>
 8009c84:	686c      	ldr	r4, [r5, #4]
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c8c:	0719      	lsls	r1, r3, #28
 8009c8e:	d42c      	bmi.n	8009cea <__swsetup_r+0x82>
 8009c90:	06dd      	lsls	r5, r3, #27
 8009c92:	d411      	bmi.n	8009cb8 <__swsetup_r+0x50>
 8009c94:	2309      	movs	r3, #9
 8009c96:	6033      	str	r3, [r6, #0]
 8009c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	e03e      	b.n	8009d22 <__swsetup_r+0xba>
 8009ca4:	4b25      	ldr	r3, [pc, #148]	; (8009d3c <__swsetup_r+0xd4>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d101      	bne.n	8009cae <__swsetup_r+0x46>
 8009caa:	68ac      	ldr	r4, [r5, #8]
 8009cac:	e7eb      	b.n	8009c86 <__swsetup_r+0x1e>
 8009cae:	4b24      	ldr	r3, [pc, #144]	; (8009d40 <__swsetup_r+0xd8>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	bf08      	it	eq
 8009cb4:	68ec      	ldreq	r4, [r5, #12]
 8009cb6:	e7e6      	b.n	8009c86 <__swsetup_r+0x1e>
 8009cb8:	0758      	lsls	r0, r3, #29
 8009cba:	d512      	bpl.n	8009ce2 <__swsetup_r+0x7a>
 8009cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cbe:	b141      	cbz	r1, 8009cd2 <__swsetup_r+0x6a>
 8009cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	d002      	beq.n	8009cce <__swsetup_r+0x66>
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff fdab 	bl	8009824 <_free_r>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6063      	str	r3, [r4, #4]
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f043 0308 	orr.w	r3, r3, #8
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	b94b      	cbnz	r3, 8009d02 <__swsetup_r+0x9a>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cf8:	d003      	beq.n	8009d02 <__swsetup_r+0x9a>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 f84d 	bl	8009d9c <__smakebuf_r>
 8009d02:	89a0      	ldrh	r0, [r4, #12]
 8009d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d08:	f010 0301 	ands.w	r3, r0, #1
 8009d0c:	d00a      	beq.n	8009d24 <__swsetup_r+0xbc>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60a3      	str	r3, [r4, #8]
 8009d12:	6963      	ldr	r3, [r4, #20]
 8009d14:	425b      	negs	r3, r3
 8009d16:	61a3      	str	r3, [r4, #24]
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	b943      	cbnz	r3, 8009d2e <__swsetup_r+0xc6>
 8009d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d20:	d1ba      	bne.n	8009c98 <__swsetup_r+0x30>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	0781      	lsls	r1, r0, #30
 8009d26:	bf58      	it	pl
 8009d28:	6963      	ldrpl	r3, [r4, #20]
 8009d2a:	60a3      	str	r3, [r4, #8]
 8009d2c:	e7f4      	b.n	8009d18 <__swsetup_r+0xb0>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e7f7      	b.n	8009d22 <__swsetup_r+0xba>
 8009d32:	bf00      	nop
 8009d34:	2000000c 	.word	0x2000000c
 8009d38:	0800b088 	.word	0x0800b088
 8009d3c:	0800b0a8 	.word	0x0800b0a8
 8009d40:	0800b068 	.word	0x0800b068

08009d44 <abort>:
 8009d44:	b508      	push	{r3, lr}
 8009d46:	2006      	movs	r0, #6
 8009d48:	f000 f898 	bl	8009e7c <raise>
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7f8 fa74 	bl	800223a <_exit>

08009d52 <__swhatbuf_r>:
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	460e      	mov	r6, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	b096      	sub	sp, #88	; 0x58
 8009d5e:	4614      	mov	r4, r2
 8009d60:	461d      	mov	r5, r3
 8009d62:	da07      	bge.n	8009d74 <__swhatbuf_r+0x22>
 8009d64:	2300      	movs	r3, #0
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	89b3      	ldrh	r3, [r6, #12]
 8009d6a:	061a      	lsls	r2, r3, #24
 8009d6c:	d410      	bmi.n	8009d90 <__swhatbuf_r+0x3e>
 8009d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d72:	e00e      	b.n	8009d92 <__swhatbuf_r+0x40>
 8009d74:	466a      	mov	r2, sp
 8009d76:	f000 f89d 	bl	8009eb4 <_fstat_r>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	dbf2      	blt.n	8009d64 <__swhatbuf_r+0x12>
 8009d7e:	9a01      	ldr	r2, [sp, #4]
 8009d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d88:	425a      	negs	r2, r3
 8009d8a:	415a      	adcs	r2, r3
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	e7ee      	b.n	8009d6e <__swhatbuf_r+0x1c>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	2000      	movs	r0, #0
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	b016      	add	sp, #88	; 0x58
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d9c <__smakebuf_r>:
 8009d9c:	898b      	ldrh	r3, [r1, #12]
 8009d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009da0:	079d      	lsls	r5, r3, #30
 8009da2:	4606      	mov	r6, r0
 8009da4:	460c      	mov	r4, r1
 8009da6:	d507      	bpl.n	8009db8 <__smakebuf_r+0x1c>
 8009da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	2301      	movs	r3, #1
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	b002      	add	sp, #8
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	ab01      	add	r3, sp, #4
 8009dba:	466a      	mov	r2, sp
 8009dbc:	f7ff ffc9 	bl	8009d52 <__swhatbuf_r>
 8009dc0:	9900      	ldr	r1, [sp, #0]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7fe fb71 	bl	80084ac <_malloc_r>
 8009dca:	b948      	cbnz	r0, 8009de0 <__smakebuf_r+0x44>
 8009dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d4ef      	bmi.n	8009db4 <__smakebuf_r+0x18>
 8009dd4:	f023 0303 	bic.w	r3, r3, #3
 8009dd8:	f043 0302 	orr.w	r3, r3, #2
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	e7e3      	b.n	8009da8 <__smakebuf_r+0xc>
 8009de0:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <__smakebuf_r+0x7c>)
 8009de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	9b00      	ldr	r3, [sp, #0]
 8009df0:	6163      	str	r3, [r4, #20]
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	6120      	str	r0, [r4, #16]
 8009df6:	b15b      	cbz	r3, 8009e10 <__smakebuf_r+0x74>
 8009df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 f86b 	bl	8009ed8 <_isatty_r>
 8009e02:	b128      	cbz	r0, 8009e10 <__smakebuf_r+0x74>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	89a0      	ldrh	r0, [r4, #12]
 8009e12:	4305      	orrs	r5, r0
 8009e14:	81a5      	strh	r5, [r4, #12]
 8009e16:	e7cd      	b.n	8009db4 <__smakebuf_r+0x18>
 8009e18:	080095fd 	.word	0x080095fd

08009e1c <_malloc_usable_size_r>:
 8009e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e20:	1f18      	subs	r0, r3, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfbc      	itt	lt
 8009e26:	580b      	ldrlt	r3, [r1, r0]
 8009e28:	18c0      	addlt	r0, r0, r3
 8009e2a:	4770      	bx	lr

08009e2c <_raise_r>:
 8009e2c:	291f      	cmp	r1, #31
 8009e2e:	b538      	push	{r3, r4, r5, lr}
 8009e30:	4604      	mov	r4, r0
 8009e32:	460d      	mov	r5, r1
 8009e34:	d904      	bls.n	8009e40 <_raise_r+0x14>
 8009e36:	2316      	movs	r3, #22
 8009e38:	6003      	str	r3, [r0, #0]
 8009e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e42:	b112      	cbz	r2, 8009e4a <_raise_r+0x1e>
 8009e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e48:	b94b      	cbnz	r3, 8009e5e <_raise_r+0x32>
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 f830 	bl	8009eb0 <_getpid_r>
 8009e50:	462a      	mov	r2, r5
 8009e52:	4601      	mov	r1, r0
 8009e54:	4620      	mov	r0, r4
 8009e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5a:	f000 b817 	b.w	8009e8c <_kill_r>
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d00a      	beq.n	8009e78 <_raise_r+0x4c>
 8009e62:	1c59      	adds	r1, r3, #1
 8009e64:	d103      	bne.n	8009e6e <_raise_r+0x42>
 8009e66:	2316      	movs	r3, #22
 8009e68:	6003      	str	r3, [r0, #0]
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	e7e7      	b.n	8009e3e <_raise_r+0x12>
 8009e6e:	2400      	movs	r4, #0
 8009e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e74:	4628      	mov	r0, r5
 8009e76:	4798      	blx	r3
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e7e0      	b.n	8009e3e <_raise_r+0x12>

08009e7c <raise>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <raise+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f7ff bfd3 	b.w	8009e2c <_raise_r>
 8009e86:	bf00      	nop
 8009e88:	2000000c 	.word	0x2000000c

08009e8c <_kill_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_kill_r+0x20>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	4611      	mov	r1, r2
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	f7f8 f9be 	bl	800221a <_kill>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	d102      	bne.n	8009ea8 <_kill_r+0x1c>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	b103      	cbz	r3, 8009ea8 <_kill_r+0x1c>
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	bd38      	pop	{r3, r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000450 	.word	0x20000450

08009eb0 <_getpid_r>:
 8009eb0:	f7f8 b9ab 	b.w	800220a <_getpid>

08009eb4 <_fstat_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d07      	ldr	r5, [pc, #28]	; (8009ed4 <_fstat_r+0x20>)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	f7f8 fa09 	bl	80022d8 <_fstat>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d102      	bne.n	8009ed0 <_fstat_r+0x1c>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	b103      	cbz	r3, 8009ed0 <_fstat_r+0x1c>
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	bd38      	pop	{r3, r4, r5, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20000450 	.word	0x20000450

08009ed8 <_isatty_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_isatty_r+0x1c>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f8 fa08 	bl	80022f8 <_isatty>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_isatty_r+0x1a>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_isatty_r+0x1a>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	20000450 	.word	0x20000450

08009ef8 <acos>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	ed2d 8b02 	vpush	{d8}
 8009efe:	ec55 4b10 	vmov	r4, r5, d0
 8009f02:	f000 f8a1 	bl	800a048 <__ieee754_acos>
 8009f06:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <acos+0x68>)
 8009f08:	eeb0 8a40 	vmov.f32	s16, s0
 8009f0c:	eef0 8a60 	vmov.f32	s17, s1
 8009f10:	f993 3000 	ldrsb.w	r3, [r3]
 8009f14:	3301      	adds	r3, #1
 8009f16:	d01c      	beq.n	8009f52 <acos+0x5a>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 fe1c 	bl	8000b5c <__aeabi_dcmpun>
 8009f24:	b9a8      	cbnz	r0, 8009f52 <acos+0x5a>
 8009f26:	ec45 4b10 	vmov	d0, r4, r5
 8009f2a:	f000 fdb5 	bl	800aa98 <fabs>
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <acos+0x6c>)
 8009f30:	ec51 0b10 	vmov	r0, r1, d0
 8009f34:	2200      	movs	r2, #0
 8009f36:	f7f6 fe07 	bl	8000b48 <__aeabi_dcmpgt>
 8009f3a:	b150      	cbz	r0, 8009f52 <acos+0x5a>
 8009f3c:	f7fc f89c 	bl	8006078 <__errno>
 8009f40:	ecbd 8b02 	vpop	{d8}
 8009f44:	2321      	movs	r3, #33	; 0x21
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4c:	4806      	ldr	r0, [pc, #24]	; (8009f68 <acos+0x70>)
 8009f4e:	f7ff b927 	b.w	80091a0 <nan>
 8009f52:	eeb0 0a48 	vmov.f32	s0, s16
 8009f56:	eef0 0a68 	vmov.f32	s1, s17
 8009f5a:	ecbd 8b02 	vpop	{d8}
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	200001e0 	.word	0x200001e0
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	0800b065 	.word	0x0800b065

08009f6c <asin>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	ed2d 8b02 	vpush	{d8}
 8009f72:	ec55 4b10 	vmov	r4, r5, d0
 8009f76:	f000 fac7 	bl	800a508 <__ieee754_asin>
 8009f7a:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <asin+0x68>)
 8009f7c:	eeb0 8a40 	vmov.f32	s16, s0
 8009f80:	eef0 8a60 	vmov.f32	s17, s1
 8009f84:	f993 3000 	ldrsb.w	r3, [r3]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	d01c      	beq.n	8009fc6 <asin+0x5a>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 fde2 	bl	8000b5c <__aeabi_dcmpun>
 8009f98:	b9a8      	cbnz	r0, 8009fc6 <asin+0x5a>
 8009f9a:	ec45 4b10 	vmov	d0, r4, r5
 8009f9e:	f000 fd7b 	bl	800aa98 <fabs>
 8009fa2:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <asin+0x6c>)
 8009fa4:	ec51 0b10 	vmov	r0, r1, d0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f7f6 fdcd 	bl	8000b48 <__aeabi_dcmpgt>
 8009fae:	b150      	cbz	r0, 8009fc6 <asin+0x5a>
 8009fb0:	f7fc f862 	bl	8006078 <__errno>
 8009fb4:	ecbd 8b02 	vpop	{d8}
 8009fb8:	2321      	movs	r3, #33	; 0x21
 8009fba:	6003      	str	r3, [r0, #0]
 8009fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc0:	4806      	ldr	r0, [pc, #24]	; (8009fdc <asin+0x70>)
 8009fc2:	f7ff b8ed 	b.w	80091a0 <nan>
 8009fc6:	eeb0 0a48 	vmov.f32	s0, s16
 8009fca:	eef0 0a68 	vmov.f32	s1, s17
 8009fce:	ecbd 8b02 	vpop	{d8}
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	200001e0 	.word	0x200001e0
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	0800b065 	.word	0x0800b065

08009fe0 <sqrt>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	ed2d 8b02 	vpush	{d8}
 8009fe6:	ec55 4b10 	vmov	r4, r5, d0
 8009fea:	f000 fca1 	bl	800a930 <__ieee754_sqrt>
 8009fee:	4b15      	ldr	r3, [pc, #84]	; (800a044 <sqrt+0x64>)
 8009ff0:	eeb0 8a40 	vmov.f32	s16, s0
 8009ff4:	eef0 8a60 	vmov.f32	s17, s1
 8009ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	d019      	beq.n	800a034 <sqrt+0x54>
 800a000:	4622      	mov	r2, r4
 800a002:	462b      	mov	r3, r5
 800a004:	4620      	mov	r0, r4
 800a006:	4629      	mov	r1, r5
 800a008:	f7f6 fda8 	bl	8000b5c <__aeabi_dcmpun>
 800a00c:	b990      	cbnz	r0, 800a034 <sqrt+0x54>
 800a00e:	2200      	movs	r2, #0
 800a010:	2300      	movs	r3, #0
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 fd79 	bl	8000b0c <__aeabi_dcmplt>
 800a01a:	b158      	cbz	r0, 800a034 <sqrt+0x54>
 800a01c:	f7fc f82c 	bl	8006078 <__errno>
 800a020:	2321      	movs	r3, #33	; 0x21
 800a022:	6003      	str	r3, [r0, #0]
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	4610      	mov	r0, r2
 800a02a:	4619      	mov	r1, r3
 800a02c:	f7f6 fc26 	bl	800087c <__aeabi_ddiv>
 800a030:	ec41 0b18 	vmov	d8, r0, r1
 800a034:	eeb0 0a48 	vmov.f32	s0, s16
 800a038:	eef0 0a68 	vmov.f32	s1, s17
 800a03c:	ecbd 8b02 	vpop	{d8}
 800a040:	bd38      	pop	{r3, r4, r5, pc}
 800a042:	bf00      	nop
 800a044:	200001e0 	.word	0x200001e0

0800a048 <__ieee754_acos>:
 800a048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	ec55 4b10 	vmov	r4, r5, d0
 800a050:	49b7      	ldr	r1, [pc, #732]	; (800a330 <__ieee754_acos+0x2e8>)
 800a052:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a056:	428b      	cmp	r3, r1
 800a058:	dd1b      	ble.n	800a092 <__ieee754_acos+0x4a>
 800a05a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a05e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a062:	4323      	orrs	r3, r4
 800a064:	d106      	bne.n	800a074 <__ieee754_acos+0x2c>
 800a066:	2d00      	cmp	r5, #0
 800a068:	f300 8211 	bgt.w	800a48e <__ieee754_acos+0x446>
 800a06c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a2c8 <__ieee754_acos+0x280>
 800a070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	ee10 2a10 	vmov	r2, s0
 800a078:	462b      	mov	r3, r5
 800a07a:	ee10 0a10 	vmov	r0, s0
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 f91a 	bl	80002b8 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	f7f6 fbf8 	bl	800087c <__aeabi_ddiv>
 800a08c:	ec41 0b10 	vmov	d0, r0, r1
 800a090:	e7ee      	b.n	800a070 <__ieee754_acos+0x28>
 800a092:	49a8      	ldr	r1, [pc, #672]	; (800a334 <__ieee754_acos+0x2ec>)
 800a094:	428b      	cmp	r3, r1
 800a096:	f300 8087 	bgt.w	800a1a8 <__ieee754_acos+0x160>
 800a09a:	4aa7      	ldr	r2, [pc, #668]	; (800a338 <__ieee754_acos+0x2f0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	f340 81f9 	ble.w	800a494 <__ieee754_acos+0x44c>
 800a0a2:	ee10 2a10 	vmov	r2, s0
 800a0a6:	ee10 0a10 	vmov	r0, s0
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 fabb 	bl	8000628 <__aeabi_dmul>
 800a0b2:	a387      	add	r3, pc, #540	; (adr r3, 800a2d0 <__ieee754_acos+0x288>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	f7f6 fab4 	bl	8000628 <__aeabi_dmul>
 800a0c0:	a385      	add	r3, pc, #532	; (adr r3, 800a2d8 <__ieee754_acos+0x290>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 f8f9 	bl	80002bc <__adddf3>
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	f7f6 faab 	bl	8000628 <__aeabi_dmul>
 800a0d2:	a383      	add	r3, pc, #524	; (adr r3, 800a2e0 <__ieee754_acos+0x298>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 f8ee 	bl	80002b8 <__aeabi_dsub>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	f7f6 faa2 	bl	8000628 <__aeabi_dmul>
 800a0e4:	a380      	add	r3, pc, #512	; (adr r3, 800a2e8 <__ieee754_acos+0x2a0>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	f7f6 f8e7 	bl	80002bc <__adddf3>
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	463b      	mov	r3, r7
 800a0f2:	f7f6 fa99 	bl	8000628 <__aeabi_dmul>
 800a0f6:	a37e      	add	r3, pc, #504	; (adr r3, 800a2f0 <__ieee754_acos+0x2a8>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7f6 f8dc 	bl	80002b8 <__aeabi_dsub>
 800a100:	4632      	mov	r2, r6
 800a102:	463b      	mov	r3, r7
 800a104:	f7f6 fa90 	bl	8000628 <__aeabi_dmul>
 800a108:	a37b      	add	r3, pc, #492	; (adr r3, 800a2f8 <__ieee754_acos+0x2b0>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 f8d5 	bl	80002bc <__adddf3>
 800a112:	4632      	mov	r2, r6
 800a114:	463b      	mov	r3, r7
 800a116:	f7f6 fa87 	bl	8000628 <__aeabi_dmul>
 800a11a:	a379      	add	r3, pc, #484	; (adr r3, 800a300 <__ieee754_acos+0x2b8>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	4680      	mov	r8, r0
 800a122:	4689      	mov	r9, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fa7e 	bl	8000628 <__aeabi_dmul>
 800a12c:	a376      	add	r3, pc, #472	; (adr r3, 800a308 <__ieee754_acos+0x2c0>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 f8c1 	bl	80002b8 <__aeabi_dsub>
 800a136:	4632      	mov	r2, r6
 800a138:	463b      	mov	r3, r7
 800a13a:	f7f6 fa75 	bl	8000628 <__aeabi_dmul>
 800a13e:	a374      	add	r3, pc, #464	; (adr r3, 800a310 <__ieee754_acos+0x2c8>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f7f6 f8ba 	bl	80002bc <__adddf3>
 800a148:	4632      	mov	r2, r6
 800a14a:	463b      	mov	r3, r7
 800a14c:	f7f6 fa6c 	bl	8000628 <__aeabi_dmul>
 800a150:	a371      	add	r3, pc, #452	; (adr r3, 800a318 <__ieee754_acos+0x2d0>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 f8af 	bl	80002b8 <__aeabi_dsub>
 800a15a:	4632      	mov	r2, r6
 800a15c:	463b      	mov	r3, r7
 800a15e:	f7f6 fa63 	bl	8000628 <__aeabi_dmul>
 800a162:	4b76      	ldr	r3, [pc, #472]	; (800a33c <__ieee754_acos+0x2f4>)
 800a164:	2200      	movs	r2, #0
 800a166:	f7f6 f8a9 	bl	80002bc <__adddf3>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4640      	mov	r0, r8
 800a170:	4649      	mov	r1, r9
 800a172:	f7f6 fb83 	bl	800087c <__aeabi_ddiv>
 800a176:	4622      	mov	r2, r4
 800a178:	462b      	mov	r3, r5
 800a17a:	f7f6 fa55 	bl	8000628 <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	a167      	add	r1, pc, #412	; (adr r1, 800a320 <__ieee754_acos+0x2d8>)
 800a184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a188:	f7f6 f896 	bl	80002b8 <__aeabi_dsub>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4620      	mov	r0, r4
 800a192:	4629      	mov	r1, r5
 800a194:	f7f6 f890 	bl	80002b8 <__aeabi_dsub>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	a162      	add	r1, pc, #392	; (adr r1, 800a328 <__ieee754_acos+0x2e0>)
 800a19e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a2:	f7f6 f889 	bl	80002b8 <__aeabi_dsub>
 800a1a6:	e771      	b.n	800a08c <__ieee754_acos+0x44>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	f280 80cb 	bge.w	800a344 <__ieee754_acos+0x2fc>
 800a1ae:	ee10 0a10 	vmov	r0, s0
 800a1b2:	4b62      	ldr	r3, [pc, #392]	; (800a33c <__ieee754_acos+0x2f4>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 f880 	bl	80002bc <__adddf3>
 800a1bc:	4b60      	ldr	r3, [pc, #384]	; (800a340 <__ieee754_acos+0x2f8>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f7f6 fa32 	bl	8000628 <__aeabi_dmul>
 800a1c4:	a342      	add	r3, pc, #264	; (adr r3, 800a2d0 <__ieee754_acos+0x288>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	f7f6 fa2b 	bl	8000628 <__aeabi_dmul>
 800a1d2:	a341      	add	r3, pc, #260	; (adr r3, 800a2d8 <__ieee754_acos+0x290>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f870 	bl	80002bc <__adddf3>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	462b      	mov	r3, r5
 800a1e0:	f7f6 fa22 	bl	8000628 <__aeabi_dmul>
 800a1e4:	a33e      	add	r3, pc, #248	; (adr r3, 800a2e0 <__ieee754_acos+0x298>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f6 f865 	bl	80002b8 <__aeabi_dsub>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	f7f6 fa19 	bl	8000628 <__aeabi_dmul>
 800a1f6:	a33c      	add	r3, pc, #240	; (adr r3, 800a2e8 <__ieee754_acos+0x2a0>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 f85e 	bl	80002bc <__adddf3>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 fa10 	bl	8000628 <__aeabi_dmul>
 800a208:	a339      	add	r3, pc, #228	; (adr r3, 800a2f0 <__ieee754_acos+0x2a8>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 f853 	bl	80002b8 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 fa07 	bl	8000628 <__aeabi_dmul>
 800a21a:	a337      	add	r3, pc, #220	; (adr r3, 800a2f8 <__ieee754_acos+0x2b0>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f84c 	bl	80002bc <__adddf3>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f9fe 	bl	8000628 <__aeabi_dmul>
 800a22c:	ec45 4b10 	vmov	d0, r4, r5
 800a230:	4680      	mov	r8, r0
 800a232:	4689      	mov	r9, r1
 800a234:	f000 fb7c 	bl	800a930 <__ieee754_sqrt>
 800a238:	a331      	add	r3, pc, #196	; (adr r3, 800a300 <__ieee754_acos+0x2b8>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	4620      	mov	r0, r4
 800a240:	4629      	mov	r1, r5
 800a242:	ec57 6b10 	vmov	r6, r7, d0
 800a246:	f7f6 f9ef 	bl	8000628 <__aeabi_dmul>
 800a24a:	a32f      	add	r3, pc, #188	; (adr r3, 800a308 <__ieee754_acos+0x2c0>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 f832 	bl	80002b8 <__aeabi_dsub>
 800a254:	4622      	mov	r2, r4
 800a256:	462b      	mov	r3, r5
 800a258:	f7f6 f9e6 	bl	8000628 <__aeabi_dmul>
 800a25c:	a32c      	add	r3, pc, #176	; (adr r3, 800a310 <__ieee754_acos+0x2c8>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f6 f82b 	bl	80002bc <__adddf3>
 800a266:	4622      	mov	r2, r4
 800a268:	462b      	mov	r3, r5
 800a26a:	f7f6 f9dd 	bl	8000628 <__aeabi_dmul>
 800a26e:	a32a      	add	r3, pc, #168	; (adr r3, 800a318 <__ieee754_acos+0x2d0>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 f820 	bl	80002b8 <__aeabi_dsub>
 800a278:	4622      	mov	r2, r4
 800a27a:	462b      	mov	r3, r5
 800a27c:	f7f6 f9d4 	bl	8000628 <__aeabi_dmul>
 800a280:	4b2e      	ldr	r3, [pc, #184]	; (800a33c <__ieee754_acos+0x2f4>)
 800a282:	2200      	movs	r2, #0
 800a284:	f7f6 f81a 	bl	80002bc <__adddf3>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4640      	mov	r0, r8
 800a28e:	4649      	mov	r1, r9
 800a290:	f7f6 faf4 	bl	800087c <__aeabi_ddiv>
 800a294:	4632      	mov	r2, r6
 800a296:	463b      	mov	r3, r7
 800a298:	f7f6 f9c6 	bl	8000628 <__aeabi_dmul>
 800a29c:	a320      	add	r3, pc, #128	; (adr r3, 800a320 <__ieee754_acos+0x2d8>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f6 f809 	bl	80002b8 <__aeabi_dsub>
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	f7f6 f807 	bl	80002bc <__adddf3>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	f7f6 f803 	bl	80002bc <__adddf3>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	a103      	add	r1, pc, #12	; (adr r1, 800a2c8 <__ieee754_acos+0x280>)
 800a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c0:	e76f      	b.n	800a1a2 <__ieee754_acos+0x15a>
 800a2c2:	bf00      	nop
 800a2c4:	f3af 8000 	nop.w
 800a2c8:	54442d18 	.word	0x54442d18
 800a2cc:	400921fb 	.word	0x400921fb
 800a2d0:	0dfdf709 	.word	0x0dfdf709
 800a2d4:	3f023de1 	.word	0x3f023de1
 800a2d8:	7501b288 	.word	0x7501b288
 800a2dc:	3f49efe0 	.word	0x3f49efe0
 800a2e0:	b5688f3b 	.word	0xb5688f3b
 800a2e4:	3fa48228 	.word	0x3fa48228
 800a2e8:	0e884455 	.word	0x0e884455
 800a2ec:	3fc9c155 	.word	0x3fc9c155
 800a2f0:	03eb6f7d 	.word	0x03eb6f7d
 800a2f4:	3fd4d612 	.word	0x3fd4d612
 800a2f8:	55555555 	.word	0x55555555
 800a2fc:	3fc55555 	.word	0x3fc55555
 800a300:	b12e9282 	.word	0xb12e9282
 800a304:	3fb3b8c5 	.word	0x3fb3b8c5
 800a308:	1b8d0159 	.word	0x1b8d0159
 800a30c:	3fe6066c 	.word	0x3fe6066c
 800a310:	9c598ac8 	.word	0x9c598ac8
 800a314:	40002ae5 	.word	0x40002ae5
 800a318:	1c8a2d4b 	.word	0x1c8a2d4b
 800a31c:	40033a27 	.word	0x40033a27
 800a320:	33145c07 	.word	0x33145c07
 800a324:	3c91a626 	.word	0x3c91a626
 800a328:	54442d18 	.word	0x54442d18
 800a32c:	3ff921fb 	.word	0x3ff921fb
 800a330:	3fefffff 	.word	0x3fefffff
 800a334:	3fdfffff 	.word	0x3fdfffff
 800a338:	3c600000 	.word	0x3c600000
 800a33c:	3ff00000 	.word	0x3ff00000
 800a340:	3fe00000 	.word	0x3fe00000
 800a344:	ee10 2a10 	vmov	r2, s0
 800a348:	462b      	mov	r3, r5
 800a34a:	496d      	ldr	r1, [pc, #436]	; (800a500 <__ieee754_acos+0x4b8>)
 800a34c:	2000      	movs	r0, #0
 800a34e:	f7f5 ffb3 	bl	80002b8 <__aeabi_dsub>
 800a352:	4b6c      	ldr	r3, [pc, #432]	; (800a504 <__ieee754_acos+0x4bc>)
 800a354:	2200      	movs	r2, #0
 800a356:	f7f6 f967 	bl	8000628 <__aeabi_dmul>
 800a35a:	4604      	mov	r4, r0
 800a35c:	460d      	mov	r5, r1
 800a35e:	ec45 4b10 	vmov	d0, r4, r5
 800a362:	f000 fae5 	bl	800a930 <__ieee754_sqrt>
 800a366:	a34e      	add	r3, pc, #312	; (adr r3, 800a4a0 <__ieee754_acos+0x458>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	ec59 8b10 	vmov	r8, r9, d0
 800a374:	f7f6 f958 	bl	8000628 <__aeabi_dmul>
 800a378:	a34b      	add	r3, pc, #300	; (adr r3, 800a4a8 <__ieee754_acos+0x460>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ff9d 	bl	80002bc <__adddf3>
 800a382:	4622      	mov	r2, r4
 800a384:	462b      	mov	r3, r5
 800a386:	f7f6 f94f 	bl	8000628 <__aeabi_dmul>
 800a38a:	a349      	add	r3, pc, #292	; (adr r3, 800a4b0 <__ieee754_acos+0x468>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff92 	bl	80002b8 <__aeabi_dsub>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f946 	bl	8000628 <__aeabi_dmul>
 800a39c:	a346      	add	r3, pc, #280	; (adr r3, 800a4b8 <__ieee754_acos+0x470>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff8b 	bl	80002bc <__adddf3>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f93d 	bl	8000628 <__aeabi_dmul>
 800a3ae:	a344      	add	r3, pc, #272	; (adr r3, 800a4c0 <__ieee754_acos+0x478>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 ff80 	bl	80002b8 <__aeabi_dsub>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f934 	bl	8000628 <__aeabi_dmul>
 800a3c0:	a341      	add	r3, pc, #260	; (adr r3, 800a4c8 <__ieee754_acos+0x480>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 ff79 	bl	80002bc <__adddf3>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	f7f6 f92b 	bl	8000628 <__aeabi_dmul>
 800a3d2:	a33f      	add	r3, pc, #252	; (adr r3, 800a4d0 <__ieee754_acos+0x488>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	4682      	mov	sl, r0
 800a3da:	468b      	mov	fp, r1
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f6 f922 	bl	8000628 <__aeabi_dmul>
 800a3e4:	a33c      	add	r3, pc, #240	; (adr r3, 800a4d8 <__ieee754_acos+0x490>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f5 ff65 	bl	80002b8 <__aeabi_dsub>
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	f7f6 f919 	bl	8000628 <__aeabi_dmul>
 800a3f6:	a33a      	add	r3, pc, #232	; (adr r3, 800a4e0 <__ieee754_acos+0x498>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f5 ff5e 	bl	80002bc <__adddf3>
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	f7f6 f910 	bl	8000628 <__aeabi_dmul>
 800a408:	a337      	add	r3, pc, #220	; (adr r3, 800a4e8 <__ieee754_acos+0x4a0>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f5 ff53 	bl	80002b8 <__aeabi_dsub>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f6 f907 	bl	8000628 <__aeabi_dmul>
 800a41a:	4b39      	ldr	r3, [pc, #228]	; (800a500 <__ieee754_acos+0x4b8>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	f7f5 ff4d 	bl	80002bc <__adddf3>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4650      	mov	r0, sl
 800a428:	4659      	mov	r1, fp
 800a42a:	f7f6 fa27 	bl	800087c <__aeabi_ddiv>
 800a42e:	4642      	mov	r2, r8
 800a430:	464b      	mov	r3, r9
 800a432:	f7f6 f8f9 	bl	8000628 <__aeabi_dmul>
 800a436:	2600      	movs	r6, #0
 800a438:	4682      	mov	sl, r0
 800a43a:	468b      	mov	fp, r1
 800a43c:	4632      	mov	r2, r6
 800a43e:	464b      	mov	r3, r9
 800a440:	4630      	mov	r0, r6
 800a442:	4649      	mov	r1, r9
 800a444:	f7f6 f8f0 	bl	8000628 <__aeabi_dmul>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 ff32 	bl	80002b8 <__aeabi_dsub>
 800a454:	4632      	mov	r2, r6
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	464b      	mov	r3, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	4649      	mov	r1, r9
 800a460:	f7f5 ff2c 	bl	80002bc <__adddf3>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4620      	mov	r0, r4
 800a46a:	4629      	mov	r1, r5
 800a46c:	f7f6 fa06 	bl	800087c <__aeabi_ddiv>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4650      	mov	r0, sl
 800a476:	4659      	mov	r1, fp
 800a478:	f7f5 ff20 	bl	80002bc <__adddf3>
 800a47c:	4632      	mov	r2, r6
 800a47e:	464b      	mov	r3, r9
 800a480:	f7f5 ff1c 	bl	80002bc <__adddf3>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	f7f5 ff18 	bl	80002bc <__adddf3>
 800a48c:	e5fe      	b.n	800a08c <__ieee754_acos+0x44>
 800a48e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a4f0 <__ieee754_acos+0x4a8>
 800a492:	e5ed      	b.n	800a070 <__ieee754_acos+0x28>
 800a494:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a4f8 <__ieee754_acos+0x4b0>
 800a498:	e5ea      	b.n	800a070 <__ieee754_acos+0x28>
 800a49a:	bf00      	nop
 800a49c:	f3af 8000 	nop.w
 800a4a0:	0dfdf709 	.word	0x0dfdf709
 800a4a4:	3f023de1 	.word	0x3f023de1
 800a4a8:	7501b288 	.word	0x7501b288
 800a4ac:	3f49efe0 	.word	0x3f49efe0
 800a4b0:	b5688f3b 	.word	0xb5688f3b
 800a4b4:	3fa48228 	.word	0x3fa48228
 800a4b8:	0e884455 	.word	0x0e884455
 800a4bc:	3fc9c155 	.word	0x3fc9c155
 800a4c0:	03eb6f7d 	.word	0x03eb6f7d
 800a4c4:	3fd4d612 	.word	0x3fd4d612
 800a4c8:	55555555 	.word	0x55555555
 800a4cc:	3fc55555 	.word	0x3fc55555
 800a4d0:	b12e9282 	.word	0xb12e9282
 800a4d4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a4d8:	1b8d0159 	.word	0x1b8d0159
 800a4dc:	3fe6066c 	.word	0x3fe6066c
 800a4e0:	9c598ac8 	.word	0x9c598ac8
 800a4e4:	40002ae5 	.word	0x40002ae5
 800a4e8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a4ec:	40033a27 	.word	0x40033a27
	...
 800a4f8:	54442d18 	.word	0x54442d18
 800a4fc:	3ff921fb 	.word	0x3ff921fb
 800a500:	3ff00000 	.word	0x3ff00000
 800a504:	3fe00000 	.word	0x3fe00000

0800a508 <__ieee754_asin>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	ed2d 8b04 	vpush	{d8-d9}
 800a510:	ec55 4b10 	vmov	r4, r5, d0
 800a514:	4bcc      	ldr	r3, [pc, #816]	; (800a848 <__ieee754_asin+0x340>)
 800a516:	b083      	sub	sp, #12
 800a518:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a51c:	4598      	cmp	r8, r3
 800a51e:	9501      	str	r5, [sp, #4]
 800a520:	dd35      	ble.n	800a58e <__ieee754_asin+0x86>
 800a522:	ee10 3a10 	vmov	r3, s0
 800a526:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a52a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a52e:	ea58 0303 	orrs.w	r3, r8, r3
 800a532:	d117      	bne.n	800a564 <__ieee754_asin+0x5c>
 800a534:	a3aa      	add	r3, pc, #680	; (adr r3, 800a7e0 <__ieee754_asin+0x2d8>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	ee10 0a10 	vmov	r0, s0
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f6 f872 	bl	8000628 <__aeabi_dmul>
 800a544:	a3a8      	add	r3, pc, #672	; (adr r3, 800a7e8 <__ieee754_asin+0x2e0>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f6 f869 	bl	8000628 <__aeabi_dmul>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f5 fead 	bl	80002bc <__adddf3>
 800a562:	e00b      	b.n	800a57c <__ieee754_asin+0x74>
 800a564:	ee10 2a10 	vmov	r2, s0
 800a568:	462b      	mov	r3, r5
 800a56a:	ee10 0a10 	vmov	r0, s0
 800a56e:	4629      	mov	r1, r5
 800a570:	f7f5 fea2 	bl	80002b8 <__aeabi_dsub>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	f7f6 f980 	bl	800087c <__aeabi_ddiv>
 800a57c:	4604      	mov	r4, r0
 800a57e:	460d      	mov	r5, r1
 800a580:	ec45 4b10 	vmov	d0, r4, r5
 800a584:	b003      	add	sp, #12
 800a586:	ecbd 8b04 	vpop	{d8-d9}
 800a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58e:	4baf      	ldr	r3, [pc, #700]	; (800a84c <__ieee754_asin+0x344>)
 800a590:	4598      	cmp	r8, r3
 800a592:	dc11      	bgt.n	800a5b8 <__ieee754_asin+0xb0>
 800a594:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a598:	f280 80ae 	bge.w	800a6f8 <__ieee754_asin+0x1f0>
 800a59c:	a394      	add	r3, pc, #592	; (adr r3, 800a7f0 <__ieee754_asin+0x2e8>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	ee10 0a10 	vmov	r0, s0
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f5 fe88 	bl	80002bc <__adddf3>
 800a5ac:	4ba8      	ldr	r3, [pc, #672]	; (800a850 <__ieee754_asin+0x348>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7f6 faca 	bl	8000b48 <__aeabi_dcmpgt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d1e3      	bne.n	800a580 <__ieee754_asin+0x78>
 800a5b8:	ec45 4b10 	vmov	d0, r4, r5
 800a5bc:	f000 fa6c 	bl	800aa98 <fabs>
 800a5c0:	49a3      	ldr	r1, [pc, #652]	; (800a850 <__ieee754_asin+0x348>)
 800a5c2:	ec53 2b10 	vmov	r2, r3, d0
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f7f5 fe76 	bl	80002b8 <__aeabi_dsub>
 800a5cc:	4ba1      	ldr	r3, [pc, #644]	; (800a854 <__ieee754_asin+0x34c>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f7f6 f82a 	bl	8000628 <__aeabi_dmul>
 800a5d4:	a388      	add	r3, pc, #544	; (adr r3, 800a7f8 <__ieee754_asin+0x2f0>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	4604      	mov	r4, r0
 800a5dc:	460d      	mov	r5, r1
 800a5de:	f7f6 f823 	bl	8000628 <__aeabi_dmul>
 800a5e2:	a387      	add	r3, pc, #540	; (adr r3, 800a800 <__ieee754_asin+0x2f8>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 fe68 	bl	80002bc <__adddf3>
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	f7f6 f81a 	bl	8000628 <__aeabi_dmul>
 800a5f4:	a384      	add	r3, pc, #528	; (adr r3, 800a808 <__ieee754_asin+0x300>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f5 fe5d 	bl	80002b8 <__aeabi_dsub>
 800a5fe:	4622      	mov	r2, r4
 800a600:	462b      	mov	r3, r5
 800a602:	f7f6 f811 	bl	8000628 <__aeabi_dmul>
 800a606:	a382      	add	r3, pc, #520	; (adr r3, 800a810 <__ieee754_asin+0x308>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 fe56 	bl	80002bc <__adddf3>
 800a610:	4622      	mov	r2, r4
 800a612:	462b      	mov	r3, r5
 800a614:	f7f6 f808 	bl	8000628 <__aeabi_dmul>
 800a618:	a37f      	add	r3, pc, #508	; (adr r3, 800a818 <__ieee754_asin+0x310>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f7f5 fe4b 	bl	80002b8 <__aeabi_dsub>
 800a622:	4622      	mov	r2, r4
 800a624:	462b      	mov	r3, r5
 800a626:	f7f5 ffff 	bl	8000628 <__aeabi_dmul>
 800a62a:	a37d      	add	r3, pc, #500	; (adr r3, 800a820 <__ieee754_asin+0x318>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f7f5 fe44 	bl	80002bc <__adddf3>
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	f7f5 fff6 	bl	8000628 <__aeabi_dmul>
 800a63c:	a37a      	add	r3, pc, #488	; (adr r3, 800a828 <__ieee754_asin+0x320>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	ec41 0b18 	vmov	d8, r0, r1
 800a646:	4620      	mov	r0, r4
 800a648:	4629      	mov	r1, r5
 800a64a:	f7f5 ffed 	bl	8000628 <__aeabi_dmul>
 800a64e:	a378      	add	r3, pc, #480	; (adr r3, 800a830 <__ieee754_asin+0x328>)
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f5 fe30 	bl	80002b8 <__aeabi_dsub>
 800a658:	4622      	mov	r2, r4
 800a65a:	462b      	mov	r3, r5
 800a65c:	f7f5 ffe4 	bl	8000628 <__aeabi_dmul>
 800a660:	a375      	add	r3, pc, #468	; (adr r3, 800a838 <__ieee754_asin+0x330>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 fe29 	bl	80002bc <__adddf3>
 800a66a:	4622      	mov	r2, r4
 800a66c:	462b      	mov	r3, r5
 800a66e:	f7f5 ffdb 	bl	8000628 <__aeabi_dmul>
 800a672:	a373      	add	r3, pc, #460	; (adr r3, 800a840 <__ieee754_asin+0x338>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fe1e 	bl	80002b8 <__aeabi_dsub>
 800a67c:	4622      	mov	r2, r4
 800a67e:	462b      	mov	r3, r5
 800a680:	f7f5 ffd2 	bl	8000628 <__aeabi_dmul>
 800a684:	4b72      	ldr	r3, [pc, #456]	; (800a850 <__ieee754_asin+0x348>)
 800a686:	2200      	movs	r2, #0
 800a688:	f7f5 fe18 	bl	80002bc <__adddf3>
 800a68c:	ec45 4b10 	vmov	d0, r4, r5
 800a690:	4606      	mov	r6, r0
 800a692:	460f      	mov	r7, r1
 800a694:	f000 f94c 	bl	800a930 <__ieee754_sqrt>
 800a698:	4b6f      	ldr	r3, [pc, #444]	; (800a858 <__ieee754_asin+0x350>)
 800a69a:	4598      	cmp	r8, r3
 800a69c:	ec5b ab10 	vmov	sl, fp, d0
 800a6a0:	f340 80dc 	ble.w	800a85c <__ieee754_asin+0x354>
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	ec51 0b18 	vmov	r0, r1, d8
 800a6ac:	f7f6 f8e6 	bl	800087c <__aeabi_ddiv>
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	465b      	mov	r3, fp
 800a6b4:	f7f5 ffb8 	bl	8000628 <__aeabi_dmul>
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	f7f5 fdfe 	bl	80002bc <__adddf3>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	f7f5 fdfa 	bl	80002bc <__adddf3>
 800a6c8:	a347      	add	r3, pc, #284	; (adr r3, 800a7e8 <__ieee754_asin+0x2e0>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 fdf3 	bl	80002b8 <__aeabi_dsub>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	a142      	add	r1, pc, #264	; (adr r1, 800a7e0 <__ieee754_asin+0x2d8>)
 800a6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6dc:	f7f5 fdec 	bl	80002b8 <__aeabi_dsub>
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfdc      	itt	le
 800a6e6:	4602      	movle	r2, r0
 800a6e8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	460d      	mov	r5, r1
 800a6f0:	bfdc      	itt	le
 800a6f2:	4614      	movle	r4, r2
 800a6f4:	461d      	movle	r5, r3
 800a6f6:	e743      	b.n	800a580 <__ieee754_asin+0x78>
 800a6f8:	ee10 2a10 	vmov	r2, s0
 800a6fc:	ee10 0a10 	vmov	r0, s0
 800a700:	462b      	mov	r3, r5
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 ff90 	bl	8000628 <__aeabi_dmul>
 800a708:	a33b      	add	r3, pc, #236	; (adr r3, 800a7f8 <__ieee754_asin+0x2f0>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f7f5 ff89 	bl	8000628 <__aeabi_dmul>
 800a716:	a33a      	add	r3, pc, #232	; (adr r3, 800a800 <__ieee754_asin+0x2f8>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f7f5 fdce 	bl	80002bc <__adddf3>
 800a720:	4632      	mov	r2, r6
 800a722:	463b      	mov	r3, r7
 800a724:	f7f5 ff80 	bl	8000628 <__aeabi_dmul>
 800a728:	a337      	add	r3, pc, #220	; (adr r3, 800a808 <__ieee754_asin+0x300>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f7f5 fdc3 	bl	80002b8 <__aeabi_dsub>
 800a732:	4632      	mov	r2, r6
 800a734:	463b      	mov	r3, r7
 800a736:	f7f5 ff77 	bl	8000628 <__aeabi_dmul>
 800a73a:	a335      	add	r3, pc, #212	; (adr r3, 800a810 <__ieee754_asin+0x308>)
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f7f5 fdbc 	bl	80002bc <__adddf3>
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	f7f5 ff6e 	bl	8000628 <__aeabi_dmul>
 800a74c:	a332      	add	r3, pc, #200	; (adr r3, 800a818 <__ieee754_asin+0x310>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fdb1 	bl	80002b8 <__aeabi_dsub>
 800a756:	4632      	mov	r2, r6
 800a758:	463b      	mov	r3, r7
 800a75a:	f7f5 ff65 	bl	8000628 <__aeabi_dmul>
 800a75e:	a330      	add	r3, pc, #192	; (adr r3, 800a820 <__ieee754_asin+0x318>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f7f5 fdaa 	bl	80002bc <__adddf3>
 800a768:	4632      	mov	r2, r6
 800a76a:	463b      	mov	r3, r7
 800a76c:	f7f5 ff5c 	bl	8000628 <__aeabi_dmul>
 800a770:	a32d      	add	r3, pc, #180	; (adr r3, 800a828 <__ieee754_asin+0x320>)
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	4680      	mov	r8, r0
 800a778:	4689      	mov	r9, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 ff53 	bl	8000628 <__aeabi_dmul>
 800a782:	a32b      	add	r3, pc, #172	; (adr r3, 800a830 <__ieee754_asin+0x328>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	f7f5 fd96 	bl	80002b8 <__aeabi_dsub>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	f7f5 ff4a 	bl	8000628 <__aeabi_dmul>
 800a794:	a328      	add	r3, pc, #160	; (adr r3, 800a838 <__ieee754_asin+0x330>)
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f7f5 fd8f 	bl	80002bc <__adddf3>
 800a79e:	4632      	mov	r2, r6
 800a7a0:	463b      	mov	r3, r7
 800a7a2:	f7f5 ff41 	bl	8000628 <__aeabi_dmul>
 800a7a6:	a326      	add	r3, pc, #152	; (adr r3, 800a840 <__ieee754_asin+0x338>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f5 fd84 	bl	80002b8 <__aeabi_dsub>
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	f7f5 ff38 	bl	8000628 <__aeabi_dmul>
 800a7b8:	4b25      	ldr	r3, [pc, #148]	; (800a850 <__ieee754_asin+0x348>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f7f5 fd7e 	bl	80002bc <__adddf3>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	f7f6 f858 	bl	800087c <__aeabi_ddiv>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f5 ff2a 	bl	8000628 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	e6bf      	b.n	800a55e <__ieee754_asin+0x56>
 800a7de:	bf00      	nop
 800a7e0:	54442d18 	.word	0x54442d18
 800a7e4:	3ff921fb 	.word	0x3ff921fb
 800a7e8:	33145c07 	.word	0x33145c07
 800a7ec:	3c91a626 	.word	0x3c91a626
 800a7f0:	8800759c 	.word	0x8800759c
 800a7f4:	7e37e43c 	.word	0x7e37e43c
 800a7f8:	0dfdf709 	.word	0x0dfdf709
 800a7fc:	3f023de1 	.word	0x3f023de1
 800a800:	7501b288 	.word	0x7501b288
 800a804:	3f49efe0 	.word	0x3f49efe0
 800a808:	b5688f3b 	.word	0xb5688f3b
 800a80c:	3fa48228 	.word	0x3fa48228
 800a810:	0e884455 	.word	0x0e884455
 800a814:	3fc9c155 	.word	0x3fc9c155
 800a818:	03eb6f7d 	.word	0x03eb6f7d
 800a81c:	3fd4d612 	.word	0x3fd4d612
 800a820:	55555555 	.word	0x55555555
 800a824:	3fc55555 	.word	0x3fc55555
 800a828:	b12e9282 	.word	0xb12e9282
 800a82c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a830:	1b8d0159 	.word	0x1b8d0159
 800a834:	3fe6066c 	.word	0x3fe6066c
 800a838:	9c598ac8 	.word	0x9c598ac8
 800a83c:	40002ae5 	.word	0x40002ae5
 800a840:	1c8a2d4b 	.word	0x1c8a2d4b
 800a844:	40033a27 	.word	0x40033a27
 800a848:	3fefffff 	.word	0x3fefffff
 800a84c:	3fdfffff 	.word	0x3fdfffff
 800a850:	3ff00000 	.word	0x3ff00000
 800a854:	3fe00000 	.word	0x3fe00000
 800a858:	3fef3332 	.word	0x3fef3332
 800a85c:	ee10 2a10 	vmov	r2, s0
 800a860:	ee10 0a10 	vmov	r0, s0
 800a864:	465b      	mov	r3, fp
 800a866:	4659      	mov	r1, fp
 800a868:	f7f5 fd28 	bl	80002bc <__adddf3>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	ec41 0b19 	vmov	d9, r0, r1
 800a874:	ec51 0b18 	vmov	r0, r1, d8
 800a878:	f7f6 f800 	bl	800087c <__aeabi_ddiv>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	ec51 0b19 	vmov	r0, r1, d9
 800a884:	f7f5 fed0 	bl	8000628 <__aeabi_dmul>
 800a888:	f04f 0800 	mov.w	r8, #0
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	4642      	mov	r2, r8
 800a892:	465b      	mov	r3, fp
 800a894:	4640      	mov	r0, r8
 800a896:	4659      	mov	r1, fp
 800a898:	f7f5 fec6 	bl	8000628 <__aeabi_dmul>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f5 fd08 	bl	80002b8 <__aeabi_dsub>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	465b      	mov	r3, fp
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	4659      	mov	r1, fp
 800a8b4:	f7f5 fd02 	bl	80002bc <__adddf3>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 ffdc 	bl	800087c <__aeabi_ddiv>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	f7f5 fcf8 	bl	80002bc <__adddf3>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	a113      	add	r1, pc, #76	; (adr r1, 800a920 <__ieee754_asin+0x418>)
 800a8d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8d6:	f7f5 fcef 	bl	80002b8 <__aeabi_dsub>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 fce9 	bl	80002b8 <__aeabi_dsub>
 800a8e6:	4642      	mov	r2, r8
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	4659      	mov	r1, fp
 800a8f2:	f7f5 fce3 	bl	80002bc <__adddf3>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	a10b      	add	r1, pc, #44	; (adr r1, 800a928 <__ieee754_asin+0x420>)
 800a8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a900:	f7f5 fcda 	bl	80002b8 <__aeabi_dsub>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4620      	mov	r0, r4
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7f5 fcd4 	bl	80002b8 <__aeabi_dsub>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	a104      	add	r1, pc, #16	; (adr r1, 800a928 <__ieee754_asin+0x420>)
 800a916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91a:	e6df      	b.n	800a6dc <__ieee754_asin+0x1d4>
 800a91c:	f3af 8000 	nop.w
 800a920:	33145c07 	.word	0x33145c07
 800a924:	3c91a626 	.word	0x3c91a626
 800a928:	54442d18 	.word	0x54442d18
 800a92c:	3fe921fb 	.word	0x3fe921fb

0800a930 <__ieee754_sqrt>:
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	ec55 4b10 	vmov	r4, r5, d0
 800a938:	4e56      	ldr	r6, [pc, #344]	; (800aa94 <__ieee754_sqrt+0x164>)
 800a93a:	43ae      	bics	r6, r5
 800a93c:	ee10 0a10 	vmov	r0, s0
 800a940:	ee10 3a10 	vmov	r3, s0
 800a944:	4629      	mov	r1, r5
 800a946:	462a      	mov	r2, r5
 800a948:	d110      	bne.n	800a96c <__ieee754_sqrt+0x3c>
 800a94a:	ee10 2a10 	vmov	r2, s0
 800a94e:	462b      	mov	r3, r5
 800a950:	f7f5 fe6a 	bl	8000628 <__aeabi_dmul>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4620      	mov	r0, r4
 800a95a:	4629      	mov	r1, r5
 800a95c:	f7f5 fcae 	bl	80002bc <__adddf3>
 800a960:	4604      	mov	r4, r0
 800a962:	460d      	mov	r5, r1
 800a964:	ec45 4b10 	vmov	d0, r4, r5
 800a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	dc10      	bgt.n	800a992 <__ieee754_sqrt+0x62>
 800a970:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a974:	4330      	orrs	r0, r6
 800a976:	d0f5      	beq.n	800a964 <__ieee754_sqrt+0x34>
 800a978:	b15d      	cbz	r5, 800a992 <__ieee754_sqrt+0x62>
 800a97a:	ee10 2a10 	vmov	r2, s0
 800a97e:	462b      	mov	r3, r5
 800a980:	ee10 0a10 	vmov	r0, s0
 800a984:	f7f5 fc98 	bl	80002b8 <__aeabi_dsub>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	f7f5 ff76 	bl	800087c <__aeabi_ddiv>
 800a990:	e7e6      	b.n	800a960 <__ieee754_sqrt+0x30>
 800a992:	1509      	asrs	r1, r1, #20
 800a994:	d076      	beq.n	800aa84 <__ieee754_sqrt+0x154>
 800a996:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a99a:	07ce      	lsls	r6, r1, #31
 800a99c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a9a0:	bf5e      	ittt	pl
 800a9a2:	0fda      	lsrpl	r2, r3, #31
 800a9a4:	005b      	lslpl	r3, r3, #1
 800a9a6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a9aa:	0fda      	lsrs	r2, r3, #31
 800a9ac:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a9b0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	106d      	asrs	r5, r5, #1
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	f04f 0e16 	mov.w	lr, #22
 800a9be:	4684      	mov	ip, r0
 800a9c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9c4:	eb0c 0401 	add.w	r4, ip, r1
 800a9c8:	4294      	cmp	r4, r2
 800a9ca:	bfde      	ittt	le
 800a9cc:	1b12      	suble	r2, r2, r4
 800a9ce:	eb04 0c01 	addle.w	ip, r4, r1
 800a9d2:	1840      	addle	r0, r0, r1
 800a9d4:	0052      	lsls	r2, r2, #1
 800a9d6:	f1be 0e01 	subs.w	lr, lr, #1
 800a9da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a9de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9e6:	d1ed      	bne.n	800a9c4 <__ieee754_sqrt+0x94>
 800a9e8:	4671      	mov	r1, lr
 800a9ea:	2720      	movs	r7, #32
 800a9ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a9f0:	4562      	cmp	r2, ip
 800a9f2:	eb04 060e 	add.w	r6, r4, lr
 800a9f6:	dc02      	bgt.n	800a9fe <__ieee754_sqrt+0xce>
 800a9f8:	d113      	bne.n	800aa22 <__ieee754_sqrt+0xf2>
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	d811      	bhi.n	800aa22 <__ieee754_sqrt+0xf2>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	eb06 0e04 	add.w	lr, r6, r4
 800aa04:	da43      	bge.n	800aa8e <__ieee754_sqrt+0x15e>
 800aa06:	f1be 0f00 	cmp.w	lr, #0
 800aa0a:	db40      	blt.n	800aa8e <__ieee754_sqrt+0x15e>
 800aa0c:	f10c 0801 	add.w	r8, ip, #1
 800aa10:	eba2 020c 	sub.w	r2, r2, ip
 800aa14:	429e      	cmp	r6, r3
 800aa16:	bf88      	it	hi
 800aa18:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aa1c:	1b9b      	subs	r3, r3, r6
 800aa1e:	4421      	add	r1, r4
 800aa20:	46c4      	mov	ip, r8
 800aa22:	0052      	lsls	r2, r2, #1
 800aa24:	3f01      	subs	r7, #1
 800aa26:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aa2a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa32:	d1dd      	bne.n	800a9f0 <__ieee754_sqrt+0xc0>
 800aa34:	4313      	orrs	r3, r2
 800aa36:	d006      	beq.n	800aa46 <__ieee754_sqrt+0x116>
 800aa38:	1c4c      	adds	r4, r1, #1
 800aa3a:	bf13      	iteet	ne
 800aa3c:	3101      	addne	r1, #1
 800aa3e:	3001      	addeq	r0, #1
 800aa40:	4639      	moveq	r1, r7
 800aa42:	f021 0101 	bicne.w	r1, r1, #1
 800aa46:	1043      	asrs	r3, r0, #1
 800aa48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa4c:	0849      	lsrs	r1, r1, #1
 800aa4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa52:	07c2      	lsls	r2, r0, #31
 800aa54:	bf48      	it	mi
 800aa56:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800aa5a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800aa5e:	460c      	mov	r4, r1
 800aa60:	463d      	mov	r5, r7
 800aa62:	e77f      	b.n	800a964 <__ieee754_sqrt+0x34>
 800aa64:	0ada      	lsrs	r2, r3, #11
 800aa66:	3815      	subs	r0, #21
 800aa68:	055b      	lsls	r3, r3, #21
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	d0fa      	beq.n	800aa64 <__ieee754_sqrt+0x134>
 800aa6e:	02d7      	lsls	r7, r2, #11
 800aa70:	d50a      	bpl.n	800aa88 <__ieee754_sqrt+0x158>
 800aa72:	f1c1 0420 	rsb	r4, r1, #32
 800aa76:	fa23 f404 	lsr.w	r4, r3, r4
 800aa7a:	1e4d      	subs	r5, r1, #1
 800aa7c:	408b      	lsls	r3, r1
 800aa7e:	4322      	orrs	r2, r4
 800aa80:	1b41      	subs	r1, r0, r5
 800aa82:	e788      	b.n	800a996 <__ieee754_sqrt+0x66>
 800aa84:	4608      	mov	r0, r1
 800aa86:	e7f0      	b.n	800aa6a <__ieee754_sqrt+0x13a>
 800aa88:	0052      	lsls	r2, r2, #1
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	e7ef      	b.n	800aa6e <__ieee754_sqrt+0x13e>
 800aa8e:	46e0      	mov	r8, ip
 800aa90:	e7be      	b.n	800aa10 <__ieee754_sqrt+0xe0>
 800aa92:	bf00      	nop
 800aa94:	7ff00000 	.word	0x7ff00000

0800aa98 <fabs>:
 800aa98:	ec51 0b10 	vmov	r0, r1, d0
 800aa9c:	ee10 2a10 	vmov	r2, s0
 800aaa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aaa4:	ec43 2b10 	vmov	d0, r2, r3
 800aaa8:	4770      	bx	lr
	...

0800aaac <_init>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr

0800aab8 <_fini>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr
